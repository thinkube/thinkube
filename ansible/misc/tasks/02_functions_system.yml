# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# Function System Setup - Individual function files, loaders, and documentation

# SECTION: INDIVIDUAL FUNCTION FILES
# Each function gets its own file - filename matches function name

- name: Create load_dotenv function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/load_dotenv.sh"
    content: |
      #!/bin/bash
      # Function to load .env files and export all variables
      load_dotenv() {
        local env_file="${1:-$HOME/.env}"
        if [ -f "$env_file" ]; then
          set -a
          source "$env_file"
          set +a
          echo "Loaded environment from $env_file"
        else
          echo "Error: $env_file not found"
          return 1
        fi
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create mkcd function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/mkcd.sh"
    content: |
      #!/bin/bash
      # Function to create a directory and change to it
      mkcd() {
        mkdir -p "$1" && cd "$1"
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create extract function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/extract.sh"
    content: |
      #!/bin/bash
      # Universal archive extractor
      extract() {
        if [ -f "$1" ]; then
          case "$1" in
            *.tar.bz2) tar xjf "$1" ;;
            *.tar.gz)  tar xzf "$1" ;;
            *.bz2)     bunzip2 "$1" ;;
            *.rar)     unrar x "$1" ;;
            *.gz)      gunzip "$1" ;;
            *.tar)     tar xf "$1" ;;
            *.tbz2)    tar xjf "$1" ;;
            *.tgz)     tar xzf "$1" ;;
            *.zip)     unzip "$1" ;;
            *.Z)       uncompress "$1" ;;
            *.7z)      7z x "$1" ;;
            *)         echo "'$1' cannot be extracted via extract()" ;;
          esac
        else
          echo "'$1' is not a valid file"
        fi
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create sysinfo function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/sysinfo.sh"
    content: |
      #!/bin/bash
      # Display system information
      sysinfo() {
        echo "Hostname: $(hostname)"
        echo "Kernel: $(uname -r)"
        echo "Uptime: $(uptime -p)"
        echo "Memory:"
        free -h
        echo "Disk usage:"
        df -h | grep -vE "tmpfs|udev"
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create fif function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/fif.sh"
    content: |
      #!/bin/bash
      # Find in files function
      fif() {
        if [ $# -eq 0 ]; then
          echo "Usage: fif <search_term> [directory]"
          return 1
        fi
        
        local search_term="$1"
        local search_dir="${2:-.}"
        
        grep -r --color=auto -n "$search_term" "$search_dir" 2>/dev/null
      }
    mode: '0644'
  tags: [thinkube, functions]

# Git shortcut functions - each in its own file
- name: Create gst function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/gst.sh"
    content: |
      #!/bin/bash
      # Git status shortcut function
      gst() {
        git status "$@"
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create gpl function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/gpl.sh"
    content: |
      #!/bin/bash
      # Git pull shortcut function
      gpl() {
        git pull "$@"
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create gdf function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/gdf.sh"
    content: |
      #!/bin/bash
      # Git diff shortcut function
      gdf() {
        git diff "$@"
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create gcm function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/gcm.sh"
    content: |
      #!/bin/bash
      # Git commit shortcut function
      gcm() {
        git commit -m "$@"
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create gsh function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/gsh.sh"
    content: |
      #!/bin/bash
      # Git stash shortcut function
      gsh() {
        git stash "$@"
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create git_shortcuts function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/git_shortcuts.sh"
    content: |
      #!/bin/bash
      # Display available git shortcuts
      git_shortcuts() {
        echo "Available Thinkube git shortcuts:"
        echo "  gst - git status"
        echo "  gpl - git pull"
        echo "  gdf - git diff"
        echo "  gcm - git commit -m"
        echo "  gsh - git stash"
      }
    mode: '0644'
  tags: [thinkube, functions]

# Utility functions - each in its own file with name matching function
- name: Create list_functions function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/list_functions.sh"
    content: |
      #!/bin/bash
      # Lists all available shared functions with descriptions
      
      list_functions() {
        local format="%s"
        local system_dir="{{ thinkube_system_functions_dir }}"
        local user_dir="{{ thinkube_user_functions_dir }}"
        local show_files=false
        local show_details=false
        
        # Process command line options
        while [[ $# -gt 0 ]]; do
          case "$1" in
            --details|-d)
              show_details=true
              shift
              ;;
            --files|-f)
              show_files=true
              shift
              ;;
            --system|-s)
              user_dir=""
              shift
              ;;
            --user|-u)
              system_dir=""
              shift
              ;;
            *)
              shift
              ;;
          esac
        done
        
        if [ "$show_files" = true ]; then
          echo "Function files:"
          echo "--------------"
          
          if [ -n "$system_dir" ] && [ -d "$system_dir" ]; then
            echo "System functions:"
            for file in "$system_dir"/*.sh; do
              if [ -f "$file" ]; then
                echo "  $(basename "$file")"
              fi
            done
          fi
          
          if [ -n "$user_dir" ] && [ -d "$user_dir" ]; then
            echo "User functions:"
            for file in "$user_dir"/*.sh; do
              if [ -f "$file" ]; then
                echo "  $(basename "$file")"
              fi
            done
          fi
          
          return 0
        fi
        
        echo "Available functions:"
        echo "-------------------"
        
        # Create temporary files for function listing
        local temp_funcs=$(mktemp)
        
        # Extract all function names and descriptions
        process_dir() {
          local dir=$1
          local src=$2
          
          if [ -d "$dir" ]; then
            for file in "$dir"/*.sh; do
              if [ -f "$file" ]; then
                # Get the base function name from the filename
                local base_func=$(basename "$file" .sh)
                
                # Get the function description
                local desc=$(grep -m 1 "^# " "$file" | sed 's/^# //')
                
                if [ "$show_details" = true ]; then
                  echo "$base_func|$desc|$src" >> "$temp_funcs"
                else
                  echo "$base_func|$src" >> "$temp_funcs"
                fi
              fi
            done
          fi
        }
        
        [ -n "$system_dir" ] && process_dir "$system_dir" "system"
        [ -n "$user_dir" ] && process_dir "$user_dir" "user"
        
        # Display functions sorted by name
        if [ "$show_details" = true ]; then
          # Display with descriptions
          echo "FUNCTION                SOURCE  DESCRIPTION"
          echo "--------------------    ------  -----------"
          sort "$temp_funcs" | while IFS="|" read -r name desc src; do
            printf "%-20s    %-6s  %s\n" "$name" "[$src]" "$desc"
          done
        else
          # Display just names and source
          echo "FUNCTION                SOURCE"
          echo "--------------------    ------"
          sort "$temp_funcs" | while IFS="|" read -r name src; do
            printf "%-20s    [%s]\n" "$name" "$src"
          done
        fi
        
        # Clean up
        rm -f "$temp_funcs"
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create create_function function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/create_function.sh"
    content: |
      #!/bin/bash
      # Creates a new user function file with name matching function name
      
      create_function() {
        if [ $# -lt 2 ]; then
          echo "Usage: create_function <function_name> <function_description> [--force] [--edit]"
          echo "Example: create_function myfunction \"My custom function to do something awesome\""
          return 1
        fi
        
        local FUNCTION_NAME="$1"
        local FUNCTION_DESC="$2"
        local FUNCTION_FILE="{{ thinkube_user_functions_dir }}/${FUNCTION_NAME}.sh"
        local FORCE=false
        local EDIT=false
        
        # Process additional args
        shift 2
        while [[ $# -gt 0 ]]; do
          case "$1" in
            --force|-f)
              FORCE=true
              shift
              ;;
            --edit|-e)
              EDIT=true
              shift
              ;;
            *)
              shift
              ;;
          esac
        done
        
        if [ -f "$FUNCTION_FILE" ] && [ "$FORCE" != true ]; then
          echo "Error: Function file already exists: $FUNCTION_FILE"
          echo "Use --force to overwrite"
          return 1
        fi
        
        # Create the function file - ensuring filename matches function name
        cat > "$FUNCTION_FILE" << EOF
      #!/bin/bash
      # $FUNCTION_DESC
      ${FUNCTION_NAME}() {
        # TODO: Implement your function here
        echo "$FUNCTION_NAME: Not yet implemented"
      }
      EOF
        
        chmod 644 "$FUNCTION_FILE"
        
        echo "Created new function file: $FUNCTION_FILE"
        echo "Edit the file to implement your function."
        echo ""
        echo "The function will be available after restarting your shell or reloading functions"
        
        # Open the file in editor if --edit is specified
        if [ "$EDIT" = true ]; then
          ${EDITOR:-nano} "$FUNCTION_FILE"
        fi
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create reload_functions function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/reload_functions.sh"
    content: |
      #!/bin/bash
      # Reloads shared functions in the current shell
      
      reload_functions() {
        local SHELL_TYPE=$(basename "$SHELL")
        
        echo "Reloading shared functions for $SHELL_TYPE shell..."
        
        case "$SHELL_TYPE" in
          bash)
            source ~/.bashrc
            echo "Bash functions reloaded!"
            ;;
          zsh)
            source ~/.zshrc
            echo "Zsh functions reloaded!"
            ;;
          fish)
            echo "To reload in Fish, you need to run: source ~/.config/fish/config.fish"
            echo "This script can't do it for you because it's running in bash"
            ;;
          *)
            echo "Unknown shell: $SHELL_TYPE"
            echo "Please manually reload your shell configuration"
            ;;
        esac
        
        echo ""
        echo "Available functions:"
        list_functions
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create show_function_docs function
  copy:
    dest: "{{ thinkube_system_functions_dir }}/show_function_docs.sh"
    content: |
      #!/bin/bash
      # Display documentation for Thinkube functions
      
      show_function_docs() {
        local func_name=""
        local system_docs="{{ thinkube_system_docs_dir }}/functions.md"
        
        if [ $# -gt 0 ]; then
          func_name="$1"
        fi
        
        if [ ! -f "$system_docs" ]; then
          echo "Error: Documentation file not found: $system_docs"
          return 1
        fi
        
        if [ -z "$func_name" ]; then
          # Display all documentation
          if command -v bat >/dev/null 2>&1; then
            bat --style=plain "$system_docs"
          elif command -v mdless >/dev/null 2>&1; then
            mdless "$system_docs"
          else
            # Fallback to simple cat with some formatting
            echo "# Thinkube Functions Documentation"
            echo ""
            cat "$system_docs"
          fi
        else
          # Display documentation for specific function
          if command -v bat >/dev/null 2>&1; then
            bat --style=plain "$system_docs" | awk -v func="## $func_name" 'BEGIN {p=0} $0~func {p=1} /^## [a-z]/ && $0!~func {p=0} p'
          elif command -v mdless >/dev/null 2>&1; then
            mdless "$system_docs" | awk -v func="## $func_name" 'BEGIN {p=0} $0~func {p=1} /^## [a-z]/ && $0!~func {p=0} p'
          else
            # Fallback to simple cat with some formatting
            awk -v func="## $func_name" 'BEGIN {p=0} $0~func {p=1} /^## [a-z]/ && $0!~func {p=0} p' "$system_docs"
          fi
        fi
      }
    mode: '0644'
  tags: [thinkube, functions]

- name: Create example user function 
  copy:
    dest: "{{ thinkube_user_functions_dir }}/hello.sh"
    content: |
      #!/bin/bash
      # Example function to say hello
      hello() {
        echo "Hello from user functions!"
      }
    mode: '0644'
    force: no  # Don't overwrite if exists
  tags: [thinkube, functions]

# SECTION: SHELL LOADERS
- name: Create Bash/Zsh functions loader
  copy:
    dest: "{{ thinkube_system_dir }}/load_functions.sh"
    content: |
      #!/bin/bash
      # Loads all function files from system and user directories
      # Each function file contains exactly one function with matching name
      
      SYSTEM_FUNCTIONS_DIR="{{ thinkube_system_functions_dir }}"
      USER_FUNCTIONS_DIR="{{ thinkube_user_functions_dir }}"
      
      # Load system functions first
      if [ -d "$SYSTEM_FUNCTIONS_DIR" ]; then
        for function_file in "$SYSTEM_FUNCTIONS_DIR"/*.sh; do
          if [ -f "$function_file" ]; then
            source "$function_file"
          fi
        done
      else
        echo "Warning: System functions directory not found: $SYSTEM_FUNCTIONS_DIR"
      fi
      
      # Then load user functions (these can override system functions)
      if [ -d "$USER_FUNCTIONS_DIR" ]; then
        for function_file in "$USER_FUNCTIONS_DIR"/*.sh; do
          if [ -f "$function_file" ]; then
            source "$function_file"
          fi
        done
      fi
    mode: '0644'
  tags: [thinkube, loaders]

- name: Create Fish functions loader
  copy:
    dest: "{{ thinkube_system_dir }}/load_functions.fish"
    content: |
      # Fish shell loader for shared bash functions
      # Loads each bash function file and creates a fish wrapper with same name
      
      # Guard against recursive loading
      if set -q __THINKUBE_FUNCTIONS_LOADED
          return 0
      end
      set -g __THINKUBE_FUNCTIONS_LOADED 1
      
      set SYSTEM_FUNCTIONS_DIR "{{ thinkube_system_functions_dir }}"
      set USER_FUNCTIONS_DIR "{{ thinkube_user_functions_dir }}"
      set ALIASES_LOADER_FILE "$SYSTEM_FUNCTIONS_DIR/load_aliases.fish"
      
      # Process system functions
      if test -d $SYSTEM_FUNCTIONS_DIR
          for function_file in $SYSTEM_FUNCTIONS_DIR/*.sh
              if test -f $function_file
                  # Skip load_aliases.sh as it's handled separately
                  if string match -q "*load_aliases.sh" "$function_file"
                      continue
                  end
                  
                  # Get the function name from the filename (without .sh)
                  set func_name (basename $function_file .sh)
                  
                  # Create a fish function that directly executes the bash function
                  eval "function $func_name
                      bash -c 'source \"$function_file\" && $func_name \"\$@\"' bash \$argv
                  end"
              end
          end
      end
      
      # Process user functions
      if test -d $USER_FUNCTIONS_DIR
          for function_file in $USER_FUNCTIONS_DIR/*.sh
              if test -f $function_file
                  # Get the function name from the filename (without .sh)
                  set func_name (basename $function_file .sh)
                  
                  # Create a fish function that directly executes the bash function
                  eval "function $func_name
                      bash -c 'source \"$function_file\" && $func_name \"\$@\"' bash \$argv
                  end"
              end
          end
      end
      
      echo "Loaded shared functions from Thinkube shared directories"
      
      # Load aliases after functions to ensure all required functions are available
      if test -f "$ALIASES_LOADER_FILE" -a -z "$__THINKUBE_ALIASES_LOADED"
          source "$ALIASES_LOADER_FILE"
      end
    mode: '0644'
  tags: [thinkube, loaders]

# SECTION: DOCUMENTATION
- name: Create function documentation
  copy:
    dest: "{{ thinkube_system_docs_dir }}/functions.md"
    content: |
      # Thinkube Shared Functions Documentation

      This document provides details on the utility functions available in the Thinkube shell environment.

      ## load_dotenv
      
      Loads environment variables from a .env file.
      
      ### Usage
      ```bash
      load_dotenv [env_file_path]
      ```
      
      ### Parameters
      - `env_file_path`: (Optional) Path to the .env file. Defaults to $HOME/.env
      
      ### Example
      ```bash
      load_dotenv                # Load default .env file
      load_dotenv ~/project/.env # Load a specific .env file
      ```

      ## mkcd
      
      Creates a directory and changes to it in one command.
      
      ### Usage
      ```bash
      mkcd <directory_name>
      ```
      
      ### Parameters
      - `directory_name`: The directory to create and change to
      
      ### Example
      ```bash
      mkcd project/new-feature
      ```

      ## gst
      
      Shortcut for `git status`.
      
      ### Usage
      ```bash
      gst [options]
      ```
      
      ### Parameters
      - Passes all options to git status
      
      ### Example
      ```bash
      gst              # Standard git status
      gst -s           # Short format git status
      ```

      ## gpl
      
      Shortcut for `git pull`.
      
      ### Usage
      ```bash
      gpl [options]
      ```
      
      ### Parameters
      - Passes all options to git pull
      
      ### Example
      ```bash
      gpl              # Pull from current branch
      gpl origin main  # Pull main from origin
      ```

      ## gdf
      
      Shortcut for `git diff`.
      
      ### Usage
      ```bash
      gdf [options]
      ```
      
      ### Parameters
      - Passes all options to git diff
      
      ### Example
      ```bash
      gdf              # Show all changes
      gdf --cached     # Show staged changes
      ```

      ## gcm
      
      Shortcut for `git commit -m`.
      
      ### Usage
      ```bash
      gcm "commit message"
      ```
      
      ### Parameters
      - Commit message in quotes
      
      ### Example
      ```bash
      gcm "Fix login bug"
      ```

      ## extract
      
      Universal archive extraction function.
      
      ### Usage
      ```bash
      extract <archive_file>
      ```
      
      ### Parameters
      - `archive_file`: The archive file to extract
      
      ### Supported formats
      - .tar.bz2, .tar.gz, .bz2, .rar, .gz, .tar, .tbz2, .tgz, .zip, .Z, .7z
      
      ### Example
      ```bash
      extract project.zip
      extract backup.tar.gz
      ```

      ## sysinfo
      
      Displays system information.
      
      ### Usage
      ```bash
      sysinfo
      ```
      
      ### Output
      - Hostname
      - Kernel version
      - Uptime
      - Memory usage
      - Disk usage
      
      ### Example
      ```bash
      sysinfo
      ```

      ## fif
      
      Find text in files (recursive grep).
      
      ### Usage
      ```bash
      fif <search_term> [directory]
      ```
      
      ### Parameters
      - `search_term`: Text to find in files
      - `directory`: (Optional) Directory to search in, defaults to current directory
      
      ### Example
      ```bash
      fif "TODO" ./src     # Find TODOs in src directory
      fif "error" .        # Find "error" in current directory
      ```

      ## list_functions
      
      Lists all available shared functions.
      
      ### Usage
      ```bash
      list_functions [options]
      ```
      
      ### Options
      - `--details`, `-d`: Show function descriptions
      - `--files`, `-f`: Show function files instead of function names
      - `--system`, `-s`: Show only system functions
      - `--user`, `-u`: Show only user functions
      
      ### Example
      ```bash
      list_functions            # List all functions
      list_functions -d         # List with descriptions
      list_functions -f -u      # List user function files
      ```

      ## create_function
      
      Creates a new user function.
      
      ### Usage
      ```bash
      create_function <function_name> <description> [options]
      ```
      
      ### Parameters
      - `function_name`: Name of the function to create
      - `description`: Short description of the function
      
      ### Options
      - `--force`, `-f`: Overwrite existing function
      - `--edit`, `-e`: Open the function in editor after creation
      
      ### Example
      ```bash
      create_function hello "Prints a greeting message"
      create_function backup "Backup important files" --edit
      ```

      ## reload_functions
      
      Reloads shell functions in the current shell.
      
      ### Usage
      ```bash
      reload_functions
      ```
      
      ### Notes
      - Works directly for Bash and Zsh
      - For Fish, will show instructions
      
      ### Example
      ```bash
      reload_functions
      ```

      ## show_function_docs
      
      Display function documentation.
      
      ### Usage
      ```bash
      show_function_docs [function_name]
      ```
      
      ### Parameters
      - `function_name`: (Optional) Specific function to show documentation for
      
      ### Example
      ```bash
      show_function_docs           # Show all documentation
      show_function_docs extract   # Show documentation for extract function
      ```
      
      ## load_aliases
      
      Loads or regenerates the shared aliases system.
      
      ### Usage
      ```bash
      load_aliases [options]
      ```
      
      ### Options
      - `--regenerate`, `-r`: Force regeneration of aliases from JSON definition
      
      ### Notes
      - Automatically runs when shell starts
      - Creates aliases in Bash/Zsh and abbreviations in Fish
      - Aliases are defined once in common_aliases.json and generated for each shell
      
      ### Example
      ```bash
      load_aliases            # Load existing aliases
      load_aliases -r         # Force regeneration and reload
      ```
      
      ## aliases
      
      List all available aliases (or abbreviations in Fish).
      
      ### Usage
      ```bash
      aliases
      ```
      
      ### Notes
      - Shows both system aliases and user-defined aliases
      - In Fish, shows abbreviations instead of aliases
      
      ### Example
      ```bash
      aliases               # List all available aliases or abbreviations
      ```
    mode: '0644'
  tags: [thinkube, docs]