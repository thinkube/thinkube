# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# 11_setup_tailscale.yaml - Configure Tailscale overlay network routing for Thinkube
#
# Purpose:
#   Configures subnet routing on control plane for MetalLB IP range via Tailscale API
#   Auto-approves routes using Tailscale API (no manual intervention)
#   Enables IP forwarding on control plane for traffic routing
#
# Key Architecture:
#   - Each node gets automatic IP from 100.x.x.x range (assigned by Tailscale)
#   - Control plane advertises MetalLB subnet (e.g., 192.168.191.50/27)
#   - Tailscale API auto-approves the subnet route
#   - Worker nodes route MetalLB traffic through control plane
#
# Requirements:
#   - Tailscale must already be installed and configured via tk-node-setup/bootstrap.sh
#   - Nodes must already be joined to the tailnet
#   - tailscale_auth_key: Auth key from inventory (for re-joining if needed)
#   - tailscale_api_token: API token for auto-approving routes
#   - metallb_ip_start_octet, metallb_ip_end_octet: MetalLB IP range
#   - zerotier_subnet_prefix: Network prefix (used for overlay CIDR)
#
# Run with:
#   ./scripts/run_ansible.sh ansible/30_networking/11_setup_tailscale.yaml

- name: Configure Tailscale Routing
  hosts: overlay_nodes
  gather_facts: true
  become: true
  serial: 1  # Process one host at a time

  vars:
    tailscale_api_url: "https://api.tailscale.com/api/v2"

  tasks:
    # Phase 1: Verify Tailscale is installed and running (fail fast if bootstrap.sh wasn't run)
    - name: Check if Tailscale is installed
      ansible.builtin.command: which tailscale
      register: tailscale_installed
      changed_when: false
      failed_when: false

    - name: Fail if Tailscale is not installed
      ansible.builtin.fail:
        msg: |
          Tailscale is not installed on {{ inventory_hostname }}.
          Please run tk-node-setup/bootstrap.sh first to install and configure Tailscale.
      when: tailscale_installed.rc != 0

    - name: Check Tailscale status
      ansible.builtin.command: tailscale status
      register: tailscale_status
      changed_when: false
      failed_when: false

    - name: Fail if not connected to tailnet
      ansible.builtin.fail:
        msg: |
          Node {{ inventory_hostname }} is not connected to Tailscale tailnet.
          Please run tk-node-setup/bootstrap.sh first.
      when: "'Logged out' in tailscale_status.stdout or tailscale_status.rc != 0"

    - name: Get Tailscale device info
      ansible.builtin.command: tailscale status --json
      register: tailscale_status_json
      changed_when: false

    - name: Parse Tailscale device information
      ansible.builtin.set_fact:
        tailscale_device_id: "{{ (tailscale_status_json.stdout | from_json).Self.ID }}"
        tailscale_ip: "{{ (tailscale_status_json.stdout | from_json).Self.TailscaleIPs[0] }}"
        tailscale_hostname: "{{ (tailscale_status_json.stdout | from_json).Self.DNSName }}"

    - name: Display Tailscale verification status
      ansible.builtin.debug:
        msg: |

          ════════════════════════════════════════════════════════════════════════
          ✅ Tailscale Verification for {{ inventory_hostname }}
          ════════════════════════════════════════════════════════════════════════

          Device ID: {{ tailscale_device_id }}
          Tailscale IP: {{ tailscale_ip }}
          Hostname: {{ tailscale_hostname }}

          Tailscale is installed and connected. Proceeding with routing configuration...
          ════════════════════════════════════════════════════════════════════════

    # Phase 2: Configure MetalLB subnet routing on control plane
    - name: Calculate MetalLB subnet CIDR
      ansible.builtin.set_fact:
        metallb_cidr: "{{ zerotier_subnet_prefix }}{{ metallb_ip_start_octet }}/27"
      when: inventory_hostname in groups['k8s_control_plane'] | default([])

    - name: Check if control plane is advertising MetalLB routes
      ansible.builtin.command: tailscale status --json
      register: current_routes_check
      changed_when: false
      when: inventory_hostname in groups['k8s_control_plane'] | default([])

    - name: Parse current advertised routes
      ansible.builtin.set_fact:
        current_advertised_routes: "{{ (current_routes_check.stdout | from_json).Self.AllowedIPs | default([]) }}"
      when: inventory_hostname in groups['k8s_control_plane'] | default([])

    - name: Update tailscale to advertise MetalLB subnet (if not already)
      ansible.builtin.command: >
        tailscale set
        --advertise-routes={{ metallb_cidr }}
        --accept-routes
      when:
        - inventory_hostname in groups['k8s_control_plane'] | default([])
        - metallb_cidr not in current_advertised_routes | default([])
      register: tailscale_update
      changed_when: true

    - name: Wait for route advertisement to register
      ansible.builtin.pause:
        seconds: 5
      when: tailscale_update is changed

    - name: Auto-approve MetalLB subnet routes via Tailscale API
      ansible.builtin.uri:
        url: "{{ tailscale_api_url }}/device/{{ tailscale_device_id }}/routes"
        method: POST
        headers:
          Authorization: "Bearer {{ tailscale_api_token }}"
          Content-Type: "application/json"
        body:
          routes:
            - "{{ metallb_cidr }}"
        body_format: json
        status_code: [200, 201]
        validate_certs: yes
      register: route_approval
      delegate_to: localhost
      when: inventory_hostname in groups['k8s_control_plane'] | default([])
      failed_when: false

    # Phase 3: Configure IP forwarding on control plane (required for subnet routing)
    - name: Enable IP forwarding
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      when: inventory_hostname in groups['k8s_control_plane'] | default([])

    # Phase 4: Display configuration status
    - name: Display Tailscale configuration (control plane)
      ansible.builtin.debug:
        msg: |

          ════════════════════════════════════════════════════════
          ✅ Tailscale Configuration Complete ({{ inventory_hostname }})
          ════════════════════════════════════════════════════════

          Tailscale IP: {{ tailscale_ip }}
          Device ID: {{ tailscale_device_id }}

          Control Plane Status:
          - Advertising subnet: {{ metallb_cidr }}
          - Route approval: {% if route_approval.status == 200 or route_approval.status == 201 %}✅ Auto-approved via API{% else %}⚠️  Check Tailscale admin console{% endif %}
          - IP forwarding: Enabled

          ════════════════════════════════════════════════════════
      when: inventory_hostname in groups['k8s_control_plane'] | default([])

    - name: Display Tailscale configuration (worker)
      ansible.builtin.debug:
        msg: |

          ════════════════════════════════════════════════════════
          ✅ Tailscale Configuration Complete ({{ inventory_hostname }})
          ════════════════════════════════════════════════════════

          Tailscale IP: {{ tailscale_ip }}
          Device ID: {{ tailscale_device_id }}

          Worker Node Status:
          - Connected to tailnet
          - Accepting routes from control plane

          ════════════════════════════════════════════════════════
      when: inventory_hostname not in groups['k8s_control_plane'] | default([])

# Final phase: Verify network-wide configuration
- name: Verify Tailscale Network Configuration
  hosts: baremetal[0]
  gather_facts: false

  vars:
    tailscale_api_url: "https://api.tailscale.com/api/v2"

  tasks:
    - name: Display Tailscale setup completion message
      ansible.builtin.debug:
        msg: |

          ════════════════════════════════════════════════════════════════════════
          ✅ Tailscale Network Configuration Complete
          ════════════════════════════════════════════════════════════════════════

          Connected Nodes: {{ groups['overlay_nodes'] | length }}

          {% for node in groups['overlay_nodes'] %}
          - {{ node }}: Connected to tailnet
          {% endfor %}

          Configuration Summary:
          - IP forwarding: Enabled on control plane
          - MetalLB subnet: Advertised and routed via control plane
          - All nodes: Accepting routes for seamless MetalLB access

          NEXT STEPS:
          1. Verify MetalLB services are accessible via Tailscale IPs
          2. Continue with Kubernetes deployment

          ════════════════════════════════════════════════════════════════════════
