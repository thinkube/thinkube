# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/30_networking/25_configure_remote_controller.yaml
# Description:
#   Configures network settings to allow a remote controller to manage
#   the Thinkube cluster through ZeroTier network
#
# Requirements:
#   - ZeroTier network must be configured (10_setup_zerotier.yaml)
#   - All nodes must have ZeroTier IPs assigned
#   - SSH keys must be set up
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/30_networking/25_configure_remote_controller.yaml
#
# Variables from inventory:
#   - zerotier_subnet_prefix: ZeroTier network prefix (e.g., 10.0.191.)
#   - zerotier_ip: ZeroTier IP for each host
#   - domain_name: Domain name for the cluster
#
# Dependencies:
#   - CORE-001: ZeroTier network setup must be complete
#
# 🤖 [AI-assisted]

- name: Configure Remote Controller Access via ZeroTier
  hosts: localhost
  gather_facts: true
  
  vars:
    ssh_key_name: "thinkube_cluster_key"
    use_zerotier_ssh: true
    
  tasks:
    # Phase 1: Verify prerequisites
    - name: Verify ZeroTier is installed and running locally
      ansible.builtin.command: zerotier-cli status
      register: zerotier_status
      failed_when: false
      changed_when: false
      
    - name: Check local ZeroTier status
      ansible.builtin.debug:
        msg: |
          ZeroTier Status:
          {% if zerotier_status.rc == 0 %}
          ✓ ZeroTier is running
          {% else %}
          ✗ ZeroTier is not running or not installed
          {% endif %}
    
    - name: Get local ZeroTier IP
      ansible.builtin.shell: |
        ip addr show | grep -o "192\.168\.191\.[0-9]\+" | head -n1
      register: local_zerotier_ip
      changed_when: false
      
    - name: Display controller ZeroTier configuration
      ansible.builtin.debug:
        msg: |
          
          ════════════════════════════════════════════════════════
          Remote Controller Configuration
          ════════════════════════════════════════════════════════
          
          Controller ZeroTier IP: {{ local_zerotier_ip.stdout }}
          Expected Controller IP: {{ hostvars['controller']['zerotier_ip'] }}
          
          This playbook will configure:
          1. SSH access via ZeroTier IPs
          2. DNS resolution for ZeroTier network
          3. Ansible inventory for ZeroTier connectivity
          
          ════════════════════════════════════════════════════════
    
    # Phase 2: Update SSH configuration for ZeroTier access
    - name: Check for existing SSH config backup
      ansible.builtin.stat:
        path: "{{ lookup('env', 'HOME') }}/.ssh/config.pre-zerotier"
      register: ssh_backup_stat
      
    - name: Backup current SSH config (if not already backed up)
      ansible.builtin.copy:
        src: "{{ lookup('env', 'HOME') }}/.ssh/config"
        dest: "{{ lookup('env', 'HOME') }}/.ssh/config.pre-zerotier"
        mode: '0600'
      when: not ssh_backup_stat.stat.exists
      
    - name: Check if SSH config has ZeroTier section
      ansible.builtin.shell: |
        if [ -f "{{ lookup('env', 'HOME') }}/.ssh/config" ]; then
          grep -q "BEGIN-THINKUBE-ZEROTIER" "{{ lookup('env', 'HOME') }}/.ssh/config" && echo "found" || echo "not found"
        else
          echo "not found"
        fi
      register: has_zerotier_section
      changed_when: false
      
    - name: Generate ZeroTier SSH config snippet
      ansible.builtin.copy:
        content: |
          # BEGIN-THINKUBE-ZEROTIER
          # Thinkube ZeroTier SSH Configuration
          # Generated by Ansible on {{ ansible_date_time.date }}
          # This section enables SSH access via ZeroTier network
          
          {% for host in groups['baremetal'] %}
          Host {{ host }}-zt
            HostName {{ hostvars[host]['zerotier_ip'] }}
            User {{ system_username }}
            IdentityFile {{ lookup('env', 'HOME') }}/.ssh/{{ ssh_key_name }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          
          {% endfor %}
          {% for host in groups['lxd_containers'] if hostvars[host]['zerotier_enabled'] | default(false) %}
          Host {{ host }}-zt
            HostName {{ hostvars[host]['zerotier_ip'] }}
            User {{ system_username }}
            IdentityFile {{ lookup('env', 'HOME') }}/.ssh/{{ ssh_key_name }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          
          {% endfor %}
          # END-THINKUBE-ZEROTIER
        dest: "{{ lookup('env', 'HOME') }}/.ssh/zerotier_snippet"
        mode: '0600'
        
    - name: Append ZeroTier section to SSH config
      ansible.builtin.shell: |
        echo "" >> "{{ lookup('env', 'HOME') }}/.ssh/config"
        cat "{{ lookup('env', 'HOME') }}/.ssh/zerotier_snippet" >> "{{ lookup('env', 'HOME') }}/.ssh/config"
        rm -f "{{ lookup('env', 'HOME') }}/.ssh/zerotier_snippet"
      when: has_zerotier_section.stdout == "not found"
      
    - name: Update existing ZeroTier section
      ansible.builtin.shell: |
        # Create new config file
        touch "{{ lookup('env', 'HOME') }}/.ssh/config.new"
        
        # Add everything before the BEGIN marker
        sed -n '1,/# BEGIN-THINKUBE-ZEROTIER/p' "{{ lookup('env', 'HOME') }}/.ssh/config" | \
        grep -v "# BEGIN-THINKUBE-ZEROTIER" > "{{ lookup('env', 'HOME') }}/.ssh/config.new"
        
        # Add the new zerotier snippet
        cat "{{ lookup('env', 'HOME') }}/.ssh/zerotier_snippet" >> "{{ lookup('env', 'HOME') }}/.ssh/config.new"
        
        # Add everything after the END marker
        sed -n '/# END-THINKUBE-ZEROTIER/,$p' "{{ lookup('env', 'HOME') }}/.ssh/config" | \
        grep -v "# END-THINKUBE-ZEROTIER" >> "{{ lookup('env', 'HOME') }}/.ssh/config.new"
        
        # Replace the original file
        mv "{{ lookup('env', 'HOME') }}/.ssh/config.new" "{{ lookup('env', 'HOME') }}/.ssh/config"
        chmod 600 "{{ lookup('env', 'HOME') }}/.ssh/config"
        rm -f "{{ lookup('env', 'HOME') }}/.ssh/zerotier_snippet"
      when: has_zerotier_section.stdout == "found"
      
    # Phase 3: Create ZeroTier-aware inventory
    - name: Create zerotier inventory directory
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/thinkube/inventory/zerotier"
        state: directory
        mode: '0755'
        
    - name: Generate ZeroTier inventory file
      ansible.builtin.copy:
        content: |
          ---
          # Dynamically generated ZeroTier inventory
          # This inventory uses ZeroTier IPs for remote controller access
          # Generated on: {{ ansible_date_time.date }}
          
          all:
            vars:
              # Copy essential vars from main inventory
              domain_name: "{{ domain_name }}"
              admin_username: "{{ admin_username }}"
              system_username: "{{ system_username }}"
              auth_realm_username: "{{ auth_realm_username }}"
              ansible_python_interpreter: "/usr/bin/python3"
              ansible_become_pass: "{{ '{{' }} lookup('env', 'ANSIBLE_BECOME_PASSWORD') {{ '}}' }}"
              home: "{{ '{{' }} lookup('env', 'HOME') {{ '}}' }}"
              network_cidr: "{{ network_cidr }}"
              network_gateway: "{{ network_gateway }}"
              zerotier_network_id: "{{ zerotier_network_id }}"
              zerotier_api_token: "{{ zerotier_api_token }}"
              zerotier_cidr: "{{ zerotier_cidr }}"
              dns_servers: {{ dns_servers | to_json }}
              dns_search_domains: {{ dns_search_domains | default([]) | to_json }}
              lxd_network_name: "{{ lxd_network_name }}"
              lxd_network_ipv4_address: "{{ lxd_network_ipv4_address }}"
              lxd_network_ipv6_address: "{{ lxd_network_ipv6_address }}"
              internal_gateway: "{{ internal_gateway }}"
              zerotier_subnet_prefix: "{{ zerotier_subnet_prefix }}"
              primary_ingress_ip_octet: "{{ primary_ingress_ip_octet }}"
              secondary_ingress_ip_octet: "{{ secondary_ingress_ip_octet }}"
              primary_ingress_ip: "{{ primary_ingress_ip }}"
              secondary_ingress_ip: "{{ secondary_ingress_ip }}"
              metallb_ip_start_octet: "{{ metallb_ip_start_octet }}"
              metallb_ip_end_octet: "{{ metallb_ip_end_octet }}"
              
              # Override connection settings for ZeroTier
              ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
              
            children:
              # Recreate the same structure but with ZeroTier IPs
              arch:
                children:
                  x86_64:
                    hosts:
          {% for host in groups['x86_64'] %}
                      {{ host }}:
          {% endfor %}
                  arm64:
                    hosts:
          {% for host in groups['arm64'] %}
                      {{ host }}:
          {% endfor %}
              
              baremetal:
                hosts:
          {% for host in groups['baremetal'] %}
                  {{ host }}:
                    ansible_host: "{{ hostvars[host]['zerotier_ip'] }}"
                    lan_ip: "{{ hostvars[host]['lan_ip'] }}"
                    zerotier_ip: "{{ hostvars[host]['zerotier_ip'] }}"
                    arch: "{{ hostvars[host]['arch'] }}"
                    zerotier_enabled: {{ hostvars[host]['zerotier_enabled'] }}
          {% if 'configure_gpu_passthrough' in hostvars[host] %}
                    configure_gpu_passthrough: {{ hostvars[host]['configure_gpu_passthrough'] }}
          {% endif %}
          {% if 'assigned_pci_slots' in hostvars[host] %}
                    assigned_pci_slots: {{ hostvars[host]['assigned_pci_slots'] | to_json }}
          {% endif %}
          {% endfor %}
              
              # Include all other groups
              lxd_cluster:
                children:
                  lxd_primary:
                    hosts:
          {% for host in groups['lxd_primary'] %}
                      {{ host }}:
          {% endfor %}
                  lxd_secondary:
                    hosts:
          {% for host in groups['lxd_secondary'] %}
                      {{ host }}:
          {% endfor %}
              
              dns_servers:
                hosts:
          {% for host in groups['dns_servers'] %}
                  {{ host }}:
          {% endfor %}
              
              microk8s:
                children:
                  microk8s_control_plane:
                    hosts:
          {% for host in groups['microk8s_control_plane'] %}
                      {{ host }}:
          {% endfor %}
                  microk8s_workers:
                    hosts:
          {% for host in groups['microk8s_workers'] %}
                      {{ host }}:
          {% endfor %}
              
              lxd_containers:
                vars:
                  lxd_image: "ubuntu:24.04"
                  ansible_python_interpreter: "{{ lookup('env', 'HOME') }}/.venv/bin/python3"
                children:
                  dns_vms:
                    hosts:
          {% for host in groups['dns_vms'] %}
                      {{ host }}:
                        ansible_host: "{{ hostvars[host]['zerotier_ip'] }}"
                        parent_host: "{{ hostvars[host]['parent_host'] }}"
                        memory: "{{ hostvars[host]['memory'] }}"
                        cpu_cores: {{ hostvars[host]['cpu_cores'] }}
                        disk_size: "{{ hostvars[host]['disk_size'] }}"
                        arch: "{{ hostvars[host]['arch'] }}"
                        lan_ip: "{{ hostvars[host]['lan_ip'] }}"
                        internal_ip: "{{ hostvars[host]['internal_ip'] }}"
                        zerotier_ip: "{{ hostvars[host]['zerotier_ip'] }}"
                        zerotier_enabled: {{ hostvars[host]['zerotier_enabled'] }}
                        gpu_passthrough: {{ hostvars[host]['gpu_passthrough'] }}
          {% endfor %}
                  microk8s_containers:
                    children:
                      controllers:
                        hosts:
                      workers:
                        hosts:
          {% for host in groups['workers'] if host in groups['lxd_containers'] %}
                          {{ host }}:
                            ansible_host: "{{ hostvars[host]['zerotier_ip'] }}"
                            parent_host: "{{ hostvars[host]['parent_host'] }}"
                            memory: "{{ hostvars[host]['memory'] }}"
                            cpu_cores: {{ hostvars[host]['cpu_cores'] }}
                            disk_size: "{{ hostvars[host]['disk_size'] }}"
                            arch: "{{ hostvars[host]['arch'] }}"
                            lan_ip: "{{ hostvars[host]['lan_ip'] }}"
                            internal_ip: "{{ hostvars[host]['internal_ip'] }}"
                            zerotier_ip: "{{ hostvars[host]['zerotier_ip'] }}"
                            zerotier_enabled: {{ hostvars[host]['zerotier_enabled'] }}
                            gpu_passthrough: {{ hostvars[host]['gpu_passthrough'] }}
          {% if 'pci_slot' in hostvars[host] %}
                            pci_slot: "{{ hostvars[host]['pci_slot'] }}"
          {% endif %}
          {% endfor %}
              
              zerotier_nodes:
                hosts:
          {% for host in groups['zerotier_nodes'] %}
                  {{ host }}:
          {% endfor %}
              
              management:
                hosts:
                  controller:
                    ansible_connection: "local"
                    ansible_host: "127.0.0.1"
                    lan_ip: "127.0.0.1"
                    zerotier_ip: "{{ hostvars['controller']['zerotier_ip'] }}"
                    zerotier_enabled: true
                    arch: "{{ hostvars['controller']['arch'] }}"
              
              # Include any other groups as needed
          {% if 'gpu_passthrough_vms' in groups %}
              gpu_passthrough_vms:
                hosts:
          {% for host in groups['gpu_passthrough_vms'] %}
                  {{ host }}:
          {% endfor %}
          {% endif %}
        dest: "{{ lookup('env', 'HOME') }}/thinkube/inventory/zerotier/hosts.yaml"
        mode: '0644'
        
    # Phase 4: Test connectivity
    - name: Test SSH connectivity to nodes via ZeroTier
      ansible.builtin.shell: |
        echo "Testing connection to {{ item }}-zt ({{ hostvars[item]['zerotier_ip'] }})..."
        ssh -o ConnectTimeout=5 {{ item }}-zt "echo 'Successfully connected to {{ item }} via ZeroTier'"
      register: ssh_test_results
      loop: "{{ groups['baremetal'] }}"
      failed_when: false
      changed_when: false
      
    - name: Display connectivity test results
      ansible.builtin.debug:
        msg: |
          
          ════════════════════════════════════════════════════════
          ZeroTier Connectivity Test Results
          ════════════════════════════════════════════════════════
          
          {% for result in ssh_test_results.results %}
          {{ result.item }}: {% if result.rc == 0 %}✓ Connected{% else %}✗ Failed{% endif %}
          {% endfor %}
          
          ════════════════════════════════════════════════════════
          
    # Phase 5: Configure DNS resolution
    - name: Check local DNS configuration
      ansible.builtin.command: resolvectl status
      register: dns_status
      changed_when: false
      failed_when: false
      
    - name: Display DNS configuration
      ansible.builtin.debug:
        msg: |
          DNS Configuration:
          - ZeroTier DNS Server: {{ hostvars[groups['dns_servers'][0]]['zerotier_ip'] }}
          - Domain: {{ domain_name }}
          
          To use ZeroTier DNS, configure your resolver to use:
          {{ hostvars[groups['dns_servers'][0]]['zerotier_ip'] }}
          
    # Phase 6: Create helper scripts
    - name: Create ZeroTier connectivity script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Helper script to run ansible with ZeroTier inventory
          # Generated on: {{ ansible_date_time.date }}
          
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          THINKUBE_DIR="$(dirname "$SCRIPT_DIR")"
          
          # Use ZeroTier inventory
          export ANSIBLE_INVENTORY="${THINKUBE_DIR}/inventory/zerotier/hosts.yaml"
          
          # Run ansible with remaining arguments
          "${SCRIPT_DIR}/run_ansible.sh" "$@"
        dest: "{{ lookup('env', 'HOME') }}/thinkube/scripts/run_ansible_zerotier.sh"
        mode: '0755'
        
    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          
          ════════════════════════════════════════════════════════
          ✅ Remote Controller Configuration Complete
          ════════════════════════════════════════════════════════
          
          Your controller is now configured for remote access via ZeroTier!
          
          WHAT WAS CONFIGURED:
          1. SSH config updated with ZeroTier aliases (*-zt)
          2. ZeroTier inventory created at inventory/zerotier/hosts.yaml
          3. Helper script created: scripts/run_ansible_zerotier.sh
          
          HOW TO USE:
          
          1. SSH to nodes via ZeroTier:
             ssh node1-zt
             ssh node2-zt
             ssh dns-zt
          
          2. Run Ansible playbooks via ZeroTier:
             ./scripts/run_ansible_zerotier.sh ansible/playbook.yaml
          
          3. Or use the inventory directly:
             ansible-playbook -i inventory/zerotier/hosts.yaml ansible/playbook.yaml
          
          IMPORTANT NOTES:
          - The original inventory remains unchanged
          - Use regular inventory when running from LAN
          - Use ZeroTier inventory when running remotely
          - DNS queries will use ZeroTier DNS server
          
          ════════════════════════════════════════════════════════

# 🤖 [AI-assisted]