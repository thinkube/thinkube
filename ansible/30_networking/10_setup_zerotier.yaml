# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# 10_setup_zerotier.yaml - Configure ZeroTier overlay network routing for Thinkube
#
# Purpose:
#   Configures routing and firewall for ZeroTier overlay network on cluster nodes
#   Adds MetalLB IP range to control plane node for service access
#
# Requirements:
#   - ZeroTier must already be installed and configured via tk-node-setup/bootstrap.sh
#   - Nodes must already be joined and authorized in ZeroTier network
#   - Environment variables for ZEROTIER_NETWORK_ID and ZEROTIER_API_TOKEN
#
# Variables:
#   - zerotier_network_id: ZeroTier network ID from inventory
#   - zerotier_api_token: ZeroTier API token from inventory
#   - zerotier_ip: Static IP address for each node (from inventory)
#   - metallb_ip_start_octet, metallb_ip_end_octet: MetalLB IP range octets
#   - zerotier_subnet_prefix: Network prefix for MetalLB IPs
#
# Run with:
#   ./scripts/run_ansible.sh ansible/30_networking/10_setup_zerotier.yaml

- name: Configure ZeroTier Routing and Firewall
  hosts: overlay_nodes
  gather_facts: true
  serial: 1  # Process one host at a time for complete setup

  vars:
    zerotier_central_url: "https://api.zerotier.com/api/v1"

  tasks:
    # Phase 1: Verify ZeroTier is installed and running (fail fast if bootstrap.sh wasn't run)
    - name: Check if ZeroTier is installed
      ansible.builtin.command: which zerotier-cli
      register: zerotier_installed
      changed_when: false
      failed_when: false

    - name: Fail if ZeroTier is not installed
      ansible.builtin.fail:
        msg: |
          ZeroTier is not installed on {{ inventory_hostname }}.
          Please run tk-node-setup/bootstrap.sh first to install and configure ZeroTier.
      when: zerotier_installed.rc != 0

    - name: Check ZeroTier service status
      ansible.builtin.command: systemctl is-active zerotier-one
      register: zerotier_service
      changed_when: false
      failed_when: false
      become: true

    - name: Fail if ZeroTier service is not running
      ansible.builtin.fail:
        msg: |
          ZeroTier service is not running on {{ inventory_hostname }}.
          Please run tk-node-setup/bootstrap.sh first.
      when: zerotier_service.rc != 0

    - name: Get ZeroTier node ID
      ansible.builtin.command: zerotier-cli info
      register: zerotier_info
      changed_when: false
      failed_when: zerotier_info.rc != 0
      check_mode: false
      become: true

    - name: Extract ZeroTier node ID
      ansible.builtin.set_fact:
        zerotier_node_id: "{{ zerotier_info.stdout.split()[2] }}"

    - name: Check if already joined to network
      ansible.builtin.command: zerotier-cli listnetworks
      register: zerotier_networks
      changed_when: false
      failed_when: false
      check_mode: false
      become: true

    - name: Fail if not joined to ZeroTier network
      ansible.builtin.fail:
        msg: |
          Node {{ inventory_hostname }} is not joined to ZeroTier network {{ zerotier_network_id }}.
          Please run tk-node-setup/bootstrap.sh first.
      when: zerotier_network_id not in zerotier_networks.stdout

    - name: Display ZeroTier verification status
      ansible.builtin.debug:
        msg: |

          ════════════════════════════════════════════════════════════════════════
          ✅ ZeroTier Verification for {{ inventory_hostname }}
          ════════════════════════════════════════════════════════════════════════

          Node ID: {{ zerotier_node_id }}
          Expected IP: {{ hostvars[inventory_hostname]['zerotier_ip'] | default('auto-assigned') }}

          ZeroTier is installed and running. Proceeding with routing configuration...
          ════════════════════════════════════════════════════════════════════════

    # Phase 2: Configure IP forwarding and firewall (required for routing)
    - name: Enable IP forwarding
      ansible.builtin.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      become: true

    - name: Configure firewall for ZeroTier routing
      block:
        - name: Allow ZeroTier traffic forwarding in firewall
          ansible.builtin.iptables:
            action: insert
            chain: FORWARD
            in_interface: zt+
            jump: ACCEPT
          become: true

        - name: Allow ZeroTier traffic outbound forwarding in firewall
          ansible.builtin.iptables:
            action: insert
            chain: FORWARD
            out_interface: zt+
            jump: ACCEPT
          become: true

        - name: Make iptables rules persistent
          ansible.builtin.shell: |
            if command -v netfilter-persistent >/dev/null 2>&1; then
              netfilter-persistent save
            elif command -v iptables-save >/dev/null 2>&1; then
              iptables-save > /etc/iptables/rules.v4
            fi
          become: true
          changed_when: true
          failed_when: false
      when: '"baremetal" in group_names'

    # Phase 3: Add MetalLB IP range to control plane node
    - name: Prepare IP assignments for node
      ansible.builtin.set_fact:
        base_ip_assignments: ["{{ hostvars[inventory_hostname]['zerotier_ip'] }}"]
        additional_ips: []

    # For the control plane node, add full MetalLB IP range
    - name: Generate MetalLB IP range for control plane
      ansible.builtin.set_fact:
        metallb_ips: "{{ metallb_ips | default([]) + [zerotier_subnet_prefix ~ item | string] }}"
      loop: "{{ range(metallb_ip_start_octet | int, metallb_ip_end_octet | int + 1) | list }}"
      when: inventory_hostname in groups['k8s_control_plane'] | default([])

    - name: Add MetalLB IPs to additional_ips
      ansible.builtin.set_fact:
        additional_ips: "{{ additional_ips + (metallb_ips | default([])) }}"
      when: inventory_hostname in groups['k8s_control_plane'] | default([])

    # Generate the full list of IP assignments
    - name: Set final IP assignments
      ansible.builtin.set_fact:
        ip_assignments: "{{ base_ip_assignments + additional_ips }}"

    # Debug the IP assignments
    - name: Show IP assignment plan
      ansible.builtin.debug:
        msg: |
          IP assignments for {{ inventory_hostname }}:
          {{ ip_assignments | to_yaml }}

    - name: Update node IP assignments for MetalLB
      ansible.builtin.uri:
        url: "{{ zerotier_central_url }}/network/{{ zerotier_network_id }}/member/{{ zerotier_node_id }}"
        method: POST
        headers:
          Authorization: "Bearer {{ zerotier_api_token }}"
          Content-Type: "application/json"
        body: |
          {
            "name": "{{ inventory_hostname }}",
            "description": "Managed by Ansible",
            "config": {
              "authorized": true,
              "activeBridge": false,
              "ipAssignments": {{ ip_assignments | to_json }},
              "noAutoAssignIps": true
            }
          }
        body_format: json
        status_code: [200, 201]
        validate_certs: yes
      register: node_update
      delegate_to: localhost
      changed_when: true
      failed_when: false
      when: additional_ips | length > 0

    # Verify that the IP assignment was successful
    - name: Verify IP assignment
      ansible.builtin.uri:
        url: "{{ zerotier_central_url }}/network/{{ zerotier_network_id }}/member/{{ zerotier_node_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ zerotier_api_token }}"
        status_code: 200
        validate_certs: yes
      register: verify_ip
      delegate_to: localhost
      changed_when: false
      failed_when: false
      when: additional_ips | length > 0

    # Debug IP verification
    - name: Debug IP verification
      ansible.builtin.debug:
        msg: |
          IP verification for {{ inventory_hostname }}:
          - Expected: {{ ip_assignments | to_yaml }}
          - Current: {{ verify_ip.json.config.ipAssignments | default([]) | to_yaml }}
      when: additional_ips | length > 0

    - name: Display node configuration result
      ansible.builtin.debug:
        msg: |

          ════════════════════════════════════════════════════════
          ✅ ZeroTier Configuration Complete for {{ inventory_hostname }}
          ════════════════════════════════════════════════════════

          Node ID: {{ zerotier_node_id }}
          Assigned IPs:
          {% for ip in ip_assignments %}
          - {{ ip }}{% if ip == hostvars[inventory_hostname]['zerotier_ip'] %} (primary){% endif %}
          {% endfor %}

          ════════════════════════════════════════════════════════

    # Phase 4: Verify connectivity
    - name: Check ZeroTier networks
      ansible.builtin.command: zerotier-cli listnetworks
      register: zerotier_networks_status
      changed_when: false
      failed_when: zerotier_networks_status.rc != 0
      become: true

    - name: Display ZeroTier network status
      ansible.builtin.debug:
        msg: |
          ZeroTier networks for {{ inventory_hostname }}:
          {{ zerotier_networks_status.stdout_lines | join('\n') }}

# Final phase: Verify network-wide configuration
- name: Verify ZeroTier Network Configuration
  hosts: baremetal[0]
  gather_facts: false

  vars:
    zerotier_central_url: "https://api.zerotier.com/api/v1"

  tasks:
    # Get current network configuration
    - name: Get current ZeroTier network configuration
      ansible.builtin.uri:
        url: "{{ zerotier_central_url }}/network/{{ zerotier_network_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ zerotier_api_token }}"
        status_code: 200
        validate_certs: yes
      register: network_config
      delegate_to: localhost

    # Get all network members
    - name: Get all ZeroTier network members
      ansible.builtin.uri:
        url: "{{ zerotier_central_url }}/network/{{ zerotier_network_id }}/member"
        method: GET
        headers:
          Authorization: "Bearer {{ zerotier_api_token }}"
        status_code: 200
        validate_certs: yes
      register: all_members
      delegate_to: localhost

    - name: Count authorized nodes
      ansible.builtin.set_fact:
        authorized_count: 0
        authorized_nodes: []

    - name: Update authorized node count
      ansible.builtin.set_fact:
        authorized_count: "{{ authorized_count | int + 1 }}"
        authorized_nodes: "{{ authorized_nodes + [item.nodeId] }}"
      when: item.config is defined and item.config.authorized is defined and item.config.authorized == true
      loop: "{{ all_members.json }}"

    # Display completion message
    - name: Display ZeroTier setup completion message
      ansible.builtin.debug:
        msg: |

          ════════════════════════════════════════════════════════════════════════
          ✅ ZeroTier Network Configuration Complete
          ════════════════════════════════════════════════════════════════════════

          Network: {{ network_config.json.config.name }} ({{ zerotier_network_id }})

          Authorized Nodes: {{ authorized_count }}/{{ groups['overlay_nodes'] | length }}

          {% for node in groups['overlay_nodes'] %}
          - {{ node }}: {{ hostvars[node]['zerotier_ip'] }}
          {% endfor %}

          Configuration Summary:
          - IP forwarding: Enabled on all nodes
          - Firewall: FORWARD rules configured for ZeroTier
          - MetalLB IPs: Added to control plane node

          ════════════════════════════════════════════════════════════════════════
