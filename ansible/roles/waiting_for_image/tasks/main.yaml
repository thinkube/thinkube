# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# roles/waiting_for_image/tasks/main.yaml
- name: Wait for Argo Workflow to complete
  when: skip_workflow_wait is not defined or not skip_workflow_wait
  shell: |
    for i in $(seq 1 30); do
      LATEST_WORKFLOW=$(microk8s kubectl -n {{ argo_namespace }} get workflows --sort-by=.metadata.creationTimestamp -o name | tail -1)
      if [ -z "$LATEST_WORKFLOW" ]; then
        echo "No workflows found"
        sleep 10
        continue
      fi
      
      STATUS=$(microk8s kubectl -n {{ argo_namespace }} get $LATEST_WORKFLOW -o jsonpath='{.status.phase}' 2>/dev/null)
      echo "Latest workflow $LATEST_WORKFLOW status: $STATUS"
      
      if [ "$STATUS" = "Succeeded" ]; then
        echo "Workflow completed successfully"
        exit 0
      elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Error" ]; then
        echo "Workflow failed with status: $STATUS"
        exit 1
      fi
      
      echo "Waiting for workflow to complete... attempt $i/30"
      sleep 20
    done
    echo "Timed out waiting for workflow"
    exit 1
  register: workflow_wait_result
  changed_when: false
  args:
    executable: /bin/bash

- name: Fail if workflow did not complete successfully
  fail:
    msg: "Argo Workflow failed or timed out. Please check the workflow status in the Argo UI."
  when: 
    - skip_workflow_wait is not defined or not skip_workflow_wait
    - workflow_wait_result.rc != 0

- name: Get workflow-generated image tag
  shell: |
    LATEST_WORKFLOW=$(microk8s kubectl -n {{ argo_namespace }} get workflows --sort-by=.metadata.creationTimestamp -o name | tail -1)
    # Use jq for more reliable parsing
    TIMESTAMP_PARAM=$(microk8s kubectl -n {{ argo_namespace }} get $LATEST_WORKFLOW -o json | jq -r '.status.nodes[].outputs.parameters[]? | select(.name=="timestamp") | .value' | head -1)
    if [ -n "$TIMESTAMP_PARAM" ]; then
      echo "$TIMESTAMP_PARAM"
    else
      echo "{{ image_tag }}"
    fi
  register: workflow_image_tag
  changed_when: false
  args:
    executable: /bin/bash

- name: Set image tag from workflow output
  set_fact:
    image_tag: "{{ workflow_image_tag.stdout }}"

- name: Display image information
  debug:
    msg: 
      - "Container image status:"
      - "-----------------------------------"
      - "Image: {{ image_repo }}:{{ image_tag }}"
      - "Proceeding with deployment"

- name: Pause to allow image propagation
  pause:
    seconds: 15
    prompt: "Waiting 15 seconds for image to propagate to registry..."

- name: Extract image path from repository URL
  set_fact:
    # Extract everything after the registry hostname
    # e.g., from "registry.thinkube.com/thinkube/control-frontend" get "thinkube/control-frontend"
    image_path: "{{ image_repo | regex_replace('^[^/]+/(.+)$', '\\1') }}"

- name: Verify image exists in Harbor registry
  ansible.builtin.uri:
    url: "https://{{ harbor_registry }}/v2/{{ image_path }}/manifests/{{ image_tag }}"
    method: HEAD
    validate_certs: false
    headers:
      Authorization: "Basic {{ (harbor_robot_user + ':' + harbor_robot_token) | b64encode }}"
      Accept: "application/vnd.oci.image.manifest.v1+json,application/vnd.docker.distribution.manifest.v2+json,application/vnd.docker.distribution.manifest.list.v2+json"
    status_code: 200
  retries: 10
  delay: 5
  register: image_check
  until: image_check.status == 200