# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/core/seaweedfs/10_deploy.yaml
# Description:
#   Deploy SeaweedFS using official Helm chart
#   Provides S3-compatible distributed storage system
#
# Requirements:
#   - Canonical k8s-snap cluster must be running
#   - Helm must be installed
#   - kubectl access configured
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/seaweedfs/10_deploy.yaml
#
# Variables from inventory:
#   - seaweedfs_namespace: SeaweedFS namespace (default: seaweedfs)
#   - domain_name: Base domain for ingress
#   - admin_username: Admin username for initial setup
#   - kubectl_bin: Path to kubectl binary
#   - kubeconfig: Path to kubeconfig file
#   - helm_bin: Path to helm binary

- name: Deploy SeaweedFS using Helm chart
  hosts: k8s_control_plane
  become: false
  gather_facts: true
  
  vars:
    # Application settings
    app_name: seaweedfs
    seaweedfs_chart_version: "4.0.0"  # Latest stable chart version
    
    # OAuth2 proxy settings for web UI
    oauth2_proxy_enabled: true
    
    # Keycloak admin credentials (needed by oauth2_proxy role)
    keycloak_admin_username: "{{ admin_username }}"
    keycloak_admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default(lookup('env', 'ANSIBLE_BECOME_PASSWORD'), true) }}"
    
    # TLS settings
    tls_secret_name: "{{ seaweedfs_namespace }}-tls-secret"

  tasks:
    - name: Ensure application namespace exists
      ansible.builtin.shell: |
        {{ kubectl_bin }} create namespace {{ seaweedfs_namespace }} 2>&1 || true
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: namespace_result
      changed_when: "'created' in namespace_result.stdout"
      failed_when: false

    - name: Get wildcard certificate from default namespace
      ansible.builtin.shell: |
        {{ kubectl_bin }} get secret {{ domain_name.replace('.', '-') }}-tls -n default -o json
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: wildcard_cert_raw
      failed_when: wildcard_cert_raw.rc != 0

    - name: Parse wildcard certificate JSON
      ansible.builtin.set_fact:
        wildcard_cert: "{{ wildcard_cert_raw.stdout | from_json }}"

    - name: Copy wildcard certificate to SeaweedFS namespace
      ansible.builtin.shell: |
        cat <<EOF | {{ kubectl_bin }} apply -f -
        apiVersion: v1
        kind: Secret
        metadata:
          name: {{ tls_secret_name }}
          namespace: {{ seaweedfs_namespace }}
        type: kubernetes.io/tls
        data:
          tls.crt: {{ wildcard_cert.data['tls.crt'] }}
          tls.key: {{ wildcard_cert.data['tls.key'] }}
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: cert_copy_result
      changed_when: "'created' in cert_copy_result.stdout or 'configured' in cert_copy_result.stdout"

    - name: Add SeaweedFS Helm repository
      ansible.builtin.command:
        cmd: "{{ helm_bin }} repo add seaweedfs https://seaweedfs.github.io/seaweedfs/helm"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: helm_repo_add
      changed_when: "'has been added' in helm_repo_add.stdout"
      failed_when: 
        - helm_repo_add.rc != 0
        - "'already exists' not in helm_repo_add.stderr"

    - name: Update Helm repositories
      ansible.builtin.command:
        cmd: "{{ helm_bin }} repo update"
      environment:
        KUBECONFIG: "{{ kubeconfig }}"

    - name: Generate S3 credentials
      ansible.builtin.set_fact:
        s3_access_key: "{{ seaweedfs_s3_access_key | default('seaweedfs') }}"
        s3_secret_key: "{{ seaweedfs_s3_secret_key | default(lookup('password', '/dev/null length=32 chars=ascii_letters,digits')) }}"

    - name: Create S3 auth configuration
      ansible.builtin.set_fact:
        s3_auth_config:
          identities:
            - name: admin
              credentials:
                - accessKey: "{{ s3_access_key }}"
                  secretKey: "{{ s3_secret_key }}"
              actions:
                - Admin
                - Read
                - Write
                - List
                - Tagging

    - name: Create S3 configuration secret
      ansible.builtin.shell: |
        cat <<EOF | {{ kubectl_bin }} apply -f -
        apiVersion: v1
        kind: Secret
        metadata:
          name: seaweedfs-s3-config
          namespace: {{ seaweedfs_namespace }}
        type: Opaque
        stringData:
          s3-config.json: |
            {{ s3_auth_config | to_nice_json | indent(8) }}
          access_key: {{ s3_access_key }}
          secret_key: {{ s3_secret_key }}
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: s3_config_result
      changed_when: "'created' in s3_config_result.stdout or 'configured' in s3_config_result.stdout"

    - name: Create Helm values for SeaweedFS
      ansible.builtin.set_fact:
        seaweedfs_values:
          master:
            enabled: true
            replicas: 1
            port: 9333
            grpcPort: 19333
            nodeSelector: {}  # Allow scheduling on any architecture (AMD64/ARM64)
            persistence:
              enabled: true
              size: 10Gi

          volume:
            enabled: true
            replicas: 1
            port: 8080
            grpcPort: 18080
            nodeSelector: {}  # Allow scheduling on any architecture (AMD64/ARM64)
            persistence:
              enabled: true
              size: 100Gi

          filer:
            enabled: true
            replicas: 1
            port: 8888
            grpcPort: 18888
            nodeSelector: {}  # Allow scheduling on any architecture (AMD64/ARM64)
            s3:
              enabled: true
              port: 8333
              domainName: "{{ seaweedfs_s3_hostname }}"
            persistence:
              enabled: true
              size: 10Gi
            config: |
              [leveldb2]
              enabled = true
              dir = "/data/filerldb2"

          s3:
            enabled: false  # S3 is integrated in filer

          ingress:
            enabled: false  # We'll create our own ingress with OAuth2

    - name: Write Helm values to temporary file
      ansible.builtin.copy:
        content: "{{ seaweedfs_values | to_nice_yaml }}"
        dest: /tmp/seaweedfs-values.yaml
        mode: '0600'

    - name: Deploy SeaweedFS using Helm
      ansible.builtin.command:
        cmd: >
          {{ helm_bin }} upgrade --install seaweedfs seaweedfs/seaweedfs
          --namespace {{ seaweedfs_namespace }}
          --version {{ seaweedfs_chart_version }}
          --values /tmp/seaweedfs-values.yaml
          --wait
          --timeout 10m
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: helm_deploy
      changed_when: true

    - name: Clean up temporary values file
      ansible.builtin.file:
        path: /tmp/seaweedfs-values.yaml
        state: absent

    - name: Wait for SeaweedFS components to be ready
      ansible.builtin.shell: |
        {{ kubectl_bin }} get pods -n {{ seaweedfs_namespace }} -l app.kubernetes.io/name=seaweedfs -o json
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: seaweedfs_pods_raw
      until: >
        (seaweedfs_pods_raw.stdout | from_json).items |
        selectattr('status.phase', 'equalto', 'Running') | list | length >= 3
      retries: 60
      delay: 10

    - name: Get current filer command
      ansible.builtin.shell: |
        {{ kubectl_bin }} get statefulset seaweedfs-filer -n {{ seaweedfs_namespace }} -o jsonpath='{.spec.template.spec.containers[0].command[2]}'
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: original_command

    - name: Debug original command
      ansible.builtin.debug:
        msg: "Original command: {{ original_command.stdout }}"

    - name: Create modified command with S3 config
      ansible.builtin.set_fact:
        modified_command: "{{ original_command.stdout | regex_replace('(-master=[^\\s]+)', '-s3.config=/etc/seaweedfs/s3-config.json \\1') }}"

    - name: Debug modified command
      ansible.builtin.debug:
        msg: "Modified command: {{ modified_command }}"

    - name: Check if s3-config volume already exists
      ansible.builtin.shell: |
        {{ kubectl_bin }} get statefulset seaweedfs-filer -n {{ seaweedfs_namespace }} -o json | jq '.spec.template.spec.volumes[] | select(.name == "s3-config")' | wc -l
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: volume_exists

    - name: Check if s3-config volumeMount already exists
      ansible.builtin.shell: |
        {{ kubectl_bin }} get statefulset seaweedfs-filer -n {{ seaweedfs_namespace }} -o json | jq '.spec.template.spec.containers[0].volumeMounts[] | select(.name == "s3-config")' | wc -l
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: mount_exists

    - name: Apply patch to add S3 config volume
      ansible.builtin.shell: |
        {{ kubectl_bin }} patch statefulset seaweedfs-filer -n {{ seaweedfs_namespace }} --type=json -p='[
          {
            "op": "add",
            "path": "/spec/template/spec/volumes/-",
            "value": {
              "name": "s3-config",
              "secret": {
                "secretName": "seaweedfs-s3-config",
                "items": [
                  {
                    "key": "s3-config.json",
                    "path": "s3-config.json"
                  }
                ]
              }
            }
          }
        ]'
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: volume_patch_result
      changed_when: "'patched' in volume_patch_result.stdout"
      when: volume_exists.stdout | int == 0

    - name: Apply patch to add volume mount
      ansible.builtin.shell: |
        {{ kubectl_bin }} patch statefulset seaweedfs-filer -n {{ seaweedfs_namespace }} --type=json -p='[
          {
            "op": "add",
            "path": "/spec/template/spec/containers/0/volumeMounts/-",
            "value": {
              "name": "s3-config",
              "mountPath": "/etc/seaweedfs",
              "readOnly": true
            }
          }
        ]'
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: mount_patch_result
      changed_when: "'patched' in mount_patch_result.stdout"
      when: mount_exists.stdout | int == 0

    - name: Apply patch to update command
      ansible.builtin.shell: |
        {{ kubectl_bin }} patch statefulset seaweedfs-filer -n {{ seaweedfs_namespace }} --type=json -p='[
          {
            "op": "replace",
            "path": "/spec/template/spec/containers/0/command/2",
            "value": "{{ modified_command }}"
          }
        ]'
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: command_patch_result
      changed_when: "'patched' in command_patch_result.stdout"

    - name: Wait for filer rollout to complete
      ansible.builtin.shell: |
        {{ kubectl_bin }} rollout status statefulset/seaweedfs-filer -n {{ seaweedfs_namespace }} --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: rollout_status
      failed_when: false

    - name: Check if patching succeeded
      ansible.builtin.fail:
        msg: "Failed to patch SeaweedFS filer. Falling back to s3.configure method."
      when: rollout_status.rc != 0

    # Deploy OAuth2 Proxy for UI access
    - name: Deploy Valkey for OAuth2 sessions
      ansible.builtin.include_role:
        name: valkey/ephemeral_valkey
      vars:
        valkey_namespace: "{{ seaweedfs_namespace }}"
        valkey_registry: "{{ harbor_registry }}/library"
        valkey_deployment_name: ephemeral-redis
        valkey_service_name: ephemeral-redis
        valkey_kubeconfig: "{{ kubeconfig }}"
      when: oauth2_proxy_enabled

    - name: Deploy OAuth2 Proxy for SeaweedFS UI
      ansible.builtin.include_role:
        name: oauth2_proxy
      vars:
        oauth2_proxy_namespace: "{{ seaweedfs_namespace }}"
        oauth2_proxy_client_id: "oauth2-proxy-{{ app_name }}"
        oauth2_proxy_dashboard_host: "{{ seaweedfs_ui_hostname }}"
        oauth2_proxy_oidc_issuer_url: "{{ keycloak_url }}/realms/{{ keycloak_realm }}"
        oauth2_proxy_cookie_domain: "{{ domain_name }}"
        oauth2_proxy_ingress_host: "{{ seaweedfs_ui_hostname }}"
        oauth2_proxy_ingress_tls_secret_name: "{{ tls_secret_name }}"
        oauth2_proxy_kubeconfig: "{{ kubeconfig }}"
        oauth2_proxy_helm_bin: "{{ helm_bin }}"
      when: oauth2_proxy_enabled

    - name: Wait for OAuth2 Proxy to be ready
      ansible.builtin.shell: |
        {{ kubectl_bin }} get pods -n {{ seaweedfs_namespace }} -l app.kubernetes.io/name=oauth2-proxy -o json
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: oauth2_pods_raw
      until: >
        (oauth2_pods_raw.stdout | from_json).items |
        selectattr('status.phase', 'equalto', 'Running') | list | length > 0
      retries: 30
      delay: 10
      when: oauth2_proxy_enabled

    - name: Create SeaweedFS UI Ingress (with OAuth2)
      ansible.builtin.shell: |
        cat <<EOF | {{ kubectl_bin }} apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: seaweedfs-ui-ingress
          namespace: {{ seaweedfs_namespace }}
          annotations:
            nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.{{ seaweedfs_namespace }}.svc.cluster.local/oauth2/auth"
            nginx.ingress.kubernetes.io/auth-signin: "https://{{ seaweedfs_ui_hostname }}/oauth2/start?rd=\$escaped_request_uri"
            nginx.ingress.kubernetes.io/auth-request-redirect: "\$scheme://\$best_http_host\$request_uri"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            nginx.ingress.kubernetes.io/proxy-body-size: "0"
            nginx.ingress.kubernetes.io/proxy-buffering: "off"
            nginx.ingress.kubernetes.io/client-body-buffer-size: "1m"
            nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
        spec:
          ingressClassName: nginx
          tls:
          - hosts:
            - {{ seaweedfs_ui_hostname }}
            secretName: {{ tls_secret_name }}
          rules:
          - host: {{ seaweedfs_ui_hostname }}
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: seaweedfs-filer
                    port:
                      number: 8888
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: ui_ingress_result
      changed_when: "'created' in ui_ingress_result.stdout or 'configured' in ui_ingress_result.stdout"
      when: oauth2_proxy_enabled

    - name: Create S3 API Ingress (without auth)
      ansible.builtin.shell: |
        cat <<EOF | {{ kubectl_bin }} apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: seaweedfs-s3-ingress
          namespace: {{ seaweedfs_namespace }}
          annotations:
            nginx.ingress.kubernetes.io/proxy-body-size: "0"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            nginx.ingress.kubernetes.io/proxy-buffering: "off"
        spec:
          ingressClassName: nginx
          tls:
          - hosts:
            - {{ seaweedfs_s3_hostname }}
            secretName: {{ tls_secret_name }}
          rules:
          - host: {{ seaweedfs_s3_hostname }}
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: seaweedfs-s3
                    port:
                      number: 8333
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: s3_ingress_result
      changed_when: "'created' in s3_ingress_result.stdout or 'configured' in s3_ingress_result.stdout"

    - name: Verify all ingresses are created
      ansible.builtin.shell: |
        {{ kubectl_bin }} get ingress -n {{ seaweedfs_namespace }} -o json
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: ingress_check_raw

    - name: Parse and verify ingress count
      ansible.builtin.set_fact:
        ingress_count: "{{ (ingress_check_raw.stdout | from_json).items | length }}"

    - name: Fail if expected ingresses not created
      ansible.builtin.fail:
        msg: "Expected ingresses not found. Found {{ ingress_count }}, expected {{ '3 (UI, S3, OAuth2)' if oauth2_proxy_enabled else '1 (S3)' }}"
      when:
        - (oauth2_proxy_enabled and ingress_count | int < 3) or (not oauth2_proxy_enabled and ingress_count | int < 1)

    - name: Display deployment summary
      ansible.builtin.debug:
        msg:
          - "SeaweedFS deployment complete"
          - "-----------------------------------"
          - "Web UI (Keycloak protected): https://{{ seaweedfs_ui_hostname }}"
          - "S3 API endpoint: https://{{ seaweedfs_s3_hostname }}"
          - "-----------------------------------"
          - "To configure S3 access, use 15_configure.yaml"