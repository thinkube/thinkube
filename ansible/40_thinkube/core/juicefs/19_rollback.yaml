# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/core/juicefs/19_rollback.yaml
# Description:
#   Rollback JuiceFS deployment by removing all resources
#   WARNING: This will remove the JuiceFS CSI driver and StorageClass
#   Any PVCs using the StorageClass will become unusable
#
# Requirements:
#   - JuiceFS must have been deployed using 10_deploy.yaml
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/juicefs/19_rollback.yaml
#
# Variables from inventory:
#   - juicefs_namespace: JuiceFS namespace
#   - kubectl_bin: Path to kubectl binary
#
# 🤖 [AI-assisted]

- name: Rollback JuiceFS distributed filesystem deployment
  hosts: microk8s_control_plane
  gather_facts: true

  vars:
    # Admin password from environment variable
    admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default(lookup('env', 'ANSIBLE_BECOME_PASSWORD'), true) }}"

    # JuiceFS configuration
    juicefs_storage_class_name: "juicefs-rwx"
    juicefs_secret_name: "juicefs-secret"

    # PostgreSQL connection
    postgres_internal_host: "postgresql-official.{{ postgres_namespace }}.svc.cluster.local"
    postgres_port: "5432"
    postgres_database: "juicefs"

    # SeaweedFS S3 configuration
    s3_bucket: "juicefs-data"

  pre_tasks:
    - name: Check for required variables
      ansible.builtin.fail:
        msg: "Required variable {{ item }} is not defined"
      when: item is not defined or item | length == 0
      loop:
        - juicefs_namespace
        - kubectl_bin

    - name: Warning about data loss
      ansible.builtin.debug:
        msg:
          - "⚠️  WARNING: This will remove JuiceFS CSI driver and StorageClass"
          - "⚠️  Any PVCs using juicefs-rwx StorageClass will become unusable"
          - "⚠️  Existing data in JuiceFS volumes will be preserved in PostgreSQL/SeaweedFS"
          - "⚠️  but will be inaccessible without the CSI driver"

  tasks:
    ###########################################################################
    # Remove StorageClass
    ###########################################################################
    - name: Check if JuiceFS StorageClass exists
      ansible.builtin.shell: |
        {{ kubectl_bin }} get storageclass {{ juicefs_storage_class_name }} --ignore-not-found
      register: storageclass_exists
      become: true
      changed_when: false
      failed_when: false

    - name: Delete JuiceFS StorageClass
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: absent
        definition:
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: "{{ juicefs_storage_class_name }}"
      when: storageclass_exists.stdout != ""
      register: delete_storageclass

    ###########################################################################
    # Uninstall JuiceFS CSI Driver (Helm)
    ###########################################################################
    - name: Check if JuiceFS CSI driver is installed
      ansible.builtin.shell: |
        /snap/bin/microk8s.helm3 list -n kube-system | grep -q juicefs-csi-driver
      register: helm_check
      become: true
      failed_when: false
      changed_when: false

    - name: Uninstall JuiceFS CSI driver via Helm
      ansible.builtin.shell: |
        /snap/bin/microk8s.helm3 uninstall juicefs-csi-driver -n kube-system
      when: helm_check.rc == 0
      register: helm_uninstall
      become: true

    - name: Wait for CSI driver pods to terminate
      ansible.builtin.shell: |
        timeout=60
        while {{ kubectl_bin }} get pods -n kube-system -l app.kubernetes.io/name=juicefs-csi-driver 2>/dev/null | grep -v "NAME" > /dev/null; do
          sleep 2
          timeout=$((timeout - 2))
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for pods to terminate"
            exit 1
          fi
        done
      when: helm_uninstall is defined and helm_uninstall.changed
      register: wait_pods
      become: true
      failed_when: false

    ###########################################################################
    # Remove S3 Gateway resources
    ###########################################################################
    - name: Delete S3 Gateway Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Service
        namespace: "{{ juicefs_namespace }}"
        name: juicefs-gateway
        state: absent

    - name: Delete S3 Gateway Deployment
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ juicefs_namespace }}"
        name: juicefs-gateway
        state: absent

    - name: Delete format Jobs
      ansible.builtin.shell: |
        {{ kubectl_bin }} delete jobs -n {{ juicefs_namespace }} -l job-name --all
      become: true
      failed_when: false

    ###########################################################################
    # Remove JuiceFS configuration secret
    ###########################################################################
    - name: Delete JuiceFS configuration secret
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: absent
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ juicefs_secret_name }}"
            namespace: "{{ juicefs_namespace }}"
      register: delete_secret

    ###########################################################################
    # Clean up S3 bucket
    ###########################################################################
    - name: Get SeaweedFS filer pod
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Pod
        namespace: "{{ seaweedfs_namespace }}"
        label_selectors:
          - app.kubernetes.io/name=seaweedfs
          - app.kubernetes.io/component=filer
      register: filer_pods

    - name: Delete contents of JuiceFS S3 bucket
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ seaweedfs_namespace }} {{ filer_pods.resources[0].metadata.name }} -- \
          sh -c 'echo "s3.bucket.delete -name={{ s3_bucket }}" | weed shell -master=seaweedfs-master:9333' || true
      register: bucket_delete
      become: true
      when: filer_pods.resources | length > 0
      failed_when: false

    ###########################################################################
    # Clean up PostgreSQL database
    ###########################################################################
    - name: Verify admin password available
      ansible.builtin.assert:
        that: admin_password != ''
        fail_msg: "ADMIN_PASSWORD environment variable must be set"

    - name: Delete JuiceFS database from PostgreSQL
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ postgres_namespace }} statefulset/postgresql-official -- \
          psql -U {{ admin_username }} -d postgres -c "DROP DATABASE IF EXISTS {{ postgres_database }}"
      environment:
        PGPASSWORD: "{{ admin_password }}"
      register: db_delete
      become: true


    ###########################################################################
    # Remove JuiceFS namespace
    ###########################################################################
    - name: Delete JuiceFS namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Namespace
        name: "{{ juicefs_namespace }}"
        state: absent
        wait: true
        wait_timeout: 120
      register: delete_namespace

    - name: Force remove namespace finalizers if stuck
      ansible.builtin.shell: |
        NS_STATUS=$({{ kubectl_bin }} get namespace {{ juicefs_namespace }} -o json 2>/dev/null | jq -r '.status.phase')
        if [ "$NS_STATUS" = "Terminating" ]; then
          echo "Namespace stuck in Terminating, removing finalizers..."
          {{ kubectl_bin }} get namespace {{ juicefs_namespace }} -o json | \
            jq '.spec.finalizers = []' | \
            {{ kubectl_bin }} replace --raw /api/v1/namespaces/{{ juicefs_namespace }}/finalize -f -
        fi
      become: true
      when: delete_namespace is failed or delete_namespace.changed == false
      failed_when: false

    ###########################################################################
    # Remove Helm repository (optional)
    ###########################################################################
    - name: Remove JuiceFS Helm repository
      ansible.builtin.shell: |
        /snap/bin/microk8s.helm3 repo remove juicefs
      register: helm_repo_remove
      become: true
      failed_when: false
      changed_when: "'has been removed' in helm_repo_remove.stdout"

    ###########################################################################
    # Display rollback summary
    ###########################################################################
    - name: Display rollback summary
      ansible.builtin.debug:
        msg:
          - "✅ JuiceFS ROLLBACK COMPLETED:"
          - "- StorageClass deletion: {{ 'Performed' if delete_storageclass is defined and delete_storageclass.changed else 'Not needed' }}"
          - "- CSI driver uninstall: {{ 'Performed' if helm_uninstall is defined and helm_uninstall.changed else 'Not needed' }}"
          - "- Configuration secret deletion: {{ 'Performed' if delete_secret is defined and delete_secret.changed else 'Not needed' }}"
          - "- S3 bucket deletion: {{ 'Performed' if bucket_delete is defined else 'Not attempted' }}"
          - "- PostgreSQL database deletion: {{ 'Performed' if db_delete is defined else 'Not attempted' }}"
          - "- JuiceFS namespace deletion: {{ 'Performed' if delete_namespace is defined and delete_namespace.changed else 'Skipped - namespace preserved' }}"
          - "- Helm repository removal: {{ 'Performed' if helm_repo_remove is defined and helm_repo_remove.changed else 'Not needed' }}"
          - ""
          - "All JuiceFS data and metadata removed."
          - "Note: JupyterHub PVCs are managed by JupyterHub deployment and must be deleted separately."
