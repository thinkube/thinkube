# Copyright 2025 Alejandro MartÃ­nez CorriÃ¡ and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/core/code-server/15_configure_environment.yaml
# Description:
#   Configure code-server environment after deployment using kubectl exec
#   This runs IN the actual container, so all changes persist
#
# Requirements:
#   - code-server must be deployed (10_deploy.yaml)
#   - Pod must be running and ready
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/code-server/15_configure_environment.yaml
#
# ðŸ¤– [AI-assisted]

- name: Configure code-server environment
  hosts: microk8s_control_plane
  gather_facts: true
  
  vars:
    code_server_namespace: "code-server"
    kubectl_bin: "microk8s.kubectl"
    kubeconfig: "/var/snap/microk8s/current/credentials/client.config"
    shared_code_path: "/home/{{ system_username }}/shared-code"
    code_source_path: "{{ shared_code_path }}"

  tasks:
    - name: Get code-server pod name
      ansible.builtin.shell: |
        {{ kubectl_bin }} get pods -n {{ code_server_namespace }} \
          -l app=code-server \
          -o jsonpath='{.items[0].metadata.name}'
      register: pod_name
      failed_when: pod_name.stdout == ""
      
    - name: Wait for pod to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Pod
        namespace: "{{ code_server_namespace }}"
        name: "{{ pod_name.stdout }}"
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300

    # NOTE: Node.js 20.x and code symlink are now installed in the Docker image
    # No need to install them here

    - name: Get Argo Workflows service account token
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: argo
        name: argo-workflows-server-sa-token
      register: argo_sa_secret
      failed_when: argo_sa_secret.resources | length == 0

    - name: Set Argo token fact
      ansible.builtin.set_fact:
        argo_service_account_token: "{{ argo_sa_secret.resources[0].data.token | b64decode }}"
      no_log: true

    ###################################################################
    # Create environment setup scripts (cross-shell compatible)
    # NOTE: Stored in ~/.thinkube_shared_shell (same location as aliases/functions from playbook 14)
    # Contains ONLY environment variables - aliases managed by playbook 14's JSON system
    ###################################################################
    - name: Create Bash/Zsh environment setup script
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c 'mkdir -p /home/thinkube/.thinkube_shared_shell && cat > /home/thinkube/.thinkube_shared_shell/env_setup.sh << "EOF"
        #!/bin/bash
        # Thinkube Environment Variables (Bash/Zsh compatible)
        # Created by 15_configure_environment.yaml
        # NOTE: Aliases are managed by the JSON system in playbook 14

        # Kubernetes
        export KUBECONFIG=/home/thinkube/.kube/config

        # Argo Workflows
        export ARGO_NAMESPACE=argo
        export ARGO_SERVER=grpc-argo.{{ domain_name }}:443
        export ARGO_SECURE=true
        export ARGO_TOKEN={{ argo_service_account_token }}

        # Ansible
        export ANSIBLE_CONFIG=/home/thinkube/.ansible.cfg

        # Python tools
        export PATH="$HOME/.local/bin:$PATH"

        # npm global packages
        export PATH="/home/thinkube/.npm-global/bin:$PATH"

        # DevPi package index
        export DEVPI_INDEX=https://{{ devpi_api_hostname }}/{{ admin_username }}/dev/+simple/
        EOF
        chmod +x /home/thinkube/.thinkube_shared_shell/env_setup.sh
        echo "âœ… Bash/Zsh environment setup created"'

    - name: Create Fish environment setup script
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c 'cat > /home/thinkube/.thinkube_shared_shell/env_setup.fish << "EOF"
        # Thinkube Environment Variables (Fish compatible)
        # Created by 15_configure_environment.yaml
        # NOTE: Aliases are managed by the JSON system in playbook 14

        # Kubernetes
        set -gx KUBECONFIG /home/thinkube/.kube/config

        # Argo Workflows
        set -gx ARGO_NAMESPACE argo
        set -gx ARGO_SERVER grpc-argo.{{ domain_name }}:443
        set -gx ARGO_SECURE true
        set -gx ARGO_TOKEN {{ argo_service_account_token }}

        # Ansible
        set -gx ANSIBLE_CONFIG /home/thinkube/.ansible.cfg

        # Python tools
        set -gx PATH $HOME/.local/bin $PATH

        # npm global packages
        set -gx PATH /home/thinkube/.npm-global/bin $PATH

        # DevPi package index
        set -gx DEVPI_INDEX https://{{ devpi_api_hostname }}/{{ admin_username }}/dev/+simple/
        EOF
        chmod +x /home/thinkube/.thinkube_shared_shell/env_setup.fish
        echo "âœ… Fish environment setup created"'

    ###################################################################
    # Append environment sourcing to existing shell configs
    # NOTE: Shell configs are created by playbook 14 (14_configure_shell.yaml)
    # We only add environment variable sourcing, not overwriting anything
    ###################################################################
    - name: Check if Bash has environment sourcing
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          grep -q "THINKUBE ENV SETUP" /home/thinkube/.bashrc
      register: bash_env_configured
      failed_when: false
      changed_when: false

    - name: Append environment sourcing to Bash config
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c 'cat >> /home/thinkube/.bashrc << "EOF"

        # BEGIN THINKUBE ENV SETUP
        # Source Thinkube environment variables
        if [ -f ~/.thinkube_shared_shell/env_setup.sh ]; then
            source ~/.thinkube_shared_shell/env_setup.sh
        fi

        # Source service environment variables from deployed services
        if [ -f ~/.config/thinkube/service-env.sh ]; then
            source ~/.config/thinkube/service-env.sh
        fi
        # END THINKUBE ENV SETUP
        EOF'
      when: bash_env_configured.rc != 0

    - name: Check if Zsh has environment sourcing
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          grep -q "THINKUBE ENV SETUP" /home/thinkube/.zshrc
      register: zsh_env_configured
      failed_when: false
      changed_when: false

    - name: Append environment sourcing to Zsh config
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c 'cat >> /home/thinkube/.zshrc << "EOF"

        # BEGIN THINKUBE ENV SETUP
        # Source Thinkube environment variables
        if [ -f ~/.thinkube_shared_shell/env_setup.sh ]; then
            source ~/.thinkube_shared_shell/env_setup.sh
        fi

        # Source service environment variables from deployed services
        if [ -f ~/.config/thinkube/service-env.sh ]; then
            source ~/.config/thinkube/service-env.sh
        fi
        # END THINKUBE ENV SETUP
        EOF'
      when: zsh_env_configured.rc != 0

    - name: Check if Fish has environment sourcing
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          grep -q "THINKUBE ENV SETUP" /home/thinkube/.config/fish/config.fish
      register: fish_env_configured
      failed_when: false
      changed_when: false

    - name: Append environment sourcing to Fish config
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c 'cat >> /home/thinkube/.config/fish/config.fish << "EOF"

        # BEGIN THINKUBE ENV SETUP
        # Source Thinkube environment variables
        if test -f ~/.thinkube_shared_shell/env_setup.fish
            source ~/.thinkube_shared_shell/env_setup.fish
        end

        # Source service environment variables from deployed services
        if test -f ~/.config/thinkube/service-env.sh
            bass source ~/.config/thinkube/service-env.sh
        end
        # END THINKUBE ENV SETUP
        EOF'
      when: fish_env_configured.rc != 0

    ###################################################################
    # Create .bash_profile and .profile to source .bashrc
    # NOTE: Bash login shells read .bash_profile, not .bashrc
    # Code-server terminals start as login shells
    ###################################################################
    - name: Create .bash_profile to source .bashrc
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c 'cat > /home/thinkube/.bash_profile << "EOF"
        # Source .bashrc for login shells
        if [ -f ~/.bashrc ]; then
            source ~/.bashrc
        fi
        EOF'

    - name: Create .profile to source .bashrc
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c 'cat > /home/thinkube/.profile << "EOF"
        # Source .bashrc for login shells
        if [ -f ~/.bashrc ]; then
            source ~/.bashrc
        fi
        EOF'

    - name: Configure npm for global installations
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "
            mkdir -p /home/thinkube/.npm-global
            npm config set prefix '/home/thinkube/.npm-global'
          "

    - name: Install Claude Code
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -l -c "npm install -g @anthropic-ai/claude-code"
          
    - name: Create claude wrapper script content
      ansible.builtin.set_fact:
        claude_wrapper_content: |
          #!/bin/bash
          # Wrapper script for Claude Code to ensure PATH is set correctly
          export PATH="/home/thinkube/.npm-global/bin:$PATH"
          exec /home/thinkube/.npm-global/bin/claude "$@"
          
    - name: Copy claude wrapper script
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c 'cat > /tmp/claude-wrapper.sh << "EOF"
          {{ claude_wrapper_content }}
          EOF'
          
    - name: Install claude wrapper script
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "sudo mv /tmp/claude-wrapper.sh /usr/local/bin/claude && sudo chmod +x /usr/local/bin/claude"

    # NOTE: Python, Ansible, and copier are now installed system-wide in the Docker image
    # No venv creation needed - tools are always available

    - name: Install Python SDKs for Thinkube services
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "pip3 install --user --no-cache-dir \
            --extra-index-url https://pypi.org/simple \
            mlflow \
            opensearch-py \
            weaviate-client \
            langfuse \
            argilla \
            requests \
            && echo 'âœ… Python SDKs installed'"

    - name: Create Ansible configuration content
      ansible.builtin.set_fact:
        ansible_cfg_content: |
          [defaults]
          host_key_checking = False
          inventory = /home/thinkube/thinkube-platform/thinkube/inventory/hosts.yaml
          remote_user = {{ system_username }}
          private_key_file = /host-ssh/thinkube_cluster_key
          interpreter_python = auto_silent
          
          [ssh_connection]
          ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
          
    - name: Copy Ansible configuration
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c 'cat > /home/thinkube/.ansible.cfg << "EOF"
          {{ ansible_cfg_content }}
          EOF'
          
    - name: Create thinkube-platform directory structure
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "mkdir -p /home/thinkube/thinkube-platform"

    - name: Fetch repository metadata from thinkube-metadata
      ansible.builtin.uri:
        url: "https://raw.githubusercontent.com/thinkube/thinkube-metadata/main/repositories.json"
        return_content: yes
      register: repo_metadata
      failed_when: repo_metadata.status != 200

    - name: Parse repository list for development cloning
      ansible.builtin.set_fact:
        repos_to_clone: "{{ (repo_metadata.content | from_json).repositories | selectattr('clone_for_development', 'equalto', true) | map(attribute='full_name') | list }}"
      failed_when: repos_to_clone | length == 0

    - name: Clone platform repositories
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "
            set -e
            echo '===== Cloning platform repositories ====='

            # Check if SSH key exists
            if [ -f /home/thinkube/.ssh/github_ed25519 ]; then
              echo 'GitHub SSH key found at /home/thinkube/.ssh/github_ed25519'
              chmod 600 /home/thinkube/.ssh/github_ed25519

              # Repository list fetched from thinkube-metadata
              REPOS=(
                {% for repo in repos_to_clone %}
                '{{ repo }}'
                {% endfor %}
              )

              echo \"Cloning {{ repos_to_clone | length }} repositories from metadata...\"

              # Clone or update each repository
              for repo in \"\${REPOS[@]}\"; do
                repo_name=\$(basename \$repo)
                if [ ! -d \"/home/thinkube/thinkube-platform/\$repo_name\" ]; then
                  echo \"Cloning \$repo...\"
                  GIT_SSH_COMMAND='ssh -i /home/thinkube/.ssh/github_ed25519 -o StrictHostKeyChecking=no' \
                    git clone \"git@github.com:\$repo.git\" \"/home/thinkube/thinkube-platform/\$repo_name\"
                else
                  echo \"\$repo_name already exists, pulling latest changes...\"
                  cd \"/home/thinkube/thinkube-platform/\$repo_name\"
                  # Reset any local changes to avoid merge conflicts
                  git reset --hard HEAD
                  # Fetch and force update to latest from origin
                  echo \"Fetching latest from origin for \$repo_name...\"
                  if GIT_SSH_COMMAND='ssh -i /home/thinkube/.ssh/github_ed25519 -o StrictHostKeyChecking=no' git fetch origin 2>&1; then
                    echo \"Resetting to origin/main for \$repo_name...\"
                    git reset --hard origin/main
                  else
                    echo \"ERROR: Failed to fetch from origin for \$repo_name\"
                    exit 1
                  fi
                fi
              done
            else
              echo 'ERROR: No SSH key found at /home/thinkube/.ssh/github_ed25519'
              echo 'Please ensure GitHub SSH key is properly configured'
              exit 1
            fi
          "
      register: clone_result

    - name: Display repository cloning output
      ansible.builtin.debug:
        var: clone_result.stdout_lines

    ###################################################################
    # Configure CLI Tools for Development
    ###################################################################

    - name: Configure kubectl (copy kubeconfig from MicroK8s)
      ansible.builtin.shell: |
        {{ kubectl_bin }} cp {{ kubeconfig }} \
          {{ code_server_namespace }}/{{ pod_name.stdout }}:/tmp/kubeconfig
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "
            mkdir -p /home/thinkube/.kube
            # Modify kubeconfig to use in-cluster API server address
            sed 's|https://127.0.0.1:16443|https://kubernetes.default.svc.cluster.local:443|g' /tmp/kubeconfig > /home/thinkube/.kube/config
            chmod 600 /home/thinkube/.kube/config
            rm /tmp/kubeconfig
            echo 'âœ… kubectl configured'
          "

    - name: Configure GitHub CLI (gh auth)
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "
            echo '{{ github_token }}' | gh auth login --with-token
            gh auth status
            echo 'âœ… GitHub CLI authenticated'
          "
      no_log: true
      when: github_token is defined and github_token | length > 0

    - name: Get ArgoCD token from .env
      ansible.builtin.shell: grep ARGOCD_DEPLOYMENT_SECRET {{ ansible_env.HOME }}/.env | cut -d= -f2 | tr -d '"'
      register: argocd_token_result
      changed_when: false
      no_log: true

    - name: Create ArgoCD config from template
      ansible.builtin.template:
        src: templates/argocd_config.j2
        dest: /tmp/argocd-config
        mode: '0600'
      vars:
        argocd_deployment_token: "{{ argocd_token_result.stdout }}"
      no_log: true

    - name: Copy ArgoCD config to code-server pod
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- mkdir -p /home/thinkube/.config/argocd
        {{ kubectl_bin }} cp /tmp/argocd-config {{ code_server_namespace }}/{{ pod_name.stdout }}:/home/thinkube/.config/argocd/config
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- chmod 600 /home/thinkube/.config/argocd/config
        rm -f /tmp/argocd-config
        echo 'âœ… ArgoCD CLI configured'
      no_log: true

    - name: Create Argo Workflows config from template
      ansible.builtin.template:
        src: templates/argo_config.j2
        dest: /tmp/argo-config
        mode: '0600'
      vars:
        argo_grpc_domain: "grpc-argo.{{ domain_name }}"
      no_log: true

    - name: Copy Argo config to code-server pod
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- mkdir -p /home/thinkube/.config/argo
        {{ kubectl_bin }} cp /tmp/argo-config {{ code_server_namespace }}/{{ pod_name.stdout }}:/home/thinkube/.config/argo/config
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- chmod 600 /home/thinkube/.config/argo/config
        rm -f /tmp/argo-config
        echo 'âœ… Argo Workflows CLI configured'
      no_log: true

    - name: Get Gitea admin token
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: gitea
        name: gitea-admin-token
      register: gitea_token_secret
      failed_when: gitea_token_secret.resources | length == 0

    - name: Configure Tea (Gitea CLI)
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "
            tea login add \
              --name {{ gitea_hostname }} \
              --url https://{{ gitea_hostname }} \
              --token '{{ gitea_token_secret.resources[0].data.token | b64decode }}' \
              --insecure
            echo 'âœ… Tea (Gitea CLI) configured'
          "
      no_log: true

    - name: Read Harbor robot token from .env
      ansible.builtin.shell: grep HARBOR_ROBOT_TOKEN {{ ansible_env.HOME }}/.env | cut -d= -f2 | tr -d '"'
      register: harbor_token_result
      changed_when: false
      no_log: true

    - name: Create Harbor auth base64 string
      ansible.builtin.shell: echo -n 'robot${{ harbor_robot_name }}:{{ harbor_token_result.stdout }}' | base64 -w0
      register: harbor_auth_result
      changed_when: false
      no_log: true

    - name: Create Docker config from template
      ansible.builtin.template:
        src: templates/docker-config.json.j2
        dest: /tmp/docker-config.json
        mode: '0600'
      vars:
        harbor_auth_b64: "{{ harbor_auth_result.stdout }}"
      no_log: true

    - name: Copy Docker config to code-server pod
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- mkdir -p /home/thinkube/.docker
        {{ kubectl_bin }} cp /tmp/docker-config.json {{ code_server_namespace }}/{{ pod_name.stdout }}:/home/thinkube/.docker/config.json
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- chmod 600 /home/thinkube/.docker/config.json
        rm -f /tmp/docker-config.json
        echo 'âœ… Harbor/Docker credentials configured'
      no_log: true

    - name: Configure git user settings
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "
            git config --global user.name '{{ github_org }}'
            git config --global user.email '{{ admin_email }}'
            echo 'âœ… Git user settings configured'
          "

    - name: Configure DevPi client
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "
            # Create pip config directory
            mkdir -p /home/thinkube/.pip

            # Create pip.conf for using DevPi
            cat > /home/thinkube/.pip/pip.conf << 'EOF'
        [global]
        index-url = https://{{ devpi_api_hostname }}/{{ admin_username }}/dev/+simple/
        trusted-host = {{ devpi_api_hostname }}
        EOF

            # Create .pypirc for devpi-client
            cat > /home/thinkube/.pypirc << 'EOF'
        [distutils]
        index-servers =
            devpi

        [devpi]
        repository: https://{{ devpi_api_hostname }}/{{ admin_username }}/dev/
        username: {{ admin_username }}
        password: {{ lookup('env', 'ADMIN_PASSWORD') | default(lookup('env', 'ANSIBLE_BECOME_PASSWORD'), true) }}
        EOF
            chmod 600 /home/thinkube/.pypirc

            echo 'âœ… DevPi client configured'
          "

    - name: Configure service environment variables from deployed services
      include_role:
        name: code_server_env_update

    - name: Create CLI tools test script from template
      ansible.builtin.template:
        src: templates/test-cli-tools.sh.j2
        dest: /tmp/test-cli-tools-{{ ansible_date_time.epoch }}.sh
        mode: '0755'
      register: test_script

    - name: Copy test script to code-server pod
      ansible.builtin.shell: |
        {{ kubectl_bin }} cp {{ test_script.dest }} \
          {{ code_server_namespace }}/{{ pod_name.stdout }}:/home/thinkube/test-cli-tools.sh \
          -c code-server
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          chmod +x /home/thinkube/test-cli-tools.sh

    - name: Clean up temporary test script
      ansible.builtin.file:
        path: "{{ test_script.dest }}"
        state: absent

    - name: Create Fish CLI tools test script from template
      ansible.builtin.template:
        src: templates/test-cli-tools.fish.j2
        dest: /tmp/test-cli-tools-{{ ansible_date_time.epoch }}.fish
        mode: '0755'
      register: test_script_fish

    - name: Copy Fish test script to code-server pod
      ansible.builtin.shell: |
        {{ kubectl_bin }} cp {{ test_script_fish.dest }} \
          {{ code_server_namespace }}/{{ pod_name.stdout }}:/home/thinkube/test-cli-tools.fish \
          -c code-server
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          chmod +x /home/thinkube/test-cli-tools.fish

    - name: Clean up temporary Fish test script
      ansible.builtin.file:
        path: "{{ test_script_fish.dest }}"
        state: absent

    - name: Create VS Code workspace settings content
      ansible.builtin.set_fact:
        vscode_workspace_settings: |
          {
            "files.exclude": {
              "**/.cache": true,
              "**/.config": true,
              "**/.local": true,
              "**/.npm": true,
              "**/.npm-global": true,
              "**/.vscode-server": true,
              "**/.ansible": true,
              "**/.venv": true,
              "**/.ansible.cfg": true,
              "**/.ssh": true,
              "**/.gitconfig": true,
              "**/.npmrc": true,
              "**/.profile": true,
              "**/.bashrc": true,
              "**/.bash_history": true,
              "**/.claude.json": true,
              "**/claude.json": true,
              "**/ansible/.ansible": true,
              "**/tmp": true,
              "**/node_modules": true,
              "**/create-gitea-repo.sh": true,
              "**/setup-gitea-workflow.sh": true,
              "**/.git": false,
              "**/.gitignore": false
            },
            "explorer.excludeGitIgnore": false,
            "search.exclude": {
              "**/.cache": true,
              "**/.config": true,
              "**/.local": true,
              "**/.npm": true,
              "**/.npm-global": true,
              "**/.vscode-server": true,
              "**/.venv": true,
              "**/node_modules": true,
              "**/tmp": true,
              "**/.bash_history": true
            }
          }
          
    - name: Create .vscode directory
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c "mkdir -p /home/thinkube/.vscode"
          
    - name: Copy VS Code workspace settings
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash -c 'cat > /home/thinkube/.vscode/settings.json << "EOF"
          {{ vscode_workspace_settings }}
          EOF'
          
    - name: Create extension installation script from template
      ansible.builtin.template:
        src: templates/install-extensions.sh.j2
        dest: /tmp/install-extensions-{{ ansible_date_time.epoch }}.sh
        mode: '0755'
      register: install_script
      
    - name: Copy installation script to pod
      ansible.builtin.shell: |
        {{ kubectl_bin }} cp {{ install_script.dest }} \
          {{ code_server_namespace }}/{{ pod_name.stdout }}:/tmp/install-extensions.sh \
          -c code-server
          
    - name: Install VS Code extensions
      ansible.builtin.shell: |
        {{ kubectl_bin }} exec -n {{ code_server_namespace }} {{ pod_name.stdout }} -- \
          bash /tmp/install-extensions.sh
      register: extension_install
      
    - name: Clean up temporary script
      ansible.builtin.file:
        path: "{{ install_script.dest }}"
        state: absent
      
    - name: Display extension installation output
      ansible.builtin.debug:
        var: extension_install.stdout_lines
      when: extension_install is defined
      
    - name: Create temporary settings file from template
      ansible.builtin.template:
        src: templates/vscode-settings.json.j2
        dest: /tmp/vscode-settings-{{ ansible_date_time.epoch }}.json
        mode: '0644'
      register: temp_settings_file

    - name: Ensure VS Code user settings directory exists on host with correct permissions
      ansible.builtin.file:
        path: "{{ code_source_path }}/.local/share/code-server/User"
        state: directory
        owner: "{{ system_username }}"
        group: "{{ system_username }}"
        mode: '0755'
      become: true

    - name: Check if existing settings file exists on host
      ansible.builtin.stat:
        path: "{{ code_source_path }}/.local/share/code-server/User/settings.json"
      register: existing_settings_file

    - name: Read existing settings if present
      ansible.builtin.slurp:
        src: "{{ code_source_path }}/.local/share/code-server/User/settings.json"
      register: existing_settings
      when: existing_settings_file.stat.exists

    - name: Parse existing settings
      ansible.builtin.set_fact:
        existing_vscode_settings: "{{ existing_settings.content | b64decode | from_json }}"
      when: existing_settings_file.stat.exists

    - name: Read template settings file
      ansible.builtin.slurp:
        src: "{{ temp_settings_file.dest }}"
      register: template_settings_content

    - name: Parse template settings
      ansible.builtin.set_fact:
        template_vscode_settings: "{{ template_settings_content.content | b64decode | from_json }}"

    - name: Merge template with existing settings (preserving custom configs like apiToken)
      ansible.builtin.set_fact:
        merged_vscode_settings: "{{ existing_vscode_settings | default({}) | combine(template_vscode_settings, recursive=True) }}"

    - name: Write merged settings to temporary file
      ansible.builtin.copy:
        content: "{{ merged_vscode_settings | to_nice_json(indent=4) }}"
        dest: /tmp/vscode-settings-merged-{{ ansible_date_time.epoch }}.json
        mode: '0644'
      register: merged_settings_file

    - name: Copy merged settings file to pod
      ansible.builtin.shell: |
        {{ kubectl_bin }} cp {{ merged_settings_file.dest }} \
          {{ code_server_namespace }}/{{ pod_name.stdout }}:/home/thinkube/.local/share/code-server/User/settings.json \
          -c code-server
      register: extension_config

    - name: Clean up temporary template file
      ansible.builtin.file:
        path: "{{ temp_settings_file.dest }}"
        state: absent

    - name: Clean up temporary merged file
      ansible.builtin.file:
        path: "{{ merged_settings_file.dest }}"
        state: absent
      
    - name: Display extension configuration output
      ansible.builtin.debug:
        var: extension_config.stdout_lines
      when: extension_config is defined

    - name: Display setup summary
      ansible.builtin.debug:
        msg:
          - "âœ… Code-server environment configured successfully"
          - "âœ… Cross-shell environment (Bash, Zsh, Fish) configured"
          - "âœ… Node.js and npm installed"
          - "âœ… Claude Code installed and available"
          - "âœ… Python and Ansible installed"
          - "âœ… Repository cloned (if SSH key available)"
          - "âœ… VS Code extensions installed (if repositories available)"
          - "âœ… VS Code workspace configured with clean file explorer"
          - "âœ… Nerd Fonts injected (Fira Code, JetBrains Mono)"
          - ""
          - "The 'claude' command should now work in any new terminal session"
          - ""
          - "Extensions installed:"
          - "  - thinkube-ai-integration (via symlink from platform repo)"
          - "  - thinkube-cicd-monitor (via symlink from platform repo)"
          - "  - Hooks are configured for Ansible playbook review"
          - ""
          - "Test CLI tools:"
          - "  - Bash: ./test-cli-tools.sh"
          - "  - Fish: fish test-cli-tools.fish"
          - ""
          - "ðŸ’¡ Reload browser to see Nerd Font icons in terminal"