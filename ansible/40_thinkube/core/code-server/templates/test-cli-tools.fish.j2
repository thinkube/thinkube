#!/usr/bin/env fish
# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

# Test script for all CLI tools configured in code-server (Fish shell version)
# Usage: fish /home/thinkube/test-cli-tools.fish

# Source environment configuration
test -f ~/.thinkube_shared_shell/env_setup.fish; and source ~/.thinkube_shared_shell/env_setup.fish
test -f ~/.config/thinkube/service-env.fish; and source ~/.config/thinkube/service-env.fish

# Colors for output
set RED '\033[0;31m'
set GREEN '\033[0;32m'
set YELLOW '\033[1;33m'
set NC '\033[0m' # No Color

# Track results
set FAILED_TESTS 0
set PASSED_TESTS 0

echo "======================================================================"
echo "  Thinkube CLI Tools Configuration Test (Fish Shell)"
echo "======================================================================"
echo ""

# Helper function to test a CLI tool
function test_cli
    set -l name $argv[1]
    set -l test_command $argv[2]
    set -l is_optional false
    if test (count $argv) -ge 3
        set is_optional $argv[3]
    end

    echo -n "Testing $name... "

    if eval $test_command >/dev/null 2>&1
        echo -e "$GREEN✅ PASS$NC"
        set PASSED_TESTS (math $PASSED_TESTS + 1)
    else
        if test "$is_optional" = "true"
            echo -e "$YELLOW⊘ SKIP (optional service not installed)$NC"
        else
            echo -e "$RED❌ FAIL$NC"
            set FAILED_TESTS (math $FAILED_TESTS + 1)
        end
    end
end

echo "=== Core CLI Tools ==="
echo ""

# Test kubectl
test_cli "kubectl" "kubectl cluster-info"

# Test GitHub CLI
test_cli "GitHub CLI (gh)" "gh auth status"

# Test ArgoCD CLI
test_cli "ArgoCD CLI" "argocd version"

# Test Argo Workflows CLI
# Note: argo version may show token warning but still works
test_cli "Argo Workflows CLI" "command -v argo >/dev/null 2>&1"

# Test Tea (Gitea CLI)
test_cli "Tea (Gitea CLI)" "tea login list"

# Test Docker/Harbor
test_cli "Docker (Harbor registry)" "grep '{{ harbor_registry }}' ~/.docker/config.json"

# Test git configuration
echo -n "Testing git config... "
if git config --get user.name >/dev/null 2>&1; and git config --get user.email >/dev/null 2>&1
    echo -e "$GREEN✅ PASS$NC (user: "(git config --get user.name)")"
    set PASSED_TESTS (math $PASSED_TESTS + 1)
else
    echo -e "$RED❌ FAIL$NC"
    set FAILED_TESTS (math $FAILED_TESTS + 1)
end

# Test DevPi (core Python package index)
test_cli "DevPi client" "devpi use https://{{ devpi_api_hostname }}; and devpi list"

echo ""
echo "=== Optional CLI Tools ==="
echo ""

# Test Argilla (verify connection to API)
test_cli "Argilla client" "python3 -c 'import argilla; argilla.init()' 2>/dev/null" "true"

# Test CVAT (verify credentials work with API call)
test_cli "CVAT CLI" "command -v cvat-cli >/dev/null 2>&1 && cvat-cli --auth ~/.cvat/config.yaml ls 2>/dev/null" "true"

# Test MLflow
echo -n "Testing MLflow config... "
if test -n "$MLFLOW_TRACKING_URI"
    # Get MLflow authentication token
    if test -f ~/mlflow-auth.fish
        source ~/mlflow-auth.fish >/dev/null 2>&1
    end

    # Try to connect to MLflow tracking server using Python SDK
    if test -n "$MLFLOW_TRACKING_TOKEN"; and python3 -c "import mlflow; mlflow.set_tracking_uri('$MLFLOW_TRACKING_URI'); mlflow.search_experiments()" 2>/dev/null
        echo -e "$GREEN✅ PASS$NC (URI: $MLFLOW_TRACKING_URI)"
        set PASSED_TESTS (math $PASSED_TESTS + 1)
    else
        echo -e "$RED❌ FAIL$NC (Cannot connect to $MLFLOW_TRACKING_URI - run 'source ~/mlflow-auth.fish' first)"
        set FAILED_TESTS (math $FAILED_TESTS + 1)
    end
else
    echo -e "$YELLOW⊘ SKIP (optional service not installed)$NC"
end

# Test Grafana (verify credentials work with API call)
test_cli "Grafana API" "test -f ~/.grafana/credentials; and python3 -c 'import requests, os; creds=open(os.path.expanduser(\"~/.grafana/credentials\")).read().strip().split(\":\"); requests.get(\"https://grafana.{{ domain_name }}/api/health\", auth=(creds[0], creds[1]), verify=False).raise_for_status()' 2>/dev/null" "true"

# Test OpenSearch (verify connection with credentials)
test_cli "OpenSearch client" "python3 -c 'from opensearchpy import OpenSearch; import yaml; config=yaml.safe_load(open(\"$HOME/.opensearch/config.yaml\")); client=OpenSearch([{\"host\": config[\"host\"], \"port\": config[\"port\"]}], http_auth=(config[\"username\"], config[\"password\"]), use_ssl=True, verify_certs=False); client.info()' 2>/dev/null" "true"

# Test Weaviate (verify connection with API key)
test_cli "Weaviate client" "python3 -c 'import weaviate, json; config=json.load(open(\"$HOME/.weaviate/config.json\")); client=weaviate.connect_to_weaviate_cloud(cluster_url=config[\"url\"], auth_credentials=weaviate.auth.AuthApiKey(config[\"api_key\"]), skip_init_checks=True); client.is_ready(); client.close()' 2>/dev/null" "true"

# Test ClickHouse (verify credentials work with actual query)
test_cli "ClickHouse client" "python3 -c 'import clickhouse_connect; import os; client=clickhouse_connect.get_client(host=os.environ[\"CLICKHOUSE_HOST\"], port=int(os.environ[\"CLICKHOUSE_HTTP_PORT\"]), username=os.environ[\"CLICKHOUSE_USER\"], password=os.environ[\"CLICKHOUSE_PASSWORD\"]); result=client.query(\"SELECT 1\"); print(result.result_rows[0][0])' 2>/dev/null | grep -q '^1\$'" "true"

# Test LiteLLM
echo -n "Testing LiteLLM config... "
if test -n "$LITELLM_ENDPOINT"
    # Try to connect to LiteLLM API
    if curl -s -f -k "$LITELLM_ENDPOINT/health" >/dev/null 2>&1
        echo -e "$GREEN✅ PASS$NC (Endpoint: $LITELLM_ENDPOINT)"
        set PASSED_TESTS (math $PASSED_TESTS + 1)
    else
        echo -e "$RED❌ FAIL$NC (Cannot connect to $LITELLM_ENDPOINT)"
        set FAILED_TESTS (math $FAILED_TESTS + 1)
    end
else if grep -q "LITELLM_ENDPOINT" ~/.config/thinkube/service-env.sh 2>/dev/null
    echo -e "$YELLOW⊘ SKIP (configured but not sourced in current shell)$NC"
else
    echo -e "$YELLOW⊘ SKIP (optional service not installed)$NC"
end

# Test Langfuse (verify API keys work)
test_cli "Langfuse SDK" "python3 -c 'from langfuse import Langfuse; import configparser; config=configparser.ConfigParser(); config.read(\"$HOME/.langfuse/credentials\"); langfuse=Langfuse(public_key=config[\"langfuse\"][\"public_key\"], secret_key=config[\"langfuse\"][\"secret_key\"], host=config[\"langfuse\"][\"host\"]); langfuse.auth_check()' 2>/dev/null" "true"

echo ""
echo "======================================================================"
echo "  Test Results"
echo "======================================================================"
echo -e "Passed: $GREEN$PASSED_TESTS$NC"
echo -e "Failed: $RED$FAILED_TESTS$NC"
echo ""

if test $FAILED_TESTS -eq 0
    echo -e "$GREEN✅ All configured CLI tools are working correctly!$NC"
    exit 0
else
    echo -e "$RED❌ Some CLI tools failed configuration tests.$NC"
    echo ""
    echo "Troubleshooting:"
    echo "1. Re-run: ./scripts/run_ansible.sh ansible/40_thinkube/core/code-server/15_configure_environment.yaml"
    echo "2. Check logs for specific failures"
    echo "3. Verify all required services are deployed"
    exit 1
end
