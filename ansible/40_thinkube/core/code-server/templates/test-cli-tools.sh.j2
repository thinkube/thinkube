#!/bin/bash
# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

# Test script for all CLI tools configured in code-server
# Usage: /home/thinkube/test-cli-tools.sh

set +e  # Don't exit on first error

# Source environment configuration
[ -f ~/.thinkube_shared_shell/env_setup.sh ] && source ~/.thinkube_shared_shell/env_setup.sh
[ -f ~/.config/thinkube/service-env.sh ] && source ~/.config/thinkube/service-env.sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track results
FAILED_TESTS=0
PASSED_TESTS=0

echo "======================================================================"
echo "  Thinkube CLI Tools Configuration Test"
echo "======================================================================"
echo ""

# Helper function to test a CLI tool
test_cli() {
    local name="$1"
    local test_command="$2"
    local is_optional="${3:-false}"

    echo -n "Testing ${name}... "

    if eval "$test_command" &>/dev/null; then
        echo -e "${GREEN}✅ PASS${NC}"
        ((PASSED_TESTS++))
    else
        if [ "$is_optional" = "true" ]; then
            echo -e "${YELLOW}⊘ SKIP (optional service not installed)${NC}"
        else
            echo -e "${RED}❌ FAIL${NC}"
            ((FAILED_TESTS++))
        fi
    fi
}

echo "=== Core CLI Tools ==="
echo ""

# Test kubectl
test_cli "kubectl" "kubectl cluster-info"

# Test GitHub CLI
test_cli "GitHub CLI (gh)" "gh auth status"

# Test ArgoCD CLI
test_cli "ArgoCD CLI" "argocd version"

# Test Argo Workflows CLI
test_cli "Argo Workflows CLI" "argo version"

# Test Tea (Gitea CLI)
test_cli "Tea (Gitea CLI)" "tea login list"

# Test Harbor registry configuration (used with podman)
test_cli "Harbor registry config" "grep '{{ harbor_registry }}' ~/.docker/config.json"

# Test git configuration
echo -n "Testing git config... "
if git config --get user.name &>/dev/null && git config --get user.email &>/dev/null; then
    echo -e "${GREEN}✅ PASS${NC} (user: $(git config --get user.name))"
    ((PASSED_TESTS++))
else
    echo -e "${RED}❌ FAIL${NC}"
    ((FAILED_TESTS++))
fi

# Test DevPi (core Python package index - verify CLI works with authentication)
echo -n "Testing DevPi CLI... "
if [ -n "$DEVPI_URL" ] && [ -n "$DEVPI_USERNAME" ] && [ -n "$DEVPI_PASSWORD" ]; then
    # Use temporary clientdir to avoid conflicts with server URL rewriting
    DEVPI_TEST_DIR=$(mktemp -d)
    # Configure devpi to use the API endpoint (no OAuth2)
    if devpi use "$DEVPI_URL" --clientdir="$DEVPI_TEST_DIR" 2>/dev/null && \
       devpi login "$DEVPI_USERNAME" --password="$DEVPI_PASSWORD" --clientdir="$DEVPI_TEST_DIR" 2>/dev/null && \
       devpi use "$DEVPI_INDEX" --clientdir="$DEVPI_TEST_DIR" 2>/dev/null && \
       devpi list --clientdir="$DEVPI_TEST_DIR" 2>/dev/null | grep -q "pypi"; then
        echo -e "${GREEN}✅ PASS${NC}"
        ((PASSED_TESTS++))
    else
        echo -e "${RED}❌ FAIL${NC} (CLI authentication or index access failed)"
        ((FAILED_TESTS++))
    fi
    rm -rf "$DEVPI_TEST_DIR"
else
    echo -e "${RED}❌ FAIL${NC} (Environment variables not set)"
    ((FAILED_TESTS++))
fi

echo ""
echo "=== Optional CLI Tools ==="
echo ""

# Test Argilla (verify connection to API)
test_cli "Argilla client" "python3 -c 'import argilla; argilla.init()' 2>/dev/null" "true"

# Test CVAT (verify credentials work with API call)
test_cli "CVAT CLI" "cvat-cli --auth ~/.cvat/config.yaml ls 2>/dev/null" "true"

# Test MLflow
echo -n "Testing MLflow config... "
if [ -n "$MLFLOW_TRACKING_URI" ]; then
    echo "" # New line for output

    # Get MLflow authentication token
    if [ -f ~/mlflow-auth.sh ]; then
        source ~/mlflow-auth.sh > /dev/null 2>&1
    fi

    # Try to connect to MLflow tracking server using Python SDK
    if [ -n "$MLFLOW_TRACKING_TOKEN" ]; then
        export MLFLOW_TRACKING_TOKEN

        # First, do a quick API check to see if user is initialized
        # Using a short timeout to fail fast if user doesn't exist
        QUICK_CHECK=$(timeout 3 python3 -c "import mlflow; mlflow.set_tracking_uri('$MLFLOW_TRACKING_URI'); mlflow.search_experiments()" 2>&1)
        QUICK_EXIT=$?

        if [ $QUICK_EXIT -eq 0 ]; then
            echo -e "${GREEN}✅ PASS${NC} (URI: $MLFLOW_TRACKING_URI)"
            ((PASSED_TESTS++))
        elif [ $QUICK_EXIT -eq 124 ]; then
            # Timeout means the request is hanging - likely user not initialized
            echo -e "${YELLOW}⚠ SETUP REQUIRED${NC}"
            echo ""
            echo "MLflow requires first-time user initialization via web browser."
            echo ""
            echo "Please follow these steps:"
            echo "  1. Open this URL in your browser: ${MLFLOW_TRACKING_URI}"
            echo "  2. Log in with your Keycloak credentials"
            echo "  3. Once you see the MLflow dashboard, your user is initialized"
            echo ""
            read -p "Press ENTER after completing the browser login: "

            # Retry the connection with normal timeout
            MLFLOW_OUTPUT=$(timeout 10 python3 -c "import mlflow; mlflow.set_tracking_uri('$MLFLOW_TRACKING_URI'); mlflow.search_experiments()" 2>&1)
            MLFLOW_EXIT=$?
            if [ $MLFLOW_EXIT -eq 0 ]; then
                echo -e "${GREEN}✅ PASS${NC} (URI: $MLFLOW_TRACKING_URI)"
                ((PASSED_TESTS++))
            else
                echo -e "${RED}❌ FAIL${NC} (Still cannot connect after initialization)"
                echo "Please verify you successfully logged in via the browser"
                ((FAILED_TESTS++))
            fi
        else
            # Other error
            echo -e "${RED}❌ FAIL${NC} (Cannot connect to $MLFLOW_TRACKING_URI)"
            if [ -n "$QUICK_CHECK" ]; then
                echo "Error: $QUICK_CHECK"
            fi
            ((FAILED_TESTS++))
        fi
    else
        echo -e "${RED}❌ FAIL${NC} (Token not set - run 'source ~/mlflow-auth.sh' first)"
        ((FAILED_TESTS++))
    fi
else
    echo -e "${YELLOW}⊘ SKIP (optional service not installed)${NC}"
fi

# Test Grafana (verify credentials work with API call)
test_cli "Grafana API" "[ -f ~/.grafana/credentials ] && python3 -c 'import requests, os; creds=open(os.path.expanduser(\"~/.grafana/credentials\")).read().strip().split(\":\"); requests.get(\"https://grafana.{{ domain_name }}/api/health\", auth=(creds[0], creds[1]), verify=False).raise_for_status()'" "true"

# Test OpenSearch (verify connection with credentials)
test_cli "OpenSearch client" "python3 -c 'from opensearchpy import OpenSearch; import yaml; config=yaml.safe_load(open(\"$HOME/.opensearch/config.yaml\")); client=OpenSearch([{\"host\": config[\"host\"], \"port\": config[\"port\"]}], http_auth=(config[\"username\"], config[\"password\"]), use_ssl=True, verify_certs=False); client.info()'" "true"

# Test Weaviate (verify connection with API key)
test_cli "Weaviate client" "python3 -c 'import weaviate, json; config=json.load(open(\"$HOME/.weaviate/config.json\")); client=weaviate.connect_to_weaviate_cloud(cluster_url=config[\"url\"], auth_credentials=weaviate.auth.AuthApiKey(config[\"api_key\"]), skip_init_checks=True); client.is_ready(); client.close()'" "true"

# Test ClickHouse (verify credentials work with actual query)
test_cli "ClickHouse client" "python3 -c 'import clickhouse_connect; import os; client=clickhouse_connect.get_client(host=os.environ[\"CLICKHOUSE_HOST\"], port=int(os.environ[\"CLICKHOUSE_HTTP_PORT\"]), username=os.environ[\"CLICKHOUSE_USER\"], password=os.environ[\"CLICKHOUSE_PASSWORD\"]); result=client.query(\"SELECT 1\"); print(result.result_rows[0][0])' | grep -q '^1$'" "true"

# Test LiteLLM
echo -n "Testing LiteLLM config... "
if [ -n "$LITELLM_ENDPOINT" ]; then
    # Test authenticated access to LiteLLM API
    if [ -n "$LITELLM_MASTER_KEY" ]; then
        if curl -s -f -k --max-time 5 -H "Authorization: Bearer $LITELLM_MASTER_KEY" "$LITELLM_ENDPOINT/health" > /dev/null 2>&1; then
            echo -e "${GREEN}✅ PASS${NC} (Endpoint: $LITELLM_ENDPOINT)"
            ((PASSED_TESTS++))
        else
            echo -e "${RED}❌ FAIL${NC} (Cannot connect to $LITELLM_ENDPOINT with authentication)"
            ((FAILED_TESTS++))
        fi
    else
        echo -e "${RED}❌ FAIL${NC} (LITELLM_MASTER_KEY not set)"
        ((FAILED_TESTS++))
    fi
elif grep -q "LITELLM_ENDPOINT" ~/.bashrc 2>/dev/null; then
    echo -e "${YELLOW}⊘ SKIP (configured but not sourced in current shell)${NC}"
else
    echo -e "${YELLOW}⊘ SKIP (optional service not installed)${NC}"
fi

# Test Langfuse (verify API keys work)
test_cli "Langfuse SDK" "python3 -c 'from langfuse import Langfuse; import configparser; config=configparser.ConfigParser(); config.read(\"$HOME/.langfuse/credentials\"); langfuse=Langfuse(public_key=config[\"langfuse\"][\"public_key\"], secret_key=config[\"langfuse\"][\"secret_key\"], host=config[\"langfuse\"][\"host\"]); langfuse.auth_check()'" "true"

echo ""
echo "======================================================================"
echo "  Test Results"
echo "======================================================================"
echo -e "Passed: ${GREEN}${PASSED_TESTS}${NC}"
echo -e "Failed: ${RED}${FAILED_TESTS}${NC}"
echo ""

if [ $FAILED_TESTS -eq 0 ]; then
    echo -e "${GREEN}✅ All configured CLI tools are working correctly!${NC}"
    exit 0
else
    echo -e "${RED}❌ Some CLI tools failed configuration tests.${NC}"
    echo ""
    echo "Troubleshooting:"
    echo "1. Re-run: ./scripts/run_ansible.sh ansible/40_thinkube/core/code-server/15_configure_environment.yaml"
    echo "2. Check logs for specific failures"
    echo "3. Verify all required services are deployed"
    exit 1
fi
