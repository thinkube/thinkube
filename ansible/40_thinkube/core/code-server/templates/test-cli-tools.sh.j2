#!/bin/bash
# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

# Test script for all CLI tools configured in code-server
# Usage: /home/thinkube/test-cli-tools.sh

set +e  # Don't exit on first error

# Source environment configuration
[ -f ~/.thinkube_shared_shell/env_setup.sh ] && source ~/.thinkube_shared_shell/env_setup.sh
[ -f ~/.config/thinkube/service-env.sh ] && source ~/.config/thinkube/service-env.sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track results
FAILED_TESTS=0
PASSED_TESTS=0

echo "======================================================================"
echo "  Thinkube CLI Tools Configuration Test"
echo "======================================================================"
echo ""

# Helper function to test a CLI tool
test_cli() {
    local name="$1"
    local test_command="$2"
    local is_optional="${3:-false}"

    echo -n "Testing ${name}... "

    if eval "$test_command" &>/dev/null; then
        echo -e "${GREEN}✅ PASS${NC}"
        ((PASSED_TESTS++))
    else
        if [ "$is_optional" = "true" ]; then
            echo -e "${YELLOW}⊘ SKIP (optional service not installed)${NC}"
        else
            echo -e "${RED}❌ FAIL${NC}"
            ((FAILED_TESTS++))
        fi
    fi
}

echo "=== Core CLI Tools ==="
echo ""

# Test kubectl
test_cli "kubectl" "kubectl cluster-info"

# Test GitHub CLI
test_cli "GitHub CLI (gh)" "gh auth status"

# Test ArgoCD CLI
test_cli "ArgoCD CLI" "argocd version"

# Test Argo Workflows CLI
test_cli "Argo Workflows CLI" "argo version"

# Test Tea (Gitea CLI)
test_cli "Tea (Gitea CLI)" "tea login list"

# Test Docker/Harbor
test_cli "Docker (Harbor registry)" "grep '{{ harbor_registry }}' ~/.docker/config.json"

# Test git configuration
echo -n "Testing git config... "
if git config --get user.name &>/dev/null && git config --get user.email &>/dev/null; then
    echo -e "${GREEN}✅ PASS${NC} (user: $(git config --get user.name))"
    ((PASSED_TESTS++))
else
    echo -e "${RED}❌ FAIL${NC}"
    ((FAILED_TESTS++))
fi

echo ""
echo "=== Optional CLI Tools ==="
echo ""

# Test Argilla (verify connection to API)
test_cli "Argilla client" "python3 -c 'import argilla; argilla.init()' 2>/dev/null" "true"

# Test CVAT (verify credentials work with API call)
test_cli "CVAT CLI" "cvat-cli --auth ~/.cvat/config.yaml ls 2>/dev/null" "true"

# Test MLflow
echo -n "Testing MLflow config... "
if [ -n "$MLFLOW_TRACKING_URI" ]; then
    # Try to connect to MLflow tracking server
    if python3 -c "import mlflow; mlflow.set_tracking_uri('$MLFLOW_TRACKING_URI'); mlflow.search_experiments()" 2>/dev/null; then
        echo -e "${GREEN}✅ PASS${NC} (URI: $MLFLOW_TRACKING_URI)"
        ((PASSED_TESTS++))
    else
        echo -e "${RED}❌ FAIL${NC} (Cannot connect to $MLFLOW_TRACKING_URI)"
        ((FAILED_TESTS++))
    fi
elif grep -q "MLFLOW_TRACKING_URI" ~/.bashrc 2>/dev/null; then
    echo -e "${YELLOW}⊘ SKIP (configured but not sourced in current shell)${NC}"
else
    echo -e "${YELLOW}⊘ SKIP (optional service not installed)${NC}"
fi

# Test Grafana (verify credentials work with API call)
test_cli "Grafana API" "[ -f ~/.grafana/credentials ] && python3 -c 'import requests, os; creds=open(os.path.expanduser(\"~/.grafana/credentials\")).read().strip().split(\":\"); requests.get(\"https://grafana.{{ domain_name }}/api/health\", auth=(creds[0], creds[1]), verify=False).raise_for_status()' 2>/dev/null" "true"

# Test OpenSearch (verify connection with credentials)
test_cli "OpenSearch client" "python3 -c 'from opensearchpy import OpenSearch; import yaml; config=yaml.safe_load(open(\"$HOME/.opensearch/config.yaml\")); client=OpenSearch([{\"host\": config[\"host\"], \"port\": config[\"port\"]}], http_auth=(config[\"username\"], config[\"password\"]), use_ssl=True, verify_certs=False); client.info()' 2>/dev/null" "true"

# Test Weaviate (verify connection with API key)
test_cli "Weaviate client" "python3 -c 'import weaviate, json; config=json.load(open(\"$HOME/.weaviate/config.json\")); client=weaviate.Client(url=config[\"url\"], auth_client_secret=weaviate.AuthApiKey(api_key=config[\"api_key\"])); client.is_ready()' 2>/dev/null" "true"

# Test ClickHouse (verify credentials work with actual query)
test_cli "ClickHouse client" "clickhouse-client --query 'SELECT 1' 2>/dev/null" "true"

# Test LiteLLM
echo -n "Testing LiteLLM config... "
if [ -n "$LITELLM_ENDPOINT" ]; then
    # Try to connect to LiteLLM API
    if curl -s -f -k "$LITELLM_ENDPOINT/health" >/dev/null 2>&1; then
        echo -e "${GREEN}✅ PASS${NC} (Endpoint: $LITELLM_ENDPOINT)"
        ((PASSED_TESTS++))
    else
        echo -e "${RED}❌ FAIL${NC} (Cannot connect to $LITELLM_ENDPOINT)"
        ((FAILED_TESTS++))
    fi
elif grep -q "LITELLM_ENDPOINT" ~/.bashrc 2>/dev/null; then
    echo -e "${YELLOW}⊘ SKIP (configured but not sourced in current shell)${NC}"
else
    echo -e "${YELLOW}⊘ SKIP (optional service not installed)${NC}"
fi

# Test Langfuse (verify API keys work)
test_cli "Langfuse SDK" "python3 -c 'from langfuse import Langfuse; import configparser; config=configparser.ConfigParser(); config.read(\"$HOME/.langfuse/credentials\"); langfuse=Langfuse(public_key=config[\"langfuse\"][\"public_key\"], secret_key=config[\"langfuse\"][\"secret_key\"], host=config[\"langfuse\"][\"host\"]); langfuse.auth_check()' 2>/dev/null" "true"

# Test DevPi (verify credentials work by connecting to server)
test_cli "DevPi client" "devpi use https://{{ devpi_api_hostname }} 2>/dev/null && devpi list 2>/dev/null" "true"

echo ""
echo "======================================================================"
echo "  Test Results"
echo "======================================================================"
echo -e "Passed: ${GREEN}${PASSED_TESTS}${NC}"
echo -e "Failed: ${RED}${FAILED_TESTS}${NC}"
echo ""

if [ $FAILED_TESTS -eq 0 ]; then
    echo -e "${GREEN}✅ All configured CLI tools are working correctly!${NC}"
    exit 0
else
    echo -e "${RED}❌ Some CLI tools failed configuration tests.${NC}"
    echo ""
    echo "Troubleshooting:"
    echo "1. Re-run: ./scripts/run_ansible.sh ansible/40_thinkube/core/code-server/15_configure_environment.yaml"
    echo "2. Check logs for specific failures"
    echo "3. Verify all required services are deployed"
    exit 1
fi
