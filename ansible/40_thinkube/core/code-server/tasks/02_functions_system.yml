# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# Adapted from ansible/misc/tasks/02_functions_system.yml
# Function System Setup - Individual function files, loaders, and documentation
# Creates functions via kubectl exec in code-server pod

# SECTION: BASIC UTILITY FUNCTIONS (Unit 2)

- name: Create load_dotenv function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/load_dotenv.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Function to load .env files and export all variables
      load_dotenv() {
        local env_file="${1:-$HOME/.env}"
        if [ -f "$env_file" ]; then
          set -a
          source "$env_file"
          set +a
          echo "Loaded environment from $env_file"
        else
          echo "Error: $env_file not found"
          return 1
        fi
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/load_dotenv.sh'
  changed_when: true
  tags: [thinkube, functions]

- name: Create mkcd function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/mkcd.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Function to create a directory and change to it
      mkcd() {
        mkdir -p "$1" && cd "$1"
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/mkcd.sh'
  changed_when: true
  tags: [thinkube, functions]

- name: Create extract function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/extract.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Universal archive extractor
      extract() {
        if [ -f "$1" ]; then
          case "$1" in
            *.tar.bz2) tar xjf "$1" ;;
            *.tar.gz)  tar xzf "$1" ;;
            *.bz2)     bunzip2 "$1" ;;
            *.rar)     unrar x "$1" ;;
            *.gz)      gunzip "$1" ;;
            *.tar)     tar xf "$1" ;;
            *.tbz2)    tar xjf "$1" ;;
            *.tgz)     tar xzf "$1" ;;
            *.zip)     unzip "$1" ;;
            *.Z)       uncompress "$1" ;;
            *.7z)      7z x "$1" ;;
            *)         echo "'$1' cannot be extracted via extract()" ;;
          esac
        else
          echo "'$1' is not a valid file"
        fi
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/extract.sh'
  changed_when: true
  tags: [thinkube, functions]

- name: Create sysinfo function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/sysinfo.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Display system information
      sysinfo() {
        echo "Hostname: $(hostname)"
        echo "Kernel: $(uname -r)"
        echo "Uptime: $(uptime -p)"
        echo "Memory:"
        free -h
        echo "Disk usage:"
        df -h | grep -vE "tmpfs|udev"
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/sysinfo.sh'
  changed_when: true
  tags: [thinkube, functions]

- name: Create fif function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/fif.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Find in files function
      fif() {
        if [ $# -eq 0 ]; then
          echo "Usage: fif <search_term> [directory]"
          return 1
        fi

        local search_term="$1"
        local search_dir="${2:-.}"

        grep -r --color=auto -n "$search_term" "$search_dir" 2>/dev/null
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/fif.sh'
  changed_when: true
  tags: [thinkube, functions]

# SECTION: GIT SHORTCUT FUNCTIONS (Unit 3)

- name: Create gst function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/gst.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Git status shortcut function
      gst() {
        git status "$@"
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/gst.sh'
  changed_when: true
  tags: [thinkube, functions]

- name: Create gpl function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/gpl.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Git pull shortcut function
      gpl() {
        git pull "$@"
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/gpl.sh'
  changed_when: true
  tags: [thinkube, functions]

- name: Create gdf function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/gdf.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Git diff shortcut function
      gdf() {
        git diff "$@"
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/gdf.sh'
  changed_when: true
  tags: [thinkube, functions]

- name: Create gcm function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/gcm.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Git commit shortcut function
      gcm() {
        git commit -m "$@"
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/gcm.sh'
  changed_when: true
  tags: [thinkube, functions]

- name: Create gsh function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/gsh.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Git stash shortcut function
      gsh() {
        git stash "$@"
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/gsh.sh'
  changed_when: true
  tags: [thinkube, functions]

- name: Create git_shortcuts function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_functions_dir }}/git_shortcuts.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Display available git shortcuts
      git_shortcuts() {
        echo "Available Thinkube git shortcuts:"
        echo "  gst - git status"
        echo "  gpl - git pull"
        echo "  gdf - git diff"
        echo "  gcm - git commit -m"
        echo "  gsh - git stash"
      }
      FUNCEOF
      chmod 644 {{ thinkube_system_functions_dir }}/git_shortcuts.sh'
  changed_when: true
  tags: [thinkube, functions]

# SECTION: MANAGEMENT FUNCTIONS (Unit 4)

- name: Create list_functions function
  ansible.builtin.copy:
    dest: /tmp/list_functions_content.txt
    content: |
      #!/bin/bash
      # Lists all available shared functions with descriptions

      list_functions() {
        local format="%s"
        local system_dir="{{ thinkube_system_functions_dir }}"
        local user_dir="{{ thinkube_user_functions_dir }}"
        local show_files=false
        local show_details=false

        # Process command line options
        while [[ $# -gt 0 ]]; do
          case "$1" in
            --details|-d)
              show_details=true
              shift
              ;;
            --files|-f)
              show_files=true
              shift
              ;;
            --system|-s)
              user_dir=""
              shift
              ;;
            --user|-u)
              system_dir=""
              shift
              ;;
            *)
              shift
              ;;
          esac
        done

        if [ "$show_files" = true ]; then
          echo "Function files:"
          echo "--------------"

          if [ -n "$system_dir" ] && [ -d "$system_dir" ]; then
            echo "System functions:"
            for file in "$system_dir"/*.sh; do
              if [ -f "$file" ]; then
                echo "  $(basename "$file")"
              fi
            done
          fi

          if [ -n "$user_dir" ] && [ -d "$user_dir" ]; then
            echo "User functions:"
            for file in "$user_dir"/*.sh; do
              if [ -f "$file" ]; then
                echo "  $(basename "$file")"
              fi
            done
          fi

          return 0
        fi

        echo "Available functions:"
        echo "-------------------"

        # Create temporary files for function listing
        local temp_funcs=$(mktemp)

        # Extract all function names and descriptions
        process_dir() {
          local dir=$1
          local src=$2

          if [ -d "$dir" ]; then
            for file in "$dir"/*.sh; do
              if [ -f "$file" ]; then
                # Get the base function name from the filename
                local base_func=$(basename "$file" .sh)

                # Get the function description
                local desc=$(grep -m 1 "^# " "$file" | sed 's/^# //')

                if [ "$show_details" = true ]; then
                  echo "$base_func|$desc|$src" >> "$temp_funcs"
                else
                  echo "$base_func|$src" >> "$temp_funcs"
                fi
              fi
            done
          fi
        }

        [ -n "$system_dir" ] && process_dir "$system_dir" "system"
        [ -n "$user_dir" ] && process_dir "$user_dir" "user"

        # Display functions sorted by name
        if [ "$show_details" = true ]; then
          # Display with descriptions
          echo "FUNCTION                SOURCE  DESCRIPTION"
          echo "--------------------    ------  -----------"
          sort "$temp_funcs" | while IFS="|" read -r name desc src; do
            printf "%-20s    %-6s  %s\n" "$name" "[$src]" "$desc"
          done
        else
          # Display just names and source
          echo "FUNCTION                SOURCE"
          echo "--------------------    ------"
          sort "$temp_funcs" | while IFS="|" read -r name src; do
            printf "%-20s    [%s]\n" "$name" "$src"
          done
        fi

        # Clean up
        rm -f "$temp_funcs"
      }
  delegate_to: vilanova1

- name: Copy list_functions to pod
  ansible.builtin.command:
    cmd: >
      microk8s.kubectl cp
      /tmp/list_functions_content.txt
      {{ code_server_namespace }}/{{ codeserver_pod }}:{{ thinkube_system_functions_dir }}/list_functions.sh
  changed_when: true

- name: Set permissions on list_functions
  ansible.builtin.command:
    cmd: >
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} --
      chmod 644 {{ thinkube_system_functions_dir }}/list_functions.sh
  changed_when: false

- name: Clean up temp list_functions file
  ansible.builtin.file:
    path: /tmp/list_functions_content.txt
    state: absent
  delegate_to: vilanova1

# Continue with remaining management functions using same temp file approach...

- name: Create set_shell function from template
  ansible.builtin.template:
    src: templates/set_shell.sh.j2
    dest: /tmp/set_shell_{{ ansible_date_time.epoch }}.sh
    mode: '0644'
  register: set_shell_template

- name: Copy set_shell function to pod
  ansible.builtin.command:
    cmd: >
      microk8s.kubectl cp
      {{ set_shell_template.dest }}
      {{ code_server_namespace }}/{{ codeserver_pod }}:{{ thinkube_system_functions_dir }}/set_shell.sh
  changed_when: true

- name: Set permissions on set_shell function
  ansible.builtin.command:
    cmd: >
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} --
      chmod 644 {{ thinkube_system_functions_dir }}/set_shell.sh
  changed_when: false

- name: Clean up temporary set_shell file
  ansible.builtin.file:
    path: "{{ set_shell_template.dest }}"
    state: absent

- name: Create example user function
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'if [ ! -f {{ thinkube_user_functions_dir }}/hello.sh ]; then
          cat > {{ thinkube_user_functions_dir }}/hello.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Example function to say hello
      hello() {
        echo "Hello from user functions!"
      }
      FUNCEOF
          chmod 644 {{ thinkube_user_functions_dir }}/hello.sh
        fi'
  changed_when: true
  tags: [thinkube, functions]

# SECTION: SHELL LOADERS

- name: Create Bash/Zsh functions loader
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_dir }}/load_functions.sh << '\''FUNCEOF'\''
      #!/bin/bash
      # Loads all function files from system and user directories
      # Each function file contains exactly one function with matching name

      SYSTEM_FUNCTIONS_DIR="{{ thinkube_system_functions_dir }}"
      USER_FUNCTIONS_DIR="{{ thinkube_user_functions_dir }}"

      # Load system functions first
      if [ -d "$SYSTEM_FUNCTIONS_DIR" ]; then
        for function_file in "$SYSTEM_FUNCTIONS_DIR"/*.sh; do
          if [ -f "$function_file" ]; then
            source "$function_file"
          fi
        done
      else
        echo "Warning: System functions directory not found: $SYSTEM_FUNCTIONS_DIR"
      fi

      # Then load user functions (these can override system functions)
      if [ -d "$USER_FUNCTIONS_DIR" ]; then
        for function_file in "$USER_FUNCTIONS_DIR"/*.sh; do
          if [ -f "$function_file" ]; then
            source "$function_file"
          fi
        done
      fi
      FUNCEOF
      chmod 644 {{ thinkube_system_dir }}/load_functions.sh'
  changed_when: true
  tags: [thinkube, loaders]

- name: Create Fish functions loader
  ansible.builtin.shell:
    cmd: |
      microk8s.kubectl exec -n {{ code_server_namespace }} {{ codeserver_pod }} -- \
        bash -c 'cat > {{ thinkube_system_dir }}/load_functions.fish << '\''FUNCEOF'\''
      # Fish shell loader for shared bash functions
      # Loads each bash function file and creates a fish wrapper with same name

      # Guard against recursive loading
      if set -q __THINKUBE_FUNCTIONS_LOADED
          return 0
      end
      set -g __THINKUBE_FUNCTIONS_LOADED 1

      set SYSTEM_FUNCTIONS_DIR "{{ thinkube_system_functions_dir }}"
      set USER_FUNCTIONS_DIR "{{ thinkube_user_functions_dir }}"
      set ALIASES_LOADER_FILE "$SYSTEM_FUNCTIONS_DIR/load_aliases.fish"

      # Process system functions
      if test -d $SYSTEM_FUNCTIONS_DIR
          for function_file in $SYSTEM_FUNCTIONS_DIR/*.sh
              if test -f $function_file
                  # Skip load_aliases.sh as it is handled separately
                  if string match -q "*load_aliases.sh" "$function_file"
                      continue
                  end

                  # Get the function name from the filename (without .sh)
                  set func_name (basename $function_file .sh)

                  # Create a fish function that directly executes the bash function
                  eval "function $func_name
                      bash -c '\''source \"$function_file\" && $func_name \"\$@\"'\'' bash \$argv
                  end"
              end
          end
      end

      # Process user functions
      if test -d $USER_FUNCTIONS_DIR
          for function_file in $USER_FUNCTIONS_DIR/*.sh
              if test -f $function_file
                  # Get the function name from the filename (without .sh)
                  set func_name (basename $function_file .sh)

                  # Create a fish function that directly executes the bash function
                  eval "function $func_name
                      bash -c '\''source \"$function_file\" && $func_name \"\$@\"'\'' bash \$argv
                  end"
              end
          end
      end

      # Load aliases for Fish
      if test -f $ALIASES_LOADER_FILE
          source $ALIASES_LOADER_FILE
      end
      FUNCEOF
      chmod 644 {{ thinkube_system_dir }}/load_functions.fish'
  changed_when: true
  tags: [thinkube, loaders]
