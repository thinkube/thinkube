# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/core/argocd/11_deploy.yaml
# Description:
#   Deploy ArgoCD using Helm with Ingress, TLS, and Keycloak OIDC integration
#
# Requirements:
#   - MicroK8s Kubernetes cluster
#   - Keycloak instance running with ArgoCD client configured (run 10_configure_keycloak.yaml first)
#   - Cert-Manager deployed (CORE-003)
#   - ADMIN_PASSWORD environment variable set for Keycloak admin access
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/argocd/11_deploy.yaml
#
# Variables from inventory:
#   - domain_name: Domain name for all services 
#   - keycloak_url: URL to Keycloak instance
#   - keycloak_realm: Keycloak realm name
#   - admin_username: Administrator username (consistent across all components)
#   - kubectl_bin: Path to kubectl binary
#   - helm_bin: Path to helm binary
#   - kubeconfig: Path to Kubernetes configuration file
#
# Dependencies:
#   - CORE-001: MicroK8s Control Node
#   - CORE-003: Cert-Manager (for TLS)
#   - CORE-004: Keycloak (for SSO)

- name: Deploy ArgoCD using Helm with Ingress, TLS, and Keycloak OIDC
  hosts: k8s_control_plane
  become: true
  gather_facts: true

  vars:
    # ArgoCD values file path (temporary, not from inventory)
    argocd_values_file: "/tmp/argocd-values.yaml"
    
    # TLS secret name for ArgoCD
    argocd_tls_secret_name: "argocd-tls-secret"
    
    # Keycloak admin credentials
    keycloak_admin_user: "{{ admin_username }}"
    keycloak_admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default(lookup('env', 'ANSIBLE_BECOME_PASSWORD'), true) }}"
    
  tasks:
    #######################################################################
    # (A) Retrieve existing Keycloak client secret (no creation).
    #######################################################################

    - name: Obtain Keycloak admin token
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/realms/master/protocol/openid-connect/token"
        method: POST
        body_format: form-urlencoded
        body:
          client_id: "admin-cli"
          username: "{{ keycloak_admin_user }}"
          password: "{{ keycloak_admin_password }}"
          grant_type: "password"
        validate_certs: false
        status_code: 200
      register: keycloak_token
      no_log: true
      failed_when: keycloak_token is failed

    - name: Query Keycloak for "argocd" client
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/admin/realms/{{ keycloak_realm }}/clients?clientId={{ argocd_client_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ keycloak_token.json.access_token }}"
        validate_certs: false
        status_code: 200
      register: existing_argocd_client
      failed_when: existing_argocd_client is failed

    - name: Fail if "argocd" client is not found
      ansible.builtin.fail:
        msg: "ArgoCD client '{{ argocd_client_id }}' not found in realm '{{ keycloak_realm }}'. Please run 10_configure_keycloak.yaml first."
      when: existing_argocd_client.json | length == 0

    - name: Retrieve argocd_client_uuid
      ansible.builtin.set_fact:
        argocd_client_uuid: "{{ existing_argocd_client.json[0].id }}"

    - name: Retrieve ArgoCD client secret (already existing)
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/admin/realms/{{ keycloak_realm }}/clients/{{ argocd_client_uuid }}/client-secret"
        method: GET
        headers:
          Authorization: "Bearer {{ keycloak_token.json.access_token }}"
          Content-Type: "application/json"
        validate_certs: false
        status_code: 200
      register: argocd_secret_resp
      failed_when: argocd_secret_resp is failed

    - name: Set fact for argocd_client_secret
      ansible.builtin.set_fact:
        argocd_client_secret: "{{ argocd_secret_resp.json.value }}"

    #######################################################################
    # (B) Deploy or upgrade ArgoCD via Helm
    #######################################################################

    - name: Ensure ArgoCD namespace exists
      ansible.builtin.shell: |
        if ! {{ kubectl_bin }} get namespace {{ argocd_namespace }}; then
          {{ kubectl_bin }} create namespace {{ argocd_namespace }}
        fi
      register: ensure_ns
      changed_when: ensure_ns.stdout != ""
      failed_when: ensure_ns.rc != 0

    # --- Get wildcard TLS certificate from default namespace ---
    - name: Get wildcard certificate from default namespace
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: default
        name: "{{ domain_name.replace('.', '-') }}-tls"
      register: wildcard_cert
      failed_when: wildcard_cert.resources | length == 0

    - name: Copy wildcard certificate to argocd namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ argocd_tls_secret_name }}"
            namespace: "{{ argocd_namespace }}"
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ wildcard_cert.resources[0].data['tls.crt'] }}"
            tls.key: "{{ wildcard_cert.resources[0].data['tls.key'] }}"

    - name: Add ArgoCD Helm repository if not present
      ansible.builtin.shell: |
        if ! {{ helm_bin }} repo list | grep -q 'argo-helm'; then
          {{ helm_bin }} repo add argo-helm {{ argocd_chart_repo }}
        fi
      register: helm_repo_status
      changed_when: helm_repo_status.stdout != ""
      failed_when: helm_repo_status.rc != 0

    - name: Update Helm repositories
      ansible.builtin.shell: "{{ helm_bin }} repo update"
      changed_when: false
      failed_when: false

    - name: Install apache2-utils for htpasswd
      ansible.builtin.apt:
        name: apache2-utils
        state: present
        update_cache: yes
      become: true

    - name: Set admin password from environment or file
      ansible.builtin.set_fact:
        admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default(lookup('env', 'ANSIBLE_BECOME_PASSWORD'), true) }}"

    # Generate a bcrypt hash of the admin password for ArgoCD
    - name: Generate bcrypt hash of admin password
      ansible.builtin.shell: |
        echo -n "{{ admin_password }}" | htpasswd -nbiBC 10 "" | tr -d ':\n' | sed 's/$2y/$2a/'
      register: password_hash
      changed_when: false
      no_log: true

    - name: Create ArgoCD values file
      ansible.builtin.copy:
        dest: "{{ argocd_values_file }}"
        content: |
          configs:
            cm:
              admin.enabled: true
              url: "https://{{ argocd_hostname }}"
              dex.config: |
                connectors:
                  - type: oidc
                    id: keycloak
                    name: Keycloak
                    config:
                      issuer: "{{ keycloak_url }}/realms/{{ keycloak_realm }}"
                      clientID: "{{ argocd_client_id }}"
                      clientSecret: "{{ argocd_client_secret }}"
                      insecureSkipVerify: false
            secret:
              createSecret: true
              # Set admin credentials
              admin.password: "{{ password_hash.stdout }}"
              admin.passwordMtime: "{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%SZ') }}"
          # Set the admin user creation to the standard admin_username
          global:
            additionalLabels: {}
          server:
            # Run in insecure mode when using separate ingresses for HTTP/gRPC
            # This is required by ArgoCD when using separate Ingress resources for HTTP and gRPC
            # See: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/
            extraArgs:
              - --insecure
            service:
              type: ClusterIP
            config:
              url: "https://{{ argocd_hostname }}"
              # Configure server TLS
              tls.minVersion: "1.2"
              tls.maxVersion: "1.3"
              tls.cipherSuites: "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
          ingress:
            enabled: false

    - name: Deploy or upgrade ArgoCD using Helm
      ansible.builtin.shell: |
        if {{ helm_bin }} list -n {{ argocd_namespace }} | grep -q '^{{ argocd_release_name }}'; then
          {{ helm_bin }} upgrade {{ argocd_release_name }} argo-helm/{{ argocd_chart_name }} \
            --namespace {{ argocd_namespace }} \
            -f {{ argocd_values_file }}
        else
          {{ helm_bin }} install {{ argocd_release_name }} argo-helm/{{ argocd_chart_name }} \
            --namespace {{ argocd_namespace }} \
            -f {{ argocd_values_file }}
        fi
      args:
        chdir: "/tmp"
      failed_when: false

    - name: Wait for ArgoCD pods to be ready
      ansible.builtin.shell: |
        attempt=1
        max_attempts=60
        until {{ kubectl_bin }} get pods -n {{ argocd_namespace }} -l app.kubernetes.io/part-of=argocd | grep -E 'Running|Completed' || [ $attempt -eq $max_attempts ]; do
          sleep 5
          attempt=$((attempt + 1))
        done
      changed_when: false
      failed_when: false

    #######################################################################
    # (C) Create/Update Ingress for ArgoCD
    #######################################################################

    - name: Remove existing Ingress resources (if any)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: absent
        kind: Ingress
        name: "{{ item }}"
        namespace: "{{ argocd_namespace }}"
      loop:
        - argocd-grpc-ingress
        - argocd-http-ingress
        - argocd-ingress
      failed_when: false

    - name: Create gRPC Ingress for ArgoCD
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: argocd-grpc-ingress
            namespace: "{{ argocd_namespace }}"
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
              nginx.ingress.kubernetes.io/enable-http2: "true"
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
                - "{{ argocd_grpc_hostname }}"
              secretName: "{{ argocd_tls_secret_name }}"
            rules:
            - host: "{{ argocd_grpc_hostname }}"
              http:
                paths:
                - path: /
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: argocd-server
                      port:
                        number: 8080

    - name: Create HTTP Ingress for ArgoCD
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: argocd-http-ingress
            namespace: "{{ argocd_namespace }}"
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
              nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
                - "{{ argocd_hostname }}"
              secretName: "{{ argocd_tls_secret_name }}"
            rules:
            - host: "{{ argocd_hostname }}"
              http:
                paths:
                - path: /
                  pathType: ImplementationSpecific
                  backend:
                    service:
                      name: argocd-server
                      port:
                        number: 80

    - name: Display ArgoCD Ingress details
      ansible.builtin.shell: "{{ kubectl_bin }} get ingress -n {{ argocd_namespace }} -o yaml"
      register: ingress_info
      changed_when: false
      failed_when: false

    - name: Show ArgoCD Ingress configuration
      ansible.builtin.debug:
        var: ingress_info.stdout_lines

    #######################################################################
    # (D) Configure ArgoCD with OIDC and RBAC
    #######################################################################

    - name: Configure ArgoCD with OIDC and group mapping
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-cm
            namespace: "{{ argocd_namespace }}"
          data:
            url: "https://{{ argocd_hostname }}"
            # Simple OIDC config with standard scopes only
            oidc.config: |-
              name: Keycloak
              issuer: "{{ keycloak_url }}/realms/{{ keycloak_realm }}"
              clientID: "{{ argocd_client_id }}"
              clientSecret: "{{ argocd_client_secret }}"
              requestedScopes: ["openid", "profile", "email"]
              claimMappings:
                groups: "groups"

    - name: Configure ArgoCD RBAC for group-based admin access
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-rbac-cm
            namespace: "{{ argocd_namespace }}"
          data:
            # Map the argocd-admins group to the admin role
            policy.csv: |
              g, argocd-admins, role:admin
            # Set default policy for other users
            policy.default: role:readonly

    - name: Restart ArgoCD server to pick up OIDC and RBAC changes
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: argocd-server
            namespace: "{{ argocd_namespace }}"
          spec:
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/restartedAt: "{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S') }}"

    - name: Wait for ArgoCD server to restart
      ansible.builtin.shell: |
        sleep 5
        for i in $(seq 1 12); do
          if {{ kubectl_bin }} -n {{ argocd_namespace }} get pod -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].status.phase}' | grep -q Running; then
            if {{ kubectl_bin }} -n {{ argocd_namespace }} get pod -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].status.containerStatuses[0].ready}' | grep -q "true"; then
              echo "Server is ready"
              exit 0
            fi
          fi
          echo "Waiting for ArgoCD server to be ready... attempt $i"
          sleep 5
        done
        echo "Timed out waiting for ArgoCD server"
        exit 1
      register: wait_result
      changed_when: false
      failed_when: false