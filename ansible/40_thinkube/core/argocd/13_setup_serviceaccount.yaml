# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/core/argocd/13_setup_serviceaccount.yaml
# Description:
#   Configure ArgoCD ServiceAccount, generate authentication token, and install CLI
#
# Requirements:
#   - MicroK8s Kubernetes cluster
#   - ArgoCD deployed (run 11_deploy.yaml first)
#   - SSH key available at specified path
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/argocd/13_setup_serviceaccount.yaml
#
# Variables from inventory:
#   - kubectl_bin: Path to kubectl binary
#   - kubeconfig: Path to Kubernetes configuration
#   - domain_name: Domain name for all services
#
# Dependencies:
#   - CORE-001: MicroK8s Control Node
#   - CORE-009: ArgoCD (11_deploy.yaml)

- name: Configure ArgoCD ServiceAccount and Secrets
  hosts: k8s_control_plane
  gather_facts: true  # So that ansible_date_time is defined
  become: false       # Default to not using root
  vars:
    github_ssh_secret: github-ssh-key
    deployer_secret_name: argo-cd-deployer-token
    env_file_path: "{{ ansible_env.HOME }}/.env"  # Path to the .env file

    argocd_cli_version: "v2.13.1"
    argocd_cli_insecure: true

  tasks:
    # Get the real hostname of the server
    - name: Get the real hostname of the system
      ansible.builtin.command: hostname
      register: hostname_result
      changed_when: false
      failed_when: hostname_result.rc != 0

    # Set the SSH key path based on the real hostname
    - name: Set SSH key path based on real hostname
      ansible.builtin.set_fact:
        ssh_private_key_path: "{{ ansible_env.HOME }}/.ssh/{{ hostname_result.stdout }}"

    # Debug the hostname and path
    - name: Debug hostname and SSH key path
      ansible.builtin.debug:
        msg: 
          - "Real hostname: {{ hostname_result.stdout }}"
          - "SSH key path: {{ ssh_private_key_path }}"

    ########################################################################
    # 1) INSTALL ARGO CD CLI
    ########################################################################
    - name: Download ArgoCD CLI
      ansible.builtin.get_url:
        url: "https://github.com/argoproj/argo-cd/releases/download/{{ argocd_cli_version }}/argocd-linux-amd64"
        dest: /tmp/argocd
        mode: '0755'
      failed_when: false

    - name: Move ArgoCD CLI to /usr/local/bin
      become: true    # We only become root for tasks that need it
      ansible.builtin.copy:
        src: /tmp/argocd
        dest: /usr/local/bin/argocd
        mode: '0755'
        remote_src: true
      failed_when: false

    ########################################################################
    # 2) GET ADMIN CREDENTIALS
    ########################################################################
    - name: Get initial admin password from secret
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: "{{ argocd_namespace }}"
        name: argocd-initial-admin-secret
      register: initial_secret

    - name: Set admin credentials with initial password
      ansible.builtin.set_fact:
        argocd_user: "admin"
        argocd_initial_password: "{{ initial_secret.resources[0].data.password | b64decode }}"
      when: initial_secret.resources | length > 0
      
    - name: Set argocd_password to initial password
      ansible.builtin.set_fact:
        argocd_password: "{{ argocd_initial_password }}"
      when: argocd_initial_password is defined

    - name: Debug - Show admin password source
      ansible.builtin.debug:
        msg: "Using initial admin password from argocd-initial-admin-secret"

    ########################################################################
    # 3) CLEAN UP OLD RESOURCES
    ########################################################################
    - name: Remove old ServiceAccounts and bindings
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: absent
        definition:
          apiVersion: "{{ item.apiVersion }}"
          kind: "{{ item.kind }}"
          metadata:
            name: "{{ item.name }}"
            namespace: "{{ item.namespace | default(omit) }}"
      loop:
        - { apiVersion: v1, kind: ServiceAccount, name: argocd-cli-user, namespace: "{{ argocd_namespace }}" }
        - { apiVersion: v1, kind: ServiceAccount, name: argo-cd-deployer, namespace: "{{ argocd_namespace }}" }
        - { apiVersion: rbac.authorization.k8s.io/v1, kind: ClusterRoleBinding, name: argocd-cli-user-binding }
        - { apiVersion: rbac.authorization.k8s.io/v1, kind: ClusterRoleBinding, name: argo-cd-deployer-binding }
      failed_when: false

    ########################################################################
    # 4) CREATE SERVICEACCOUNT + BASIC CONFIG
    ########################################################################
    - name: Create argo-cd-deployer ServiceAccount
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: argo-cd-deployer
            namespace: "{{ argocd_namespace }}"

    - name: Configure argo-cd-deployer account in ArgoCD ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-cm
            namespace: "{{ argocd_namespace }}"
          data:
            "accounts.argo-cd-deployer": "apiKey"

    ########################################################################
    # 5) RESTART ARGOCD SERVER (APPLY NEW SETTINGS)
    ########################################################################
    - name: Restart ArgoCD server deployment
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: argocd-server
            namespace: "{{ argocd_namespace }}"
          spec:
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/restartedAt: "{{ ansible_date_time.iso8601 }}"

    - name: Wait for ArgoCD server to be ready (initial wait)
      ansible.builtin.wait_for:
        timeout: 10

    - name: Wait for ArgoCD server pods to be ready
      ansible.builtin.shell: |
        for i in $(seq 1 12); do
          if {{ kubectl_bin }} -n {{ argocd_namespace }} get pod -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].status.phase}' | grep -q Running; then
            echo "Server is running"
            if {{ kubectl_bin }} -n {{ argocd_namespace }} get pod -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].status.containerStatuses[0].ready}' | grep -q "true"; then
              echo "Server is ready"
              exit 0
            fi
          fi
          echo "Waiting for ArgoCD server to be ready... attempt $i"
          sleep 5
        done
        echo "Timed out waiting for ArgoCD server"
        exit 1
      register: wait_result
      changed_when: false
      failed_when: wait_result.rc != 0

    - name: Debug - Show wait result
      ansible.builtin.debug:
        var: wait_result

    ########################################################################
    # 6) BUILD CLI FLAGS & GENERATE DEPLOYER TOKEN
    ########################################################################
    - name: Set argocd_login_insecure_flag
      ansible.builtin.set_fact:
        argocd_login_insecure_flag: "{{ '--insecure' if argocd_cli_insecure else '' }}"

    - name: Create directory for trusted certificates
      ansible.builtin.file:
        path: /tmp/argocd-trust
        state: directory
        mode: '0755'
      
    - name: Extract server certificate for trust
      ansible.builtin.shell: |
        echo | openssl s_client -servername {{ argocd_grpc_hostname }} -connect {{ argocd_grpc_hostname }}:443 2>/dev/null | openssl x509 -out /tmp/argocd-trust/server.crt
        echo "Certificate extracted to /tmp/argocd-trust/server.crt"
      register: cert_extract
      failed_when: false
      changed_when: false

    - name: Login to ArgoCD with initial admin password
      ansible.builtin.shell: |
        # Set the server certificate as trusted
        export SSL_CERT_DIR=/tmp/argocd-trust
        
        # Attempt login with security
        argocd login {{ argocd_grpc_hostname }} \
          --username {{ argocd_user }} \
          --password '{{ argocd_password }}' \
          {{ argocd_login_insecure_flag }}
      register: login_debug
      failed_when: login_debug.rc != 0

    - name: Debug - Show login result
      ansible.builtin.debug:
        var: login_debug
      
    - name: Set admin password from environment or file
      ansible.builtin.set_fact:
        admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default(lookup('env', 'ANSIBLE_BECOME_PASSWORD'), true) }}"

    - name: Update admin password to standard password
      ansible.builtin.shell: |
        set -e
        # Update the password
        argocd account update-password \
          --current-password '{{ argocd_initial_password }}' \
          --new-password '{{ admin_password }}' \
          {{ argocd_login_insecure_flag }}
      register: password_update
      failed_when: password_update.rc != 0
      when: argocd_initial_password is defined
      
    - name: Update password variable after change
      ansible.builtin.set_fact:
        argocd_password: "{{ admin_password }}"
      when: password_update is succeeded

    - name: Delete initial admin secret after password change
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: absent
        api_version: v1
        kind: Secret
        namespace: "{{ argocd_namespace }}"
        name: argocd-initial-admin-secret
      when: password_update is succeeded

    - name: Generate ArgoCD authentication token
      ansible.builtin.shell: |
        set -e
        # Set the server certificate as trusted
        export SSL_CERT_DIR=/tmp/argocd-trust
        
        TOKEN_OUTPUT=$(argocd account generate-token \
          --account argo-cd-deployer \
          {{ argocd_login_insecure_flag }} 2>&1)

        echo "Raw token output: $TOKEN_OUTPUT" >&2

        if [[ "$TOKEN_OUTPUT" =~ ^ey ]]; then
          echo "$TOKEN_OUTPUT"
        else
          echo "Failed to generate valid token" >&2
          echo "$TOKEN_OUTPUT" >&2
          exit 1
        fi
      args:
        executable: /bin/bash
      register: token_output
      no_log: false
      failed_when: token_output.rc != 0

    - name: Debug - Show token generation result
      ansible.builtin.debug:
        var: token_output

    - name: Create deployer token secret
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ deployer_secret_name }}"
            namespace: "{{ argocd_namespace }}"
          type: Opaque
          data:
            password: "{{ token_output.stdout | b64encode }}"

    ########################################################################
    # 7) SAVE TOKEN TO .ENV FILE
    ########################################################################
    - name: Check if .env file exists
      ansible.builtin.stat:
        path: "{{ env_file_path }}"
      register: env_file_stat

    - name: Create .env file if it doesn't exist
      ansible.builtin.file:
        path: "{{ env_file_path }}"
        state: touch
        mode: '0600'
      when: not env_file_stat.stat.exists

    - name: Update or add ARGOCD_DEPLOYMENT_SECRET in .env file
      ansible.builtin.lineinfile:
        path: "{{ env_file_path }}"
        regexp: '^ARGOCD_DEPLOYMENT_SECRET='
        line: 'ARGOCD_DEPLOYMENT_SECRET="{{ token_output.stdout }}"'
        state: present
        create: true
        mode: '0600'
      no_log: true

    ########################################################################
    # 8) READ SSH PRIVATE KEY (AS NORMAL USER)
    ########################################################################
    - name: Check if SSH private key exists
      ansible.builtin.stat:
        path: "{{ ssh_private_key_path }}"
      register: ssh_key_stat

    - name: Read SSH private key
      ansible.builtin.slurp:
        src: "{{ ssh_private_key_path }}"
      register: ssh_key_content
      # no become => uses your normal user's home
      when: ssh_key_stat.stat.exists
      failed_when: false

    - name: Debug - Report SSH key status
      ansible.builtin.debug:
        msg: "SSH key {{ 'found at ' + ssh_private_key_path if ssh_key_stat.stat.exists else 'not found at ' + ssh_private_key_path }}"

    # Uncomment if you want to create the GitHub SSH key secret
    # - name: Create GitHub SSH key secret
    #   kubernetes.core.k8s:
    #     kubeconfig: "{{ kubeconfig }}"
    #     state: present
    #     definition:
    #       apiVersion: v1
    #       kind: Secret
    #       metadata:
    #         name: "{{ github_ssh_secret }}"
    #         namespace: "{{ argocd_namespace }}"
    #       type: Opaque
    #       data:
    #         ssh-privatekey: "{{ ssh_key_content.content }}"
    #   when: ssh_key_stat.stat.exists

    ########################################################################
    # 9) TEST THE ARGOCD CLI USING THE NEW TOKEN
    ########################################################################
    - name: Save token to temporary file
      ansible.builtin.copy:
        content: "{{ token_output.stdout }}"
        dest: "/tmp/argocd_token"
        mode: '0600'

    - name: Test token with API call
      ansible.builtin.shell: >-
        # Use the trusted certificate store for curl
        curl -s --cacert /tmp/argocd-trust/server.crt
        -H "Authorization: Bearer $(cat /tmp/argocd_token)"
        https://{{ argocd_hostname }}/api/v1/version
      register: api_test_result
      retries: 3
      delay: 5
      until: api_test_result.rc == 0
      failed_when: false

    - name: Debug - Show API test result
      ansible.builtin.debug:
        var: api_test_result

    - name: Check API test result
      ansible.builtin.fail:
        msg: "Failed to authenticate with ArgoCD API using token: {{ api_test_result.stdout }}"
      when: >
        api_test_result.rc != 0 or 
        api_test_result.stdout | regex_search('Unauthorized|forbidden|invalid|bad gateway|not implemented', ignorecase=true)

    - name: Clean up temporary token file
      ansible.builtin.file:
        path: "/tmp/argocd_token"
        state: absent