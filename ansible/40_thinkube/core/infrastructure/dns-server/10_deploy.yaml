# Copyright 2025 Alejandro Mart√≠nez Corri√° and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/core/dns-server/10_deploy.yaml
# Description:
#   Deploy BIND9 DNS server for network-wide DNS resolution
#   Handles domain resolution for *.thinkube.com and forwards external queries
#   Separate from Kubernetes CoreDNS which handles cluster.local
#
# Requirements:
#   - Kubernetes must be installed and running (Canonical k8s-snap)
#   - MetalLB must be enabled for LoadBalancer services
#   - DNS external IP must be configured on control plane node
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/infrastructure/dns-server/10_deploy.yaml
#
# Variables from inventory:
#   - domain_name: Base domain for all services
#   - dns_external_ip_octet: Last octet for DNS external IP
#   - primary_ingress_ip_octet: Last octet for primary ingress
#   - secondary_ingress_ip_octet: Last octet for secondary ingress
#
# Dependencies:
#   - Networking and ZeroTier must be configured
#   - IPs must be assigned to control plane node
#
# ü§ñ [AI-assisted]

- name: Deploy BIND9 DNS Server for Network DNS
  hosts: k8s_control_plane
  gather_facts: true
  become: false

  vars:
    dns_namespace: "dns-system"
    bind9_image_name: "localhost/thinkube-bind9:latest"
    bind9_build_dir: "/tmp/thinkube-bind9-build"
    # Determine subnet prefix based on network mode
    subnet_prefix: "{{ zerotier_subnet_prefix if network_mode == 'overlay' else network_cidr.split('/')[0] | regex_replace('\\.[0-9]+$', '.') }}"
    dns_external_ip: "{{ subnet_prefix }}{{ dns_external_ip_octet }}"
    primary_ingress_ip: "{{ subnet_prefix }}{{ primary_ingress_ip_octet }}"
    secondary_ingress_ip: "{{ subnet_prefix }}{{ secondary_ingress_ip_octet }}"
    control_plane_hostname: "{{ inventory_hostname }}"
    bind9_containerfile: |
      FROM ubuntu:24.04

      # Install bind9 and dependencies
      RUN apt-get update && \
          apt-get install -y --no-install-recommends \
            bind9 \
            bind9-utils \
            dnsutils && \
          apt-get clean && \
          rm -rf /var/lib/apt/lists/*

      # Expose DNS ports
      EXPOSE 53/tcp 53/udp

      # Run named in foreground
      CMD ["/usr/sbin/named", "-g", "-c", "/etc/bind/named.conf", "-u", "bind"]

  pre_tasks:
    - name: Verify required variables are defined
      ansible.builtin.assert:
        that:
          - domain_name is defined
          - dns_external_ip_octet is defined
          - primary_ingress_ip_octet is defined
          - secondary_ingress_ip_octet is defined
          - network_mode is defined
        fail_msg: "Required inventory variables are not defined"

  tasks:
    - name: Create DNS namespace
      ansible.builtin.shell: |
        cat <<EOF | {{ kubectl_bin }} apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: {{ dns_namespace }}
          labels:
            name: {{ dns_namespace }}
        EOF
      register: create_namespace
      changed_when: "'created' in create_namespace.stdout or 'configured' in create_namespace.stdout"

    # Build BIND9 container image
    - name: Install podman
      ansible.builtin.apt:
        name: podman
        state: present
        update_cache: yes
      become: true

    - name: Create build directory
      ansible.builtin.file:
        path: "{{ bind9_build_dir }}"
        state: directory
        mode: '0755'

    - name: Create Containerfile
      ansible.builtin.copy:
        content: "{{ bind9_containerfile }}"
        dest: "{{ bind9_build_dir }}/Containerfile"
        mode: '0644'

    - name: Build BIND9 image with podman
      ansible.builtin.command:
        cmd: podman build -t {{ bind9_image_name }} {{ bind9_build_dir }}
      register: podman_build
      changed_when: true

    - name: Remove existing tar file if present
      ansible.builtin.file:
        path: "{{ bind9_build_dir }}/thinkube-bind9.tar"
        state: absent

    - name: Export image from podman
      ansible.builtin.command:
        cmd: podman save -o {{ bind9_build_dir }}/thinkube-bind9.tar {{ bind9_image_name }}
      changed_when: true

    - name: Import image into containerd
      ansible.builtin.shell: |
        sudo /snap/k8s/current/bin/ctr --address /run/containerd/containerd.sock --namespace k8s.io images import {{ bind9_build_dir }}/thinkube-bind9.tar
      changed_when: true

    - name: Clean up build artifacts
      ansible.builtin.file:
        path: "{{ bind9_build_dir }}"
        state: absent

    # Create BIND9 configuration files
    - name: Create BIND9 named.conf configuration
      ansible.builtin.set_fact:
        named_conf: |
          options {
              directory "/var/cache/bind";

              // Forwarders for external DNS resolution
              forwarders {
                  8.8.8.8;
                  8.8.4.4;
              };

              // DNS Security
              dnssec-validation no;

              // Allow queries from any source
              allow-query { any; };

              // Enable recursion for all clients
              recursion yes;
              allow-recursion { any; };

              // Listen on all interfaces
              listen-on { any; };
              listen-on-v6 { any; };

              // Hide version
              version "DNS Server";
          };

          // Include zone configurations
          include "/etc/bind/zones.conf";

    - name: Create zones configuration
      ansible.builtin.set_fact:
        zones_conf: |
          // Zone for {{ domain_name }}
          zone "{{ domain_name }}" {
              type master;
              file "/etc/bind/zones/db.{{ domain_name }}";
          };

          // Zone for kn.{{ domain_name }}
          zone "kn.{{ domain_name }}" {
              type master;
              file "/etc/bind/zones/db.kn.{{ domain_name }}";
          };

    - name: Create main domain zone file
      ansible.builtin.set_fact:
        zone_main: |
          $TTL    604800
          @       IN      SOA     ns1.{{ domain_name }}. admin.{{ domain_name }}. (
                                  {{ ansible_date_time.epoch }}  ; Serial
                                  604800          ; Refresh
                                  86400           ; Retry
                                  2419200         ; Expire
                                  604800 )        ; Negative Cache TTL
          ;
          @       IN      NS      ns1.{{ domain_name }}.
          ns1     IN      A       {{ dns_external_ip }}

          ; Wildcard for all subdomains
          *       IN      A       {{ primary_ingress_ip }}

          ; Specific entries for infrastructure
          dns     IN      A       {{ dns_external_ip }}
          {{ control_plane_hostname }}  IN  A  {{ hostvars[control_plane_hostname]['zerotier_ip'] }}
          {% for host in groups['k8s_workers'] | default([]) %}
          {{ host }}  IN  A  {{ hostvars[host]['zerotier_ip'] }}
          {% endfor %}

    - name: Create Knative domain zone file
      ansible.builtin.set_fact:
        zone_kn: |
          $TTL    604800
          @       IN      SOA     ns1.kn.{{ domain_name }}. admin.{{ domain_name }}. (
                                  {{ ansible_date_time.epoch }}  ; Serial
                                  604800          ; Refresh
                                  86400           ; Retry
                                  2419200         ; Expire
                                  604800 )        ; Negative Cache TTL
          ;
          @       IN      NS      ns1.{{ domain_name }}.

          ; Wildcard for all Knative services
          *       IN      A       {{ secondary_ingress_ip }}

    # Create ConfigMaps for BIND9 configuration
    - name: Create temporary named.conf file
      ansible.builtin.copy:
        content: "{{ named_conf }}"
        dest: "/tmp/bind9-named.conf"
        mode: '0644'

    - name: Create temporary zones.conf file
      ansible.builtin.copy:
        content: "{{ zones_conf }}"
        dest: "/tmp/bind9-zones.conf"
        mode: '0644'

    - name: Create ConfigMap for BIND9 configuration
      ansible.builtin.shell: |
        {{ kubectl_bin }} create configmap bind9-config \
          --from-file=named.conf=/tmp/bind9-named.conf \
          --from-file=zones.conf=/tmp/bind9-zones.conf \
          -n {{ dns_namespace }} \
          --dry-run=client -o yaml | {{ kubectl_bin }} apply -f -
      register: create_bind9_config
      changed_when: "'created' in create_bind9_config.stdout or 'configured' in create_bind9_config.stdout"

    - name: Set zone file names
      ansible.builtin.set_fact:
        zone_file_main: "db.{{ domain_name }}"
        zone_file_kn: "db.kn.{{ domain_name }}"

    - name: Create temporary zone file for main domain
      ansible.builtin.copy:
        content: "{{ zone_main }}"
        dest: "/tmp/{{ zone_file_main }}"
        mode: '0644'

    - name: Create temporary zone file for Knative domain
      ansible.builtin.copy:
        content: "{{ zone_kn }}"
        dest: "/tmp/{{ zone_file_kn }}"
        mode: '0644'

    - name: Create ConfigMap for zone files
      ansible.builtin.shell: |
        {{ kubectl_bin }} create configmap bind9-zones \
          --from-file={{ zone_file_main }}=/tmp/{{ zone_file_main }} \
          --from-file={{ zone_file_kn }}=/tmp/{{ zone_file_kn }} \
          -n {{ dns_namespace }} \
          --dry-run=client -o yaml | {{ kubectl_bin }} apply -f -
      register: create_bind9_zones
      changed_when: "'created' in create_bind9_zones.stdout or 'configured' in create_bind9_zones.stdout"

    # Deploy BIND9 as a Deployment
    - name: Deploy BIND9 DNS server
      ansible.builtin.shell: |
        cat <<EOF | {{ kubectl_bin }} apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: bind9
          namespace: {{ dns_namespace }}
          labels:
            app: bind9
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: bind9
          template:
            metadata:
              labels:
                app: bind9
            spec:
              # Pin to control plane node where IPs are configured
              nodeSelector:
                kubernetes.io/hostname: {{ control_plane_hostname }}
              containers:
              - name: bind9
                image: {{ bind9_image_name }}
                imagePullPolicy: Never
                ports:
                - containerPort: 53
                  name: dns-tcp
                  protocol: TCP
                - containerPort: 53
                  name: dns-udp
                  protocol: UDP
                volumeMounts:
                - name: bind9-config
                  mountPath: /etc/bind/named.conf
                  subPath: named.conf
                - name: bind9-config
                  mountPath: /etc/bind/zones.conf
                  subPath: zones.conf
                - name: bind9-zones
                  mountPath: /etc/bind/zones
                - name: cache
                  mountPath: /var/cache/bind
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "100m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                livenessProbe:
                  exec:
                    command:
                    - /usr/bin/dig
                    - "@127.0.0.1"
                    - "+tcp"
                    - "google.com"
                  initialDelaySeconds: 30
                  periodSeconds: 30
                readinessProbe:
                  exec:
                    command:
                    - /usr/bin/dig
                    - "@127.0.0.1"
                    - "+tcp"
                    - "google.com"
                  initialDelaySeconds: 10
                  periodSeconds: 10
              volumes:
              - name: bind9-config
                configMap:
                  name: bind9-config
              - name: bind9-zones
                configMap:
                  name: bind9-zones
              - name: cache
                emptyDir: {}
        EOF
      register: deploy_bind9
      changed_when: "'created' in deploy_bind9.stdout or 'configured' in deploy_bind9.stdout"

    # Create LoadBalancer service for external DNS access
    - name: Create BIND9 LoadBalancer service
      ansible.builtin.shell: |
        cat <<EOF | {{ kubectl_bin }} apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: bind9-external
          namespace: {{ dns_namespace }}
          labels:
            app: bind9
        spec:
          type: LoadBalancer
          loadBalancerIP: {{ dns_external_ip }}
          selector:
            app: bind9
          ports:
          - name: dns-udp
            port: 53
            targetPort: 53
            protocol: UDP
          - name: dns-tcp
            port: 53
            targetPort: 53
            protocol: TCP
        EOF
      register: create_lb_service
      changed_when: "'created' in create_lb_service.stdout or 'configured' in create_lb_service.stdout"

    # Also create a ClusterIP service for internal use
    - name: Create BIND9 ClusterIP service
      ansible.builtin.shell: |
        cat <<EOF | {{ kubectl_bin }} apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: bind9-internal
          namespace: {{ dns_namespace }}
          labels:
            app: bind9
        spec:
          type: ClusterIP
          selector:
            app: bind9
          ports:
          - name: dns-udp
            port: 53
            targetPort: 53
            protocol: UDP
          - name: dns-tcp
            port: 53
            targetPort: 53
            protocol: TCP
        EOF
      register: create_clusterip_service
      changed_when: "'created' in create_clusterip_service.stdout or 'configured' in create_clusterip_service.stdout"

    - name: Wait for BIND9 deployment to be ready
      ansible.builtin.shell: |
        {{ kubectl_bin }} get deployment bind9 -n {{ dns_namespace }} -o json
      register: bind9_deployment_json
      until: (bind9_deployment_json.stdout | from_json).status.readyReplicas | default(0) == 1
      retries: 30
      delay: 10
      changed_when: false

    - name: Wait for LoadBalancer IP to be assigned
      ansible.builtin.shell: |
        {{ kubectl_bin }} get service bind9-external -n {{ dns_namespace }} -o json
      register: lb_service_json
      until: (lb_service_json.stdout | from_json).status.loadBalancer.ingress is defined
      retries: 30
      delay: 10
      changed_when: false

    - name: Wait for BIND9 pod to be ready
      ansible.builtin.command: >
        {{ kubectl_bin }} wait --for=condition=Ready pod -l app=bind9 -n {{ dns_namespace }} --timeout=60s
      changed_when: false

    - name: Get BIND9 pod name
      ansible.builtin.shell: |
        {{ kubectl_bin }} get pods -n {{ dns_namespace }} -l app=bind9 -o jsonpath='{.items[0].metadata.name}'
      register: bind9_pod_name_result
      changed_when: false

    - name: Set BIND9 pod name
      ansible.builtin.set_fact:
        bind9_pod_name: "{{ bind9_pod_name_result.stdout }}"

    - name: Test DNS resolution from BIND9 pod
      ansible.builtin.command: >
        {{ kubectl_bin }} exec -n {{ dns_namespace }} {{ bind9_pod_name }}
        -- dig @127.0.0.1 google.com +short
      register: dns_test
      changed_when: false
      failed_when: dns_test.rc != 0 or dns_test.stdout == ""

    - name: Display DNS test result
      ansible.builtin.debug:
        msg: "DNS resolution test for google.com: {{ dns_test.stdout }}"

    - name: Clean up temporary configuration files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/bind9-named.conf"
        - "/tmp/bind9-zones.conf"
        - "/tmp/{{ zone_file_main }}"
        - "/tmp/{{ zone_file_kn }}"

    - name: Display summary message
      ansible.builtin.debug:
        msg: |
          BIND9 DNS Server has been successfully deployed!

          External DNS Service: {{ dns_external_ip }}:53
          Internal Service: bind9-internal.{{ dns_namespace }}.svc.cluster.local

          Configured zones:
          - {{ domain_name }} (wildcard ‚Üí {{ primary_ingress_ip }})
          - kn.{{ domain_name }} (wildcard ‚Üí {{ secondary_ingress_ip }})

          External forwarding to: 8.8.8.8, 8.8.4.4

          To test DNS resolution:
          dig @{{ dns_external_ip }} test.{{ domain_name }}
          dig @{{ dns_external_ip }} google.com

          Next step: Update nodes to use this DNS server
