---
# ansible/40_thinkube/core/custom-images/10_build_jupyter_images.yaml
# Description:
#   Builds custom Jupyter Docker images and pushes to Harbor
#   Separated from JupyterHub deployment for fast iteration
#   Updates thinkube-control database after successful builds
#
# Requirements:
#   - Harbor registry must be running
#   - Podman must be available
#   - Build takes 20+ minutes (run separately from deployment)
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/custom-images/10_build_jupyter_images.yaml
#
# Variables from inventory:
#   - harbor_registry: Harbor registry URL
#   - harbor_admin_password: Harbor admin password
#
# ðŸ¤– AI-assisted

- name: Build Custom Jupyter Images
  hosts: microk8s_control_plane
  gather_facts: true
  vars:
    build_dir: /tmp/jupyter-images-build
    images_to_build:
      - name: jupyter-ml-cpu
        display_name: "ML Development (CPU)"
        description: "JupyterLab with standard ML packages"
        gpu_required: false
        cpu_limit: 4
        mem_limit: "8G"
        default: true
      - name: jupyter-ml-gpu
        display_name: "Deep Learning (GPU)"
        description: "JupyterLab with PyTorch and GPU support"
        gpu_required: true
        cpu_limit: 8
        mem_limit: "16G"
        default: false
      - name: jupyter-agent-dev
        display_name: "Agent Development"
        description: "LangChain, CrewAI, and agent frameworks"
        gpu_required: false
        cpu_limit: 4
        mem_limit: "8G"
        default: false
      - name: jupyter-fine-tuning
        display_name: "Fine-tuning (Unsloth)"
        description: "Optimized for LLM fine-tuning with QLoRA"
        gpu_required: true
        cpu_limit: 8
        mem_limit: "32G"
        default: false

  tasks:
    # Step 1: Verify Harbor is accessible
    - name: Verify Harbor is accessible
      ansible.builtin.uri:
        url: "https://{{ harbor_registry }}/api/v2.0/health"
        method: GET
        validate_certs: false
        timeout: 10
      register: harbor_health
      failed_when: harbor_health.status != 200

    # Step 2: Login to Harbor registry
    - name: Login to Harbor registry
      ansible.builtin.command:
        cmd: podman login {{ harbor_registry }} -u admin -p {{ harbor_admin_password }} --tls-verify=false
      changed_when: true
      no_log: true

    # Step 3: Create build directory
    - name: Create build directory
      ansible.builtin.file:
        path: "{{ build_dir }}/{{ item.name }}"
        state: directory
        mode: '0755'
      loop: "{{ images_to_build }}"

    # Step 4: Copy Dockerfiles and requirements
    - name: Copy Dockerfile for each image
      ansible.builtin.copy:
        src: "images/{{ item.name }}/Dockerfile"
        dest: "{{ build_dir }}/{{ item.name }}/Dockerfile"
        mode: '0644'
      loop: "{{ images_to_build }}"

    - name: Copy requirements.txt for each image
      ansible.builtin.copy:
        src: "images/{{ item.name }}/requirements.txt"
        dest: "{{ build_dir }}/{{ item.name }}/requirements.txt"
        mode: '0644'
      loop: "{{ images_to_build }}"

    # Step 5: Build images sequentially (to avoid WebSocket chunk issues)
    - name: Build jupyter-ml-cpu image
      ansible.builtin.shell: |
        cd {{ build_dir }}/jupyter-ml-cpu
        podman build \
          --quiet \
          --no-cache \
          -f Dockerfile \
          -t {{ harbor_registry }}/library/jupyter-ml-cpu:latest \
          --build-arg HARBOR_REGISTRY={{ harbor_registry }} \
          . 2>&1 | tail -100
      register: build_cpu
      changed_when: true

    - name: Push jupyter-ml-cpu image
      ansible.builtin.command:
        cmd: podman push {{ harbor_registry }}/library/jupyter-ml-cpu:latest --tls-verify=false
      changed_when: true

    - name: Build jupyter-ml-gpu image
      ansible.builtin.shell: |
        cd {{ build_dir }}/jupyter-ml-gpu
        podman build \
          --quiet \
          --no-cache \
          -f Dockerfile \
          -t {{ harbor_registry }}/library/jupyter-ml-gpu:latest \
          --build-arg HARBOR_REGISTRY={{ harbor_registry }} \
          . 2>&1 | tail -100
      register: build_gpu
      changed_when: true

    - name: Push jupyter-ml-gpu image
      ansible.builtin.command:
        cmd: podman push {{ harbor_registry }}/library/jupyter-ml-gpu:latest --tls-verify=false
      changed_when: true

    - name: Build jupyter-agent-dev image
      ansible.builtin.shell: |
        cd {{ build_dir }}/jupyter-agent-dev
        podman build \
          --quiet \
          --no-cache \
          -f Dockerfile \
          -t {{ harbor_registry }}/library/jupyter-agent-dev:latest \
          --build-arg HARBOR_REGISTRY={{ harbor_registry }} \
          . 2>&1 | tail -100
      register: build_agent
      changed_when: true

    - name: Push jupyter-agent-dev image
      ansible.builtin.command:
        cmd: podman push {{ harbor_registry }}/library/jupyter-agent-dev:latest --tls-verify=false
      changed_when: true

    - name: Build jupyter-fine-tuning image
      ansible.builtin.shell: |
        cd {{ build_dir }}/jupyter-fine-tuning
        podman build \
          --quiet \
          --no-cache \
          -f Dockerfile \
          -t {{ harbor_registry }}/library/jupyter-fine-tuning:latest \
          --build-arg HARBOR_REGISTRY={{ harbor_registry }} \
          . 2>&1 | tail -100
      register: build_finetuning
      changed_when: true

    - name: Push jupyter-fine-tuning image
      ansible.builtin.command:
        cmd: podman push {{ harbor_registry }}/library/jupyter-fine-tuning:latest --tls-verify=false
      changed_when: true

    # Step 6: Update thinkube-control database (when API is available)
    - name: Update thinkube-control with image metadata
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:30080/api/v1/images"
        method: POST
        body_format: json
        body:
          name: "{{ item.name }}"
          display_name: "{{ item.display_name }}"
          description: "{{ item.description }}"
          category: "jupyter"
          tags: ["jupyter-compatible"]
          metadata:
            gpu_required: "{{ item.gpu_required }}"
            cpu_limit: "{{ item.cpu_limit }}"
            mem_limit: "{{ item.mem_limit }}"
            default: "{{ item.default }}"
        status_code: [200, 201]
        timeout: 10
      loop: "{{ images_to_build }}"
      ignore_errors: true  # Don't fail if API endpoint doesn't exist yet
      register: api_update

    # Step 7: Clean up build directory
    - name: Clean up build directory
      ansible.builtin.file:
        path: "{{ build_dir }}"
        state: absent

    # Step 8: Display summary
    - name: Display build summary
      ansible.builtin.debug:
        msg:
          - "========================================="
          - "Jupyter Image Build Complete!"
          - "========================================="
          - "Images built and pushed to Harbor:"
          - "  - jupyter-ml-cpu:latest"
          - "  - jupyter-ml-gpu:latest"
          - "  - jupyter-agent-dev:latest"
          - "  - jupyter-fine-tuning:latest"
          - ""
          - "Registry: {{ harbor_registry }}/library/"
          - "API update: {{ 'SUCCESS' if api_update.results[0].status == 200 else 'API endpoint not yet available' }}"
          - ""
          - "Note: This build process takes 20+ minutes"
          - "JupyterHub deployment takes only 2 minutes"
          - "========================================="