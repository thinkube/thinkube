# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/core/harbor/14_build_base_images.yaml
# Description:
#   Build and push optimized base images to Harbor library project
#   These images contain common dependencies to speed up builds
#
# Requirements:
#   - Harbor registry deployed and accessible
#   - Podman installed on the MicroK8s control plane node
#   - Harbor admin credentials
#   - Base images mirrored to Harbor (13_mirror_public_images.yaml must run first)
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/core/harbor/14_build_base_images.yaml
#
# Variables from inventory:
#   - harbor_registry: Harbor registry hostname
#   - admin_password: Admin password from environment
#
# Dependencies:
#   - CORE-008: Harbor deployed
#
# 🤖 [AI-assisted]

- name: Build and Push Base Images to Harbor
  hosts: microk8s_control_plane
  gather_facts: true
  
  vars:
    local_base_images_dir: "{{ playbook_dir }}/base-images"
    base_images_dir: "/tmp/harbor-base-images"
    admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default(lookup('env', 'ANSIBLE_BECOME_PASSWORD'), true) }}"
    
  tasks:
    - name: Install podman (ensure it's available)
      ansible.builtin.apt:
        name: podman
        state: present
        update_cache: yes
      become: true
      when: ansible_os_family == "Debian"
      
      
    - name: Ensure library project exists in Harbor
      ansible.builtin.uri:
        url: "https://{{ harbor_registry }}/api/v2.0/projects"
        method: POST
        headers:
          Authorization: "Basic {{ ('admin:' + admin_password) | b64encode }}"
        body_format: json
        body:
          project_name: "library"
          public: true
          metadata:
            public: "true"
        validate_certs: true
        status_code: [201, 409]
      register: library_project
      
    - name: Create build context directory
      ansible.builtin.file:
        path: "{{ base_images_dir }}"
        state: directory
        mode: '0755'
      
    - name: Create temp directory for templated Dockerfiles
      ansible.builtin.tempfile:
        state: directory
        suffix: harbor-dockerfiles
      register: temp_dockerfiles_dir

    - name: Template Python base Dockerfile
      ansible.builtin.template:
        src: "{{ local_base_images_dir }}/python-base.Dockerfile.j2"
        dest: "{{ temp_dockerfiles_dir.path }}/python-base.Dockerfile"
    
    - name: Build Python base image
      ansible.builtin.shell: |
        podman build --tls-verify=true \
                     -t {{ harbor_registry }}/library/python-base:3.12-slim \
                     -t {{ harbor_registry }}/library/python-base:latest \
                     -f {{ temp_dockerfiles_dir.path }}/python-base.Dockerfile \
                     {{ base_images_dir }}
      register: python_build
      changed_when: true
      
    - name: Template Node.js 18 base Dockerfile
      ansible.builtin.template:
        src: "{{ local_base_images_dir }}/node-base.Dockerfile.j2"
        dest: "{{ temp_dockerfiles_dir.path }}/node-base.Dockerfile"
    
    - name: Build Node.js 18 base image
      ansible.builtin.shell: |
        podman build --tls-verify=true \
                     -t {{ harbor_registry }}/library/node-base:18-alpine \
                     -f {{ temp_dockerfiles_dir.path }}/node-base.Dockerfile \
                     {{ base_images_dir }}
      register: node18_build
      changed_when: true
      
    - name: Template Node.js 22 base Dockerfile
      ansible.builtin.template:
        src: "{{ local_base_images_dir }}/node-base-22.Dockerfile.j2"
        dest: "{{ temp_dockerfiles_dir.path }}/node-base-22.Dockerfile"
    
    - name: Build Node.js 22 base image
      ansible.builtin.shell: |
        podman build --tls-verify=true \
                     -t {{ harbor_registry }}/library/node-base:22-alpine \
                     -t {{ harbor_registry }}/library/node-base:latest \
                     -f {{ temp_dockerfiles_dir.path }}/node-base-22.Dockerfile \
                     {{ base_images_dir }}
      register: node22_build
      changed_when: true
      
    - name: Template test-runner Dockerfile
      ansible.builtin.template:
        src: "{{ local_base_images_dir }}/test-runner.Dockerfile.j2"
        dest: "{{ temp_dockerfiles_dir.path }}/test-runner.Dockerfile"
    
    - name: Build test-runner image
      ansible.builtin.shell: |
        podman build --tls-verify=true \
                     -t {{ harbor_registry }}/library/test-runner:latest \
                     -f {{ temp_dockerfiles_dir.path }}/test-runner.Dockerfile \
                     {{ base_images_dir }}
      register: test_runner_build
      changed_when: true
      
    - name: Template ci-utils Dockerfile
      ansible.builtin.template:
        src: "{{ local_base_images_dir }}/ci-utils.Dockerfile.j2"
        dest: "{{ temp_dockerfiles_dir.path }}/ci-utils.Dockerfile"
    
    - name: Build ci-utils image
      ansible.builtin.shell: |
        podman build --tls-verify=true \
                     -t {{ harbor_registry }}/library/ci-utils:latest \
                     -t {{ harbor_registry }}/library/ci-utils:alpine \
                     -f {{ temp_dockerfiles_dir.path }}/ci-utils.Dockerfile \
                     {{ base_images_dir }}
      register: ci_utils_build
      changed_when: true
      
    - name: Login to Harbor
      ansible.builtin.shell: |
        echo {{ admin_password }} | podman login {{ harbor_registry }} -u admin --password-stdin --tls-verify=true
      changed_when: false
      no_log: true
      
    - name: Push Python base images
      ansible.builtin.shell: |
        podman push --tls-verify=true {{ harbor_registry }}/library/python-base:{{ item }}
      loop:
        - "3.12-slim"
        - "latest"
      register: python_push
      changed_when: true
      
    - name: Push Node.js base images
      ansible.builtin.shell: |
        podman push --tls-verify=true {{ harbor_registry }}/library/node-base:{{ item }}
      loop:
        - "18-alpine"
        - "22-alpine"
        - "latest"
      register: node_push
      changed_when: true
      
    - name: Push test-runner image
      ansible.builtin.shell: |
        podman push --tls-verify=true {{ harbor_registry }}/library/test-runner:latest
      register: test_runner_push
      changed_when: true
      
    - name: Push ci-utils images
      ansible.builtin.shell: |
        podman push --tls-verify=true {{ harbor_registry }}/library/ci-utils:{{ item }}
      loop:
        - "latest"
        - "alpine"
      register: ci_utils_push
      changed_when: true
      
    - name: Template AI inference base Dockerfile
      ansible.builtin.template:
        src: "{{ local_base_images_dir }}/ai-inference-base.Dockerfile.j2"
        dest: "{{ temp_dockerfiles_dir.path }}/ai-inference-base.Dockerfile"
    
    - name: Build AI inference base image
      ansible.builtin.shell: |
        podman build --tls-verify=true \
                     -t {{ harbor_registry }}/library/ai-inference-base:12.4-ubuntu24.04 \
                     -t {{ harbor_registry }}/library/ai-inference-base:latest \
                     -f {{ temp_dockerfiles_dir.path }}/ai-inference-base.Dockerfile \
                     {{ base_images_dir }}
      register: ai_inference_build
      changed_when: true
      
    - name: Push AI inference base images
      ansible.builtin.shell: |
        podman push --tls-verify=true {{ harbor_registry }}/library/ai-inference-base:{{ item }}
      loop:
        - "12.4-ubuntu24.04"
        - "latest"
      register: ai_inference_push
      changed_when: true
      
    - name: Clean up temp dockerfiles directory
      ansible.builtin.file:
        path: "{{ temp_dockerfiles_dir.path }}"
        state: absent
      when: temp_dockerfiles_dir.path is defined
      
    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          
          ════════════════════════════════════════════════════════
          ✅ Base Images Built and Pushed Successfully
          ════════════════════════════════════════════════════════
          
          Python base: {{ harbor_registry }}/library/python-base:3.12-slim
          Node.js 18 base: {{ harbor_registry }}/library/node-base:18-alpine
          Node.js 22 base: {{ harbor_registry }}/library/node-base:22-alpine
          Test runner: {{ harbor_registry }}/library/test-runner:latest
          CI utils: {{ harbor_registry }}/library/ci-utils:latest
          AI inference: {{ harbor_registry }}/library/ai-inference-base:latest
          
          These images contain common dependencies and will speed up:
          - Test execution (dependencies pre-installed)
          - Build times (less to download/install)
          - Overall CI/CD pipeline performance
          - CI/CD operations (curl, jq, etc pre-installed)
          
          Run this playbook periodically to update base dependencies.
          ════════════════════════════════════════════════════════