# Copyright 2025 Alejandro MartÃ­nez CorriÃ¡ and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/optional/superset/11_deploy.yaml
# Description:
#   Deploy Apache Superset using official Helm chart
#
# This playbook:
#   1. Creates superset namespace
#   2. Creates database in PostgreSQL
#   3. Copies wildcard TLS certificate
#   4. Processes Helm values template with Thinkube-specific configuration
#   5. Deploys Superset using Helm chart
#
# Requirements:
#   - MicroK8s must be installed and running
#   - PostgreSQL deployed (core component)
#   - Valkey deployed (optional component)
#   - Wildcard TLS certificate in default namespace
#
# Usage:
#   cd ~/thinkube
#   ./scripts/tk_ansible ansible/40_thinkube/optional/superset/11_deploy.yaml
#
# Variables from inventory:
#   - kubeconfig: Path to kubeconfig file
#   - domain_name: Base domain (e.g., thinkube.com)
#   - admin_username: Admin user for Superset
#   - admin_password: Admin password (from ADMIN_PASSWORD env var)
#   - postgres_hostname: PostgreSQL hostname
#
# ðŸ¤– AI-assisted

- name: Deploy Apache Superset
  hosts: k8s_control_plane
  gather_facts: true

  vars:
    superset_namespace: "superset"
    superset_app_name: "superset"
    superset_hostname: "superset.{{ domain_name }}"
    superset_tls_secret_name: "{{ superset_namespace }}-tls-secret"
    superset_release_name: "superset"
    superset_chart_repo: "https://apache.github.io/superset"
    superset_chart_version: ""  # Empty means latest

    # Database configuration
    admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default(lookup('env', 'ANSIBLE_BECOME_PASSWORD'), true) }}"
    superset_db_name: "superset"
    superset_db_user: "{{ admin_username }}"
    superset_db_password: "{{ admin_password }}"
    postgres_service: "postgresql-official.postgres.svc.cluster.local"
    postgres_port: 5432
    postgres_admin_user: "{{ admin_username }}"
    postgres_admin_password: "{{ admin_password }}"

    # Valkey configuration (use existing deployment)
    valkey_service: "valkey.valkey.svc.cluster.local"
    valkey_port: 6379

    # Superset configuration
    superset_secret_key: "{{ lookup('password', '/dev/null length=42 chars=ascii_letters,digits') }}"

  tasks:
    - name: Create namespace for Superset
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        name: "{{ superset_namespace }}"
        kind: Namespace
        state: present

    ###########################################################################
    # Database setup
    ###########################################################################
    - name: Check if Superset database exists
      ansible.builtin.shell: |
        PGPASSWORD="{{ postgres_admin_password }}" psql -h {{ postgres_hostname }} -p 5432 -U {{ postgres_admin_user }} -d postgres -c "
        SELECT datname FROM pg_database WHERE datname = '{{ superset_db_name }}';
        "
      register: db_check
      become: true
      changed_when: false

    - name: Create Superset database if it doesn't exist
      ansible.builtin.shell: |
        PGPASSWORD="{{ postgres_admin_password }}" psql -h {{ postgres_hostname }} -p 5432 -U {{ postgres_admin_user }} -d postgres -c "
        CREATE DATABASE {{ superset_db_name }};
        "
      register: db_create
      become: true
      when: db_check.stdout.find(superset_db_name) == -1
      changed_when: db_create.rc == 0

    - name: Grant privileges to admin user on Superset database
      ansible.builtin.shell: |
        PGPASSWORD="{{ postgres_admin_password }}" psql -h {{ postgres_hostname }} -p 5432 -U {{ postgres_admin_user }} -d postgres -c "
        GRANT ALL PRIVILEGES ON DATABASE {{ superset_db_name }} TO {{ superset_db_user }};
        "
      register: grant_privileges
      become: true
      changed_when: false

    ###########################################################################
    # TLS certificate
    ###########################################################################
    - name: Get wildcard certificate from default namespace
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: default
        name: "{{ domain_name.replace('.', '-') }}-tls"
      register: wildcard_cert
      failed_when: wildcard_cert.resources | length == 0

    - name: Copy wildcard certificate to Superset namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ superset_tls_secret_name }}"
            namespace: "{{ superset_namespace }}"
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ wildcard_cert.resources[0].data['tls.crt'] }}"
            tls.key: "{{ wildcard_cert.resources[0].data['tls.key'] }}"

    ###########################################################################
    # Helm deployment
    ###########################################################################
    - name: Create temp directory for Helm values
      ansible.builtin.tempfile:
        state: directory
        suffix: superset-helm
      register: temp_helm_dir

    - name: Template Helm values file
      ansible.builtin.template:
        src: values-thinkube.yaml
        dest: "{{ temp_helm_dir.path }}/values.yaml"
        mode: '0644'

    - name: Add Superset Helm repo
      ansible.builtin.shell: |
        microk8s helm3 repo add superset {{ superset_chart_repo }}
        microk8s helm3 repo update
      become: true

    - name: Deploy Superset with Helm
      ansible.builtin.shell: |
        microk8s helm3 upgrade --install {{ superset_release_name }} superset/superset \
          --namespace {{ superset_namespace }} \
          {% if superset_chart_version %}--version {{ superset_chart_version }} \{% endif %}
          --values {{ temp_helm_dir.path }}/values.yaml \
          --wait \
          --timeout 10m
      become: true
      register: helm_deploy

    - name: Clean up temp directory
      ansible.builtin.file:
        path: "{{ temp_helm_dir.path }}"
        state: absent

    - name: Wait for Superset pod to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ superset_namespace }}"
        kind: Pod
        label_selectors:
          - "app=superset"
      register: superset_pods
      until: >
        superset_pods.resources | length > 0 and
        superset_pods.resources[0].status.phase == 'Running' and
        (superset_pods.resources[0].status.containerStatuses | selectattr('name', 'equalto', 'superset') | first).ready == true
      retries: 30
      delay: 10

    - name: Deployment complete
      ansible.builtin.debug:
        msg:
          - "Apache Superset deployed successfully using Helm!"
          - "URL: https://{{ superset_hostname }}"
          - "Admin Username: {{ admin_username }}"
          - "Admin Password: {{ admin_password }}"
          - ""
          - "Database: PostgreSQL at {{ postgres_service }}"
          - "Cache: Valkey at {{ valkey_service }}"
          - ""
          - "Next steps:"
          - "1. Configure Keycloak SSO (12_configure_keycloak.yaml)"
          - "2. Add data sources (13_configure_datasources.yaml)"
          - "3. Run tests (18_test.yaml)"
