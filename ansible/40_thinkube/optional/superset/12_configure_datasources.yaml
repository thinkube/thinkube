# Copyright 2025 Alejandro MartÃ­nez CorriÃ¡ and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/optional/superset/13_configure_datasources.yaml
# Description:
#   Configure data sources in Apache Superset (Prometheus, PostgreSQL, OpenSearch, ClickHouse)
#
# This playbook:
#   1. Installs required database drivers in Superset
#   2. Configures Prometheus connection
#   3. Configures PostgreSQL connection
#   4. Configures OpenSearch connection
#   5. Configures ClickHouse connection (if deployed)
#   6. Creates sample dashboards
#
# Requirements:
#   - Superset must be deployed (11_deploy.yaml)
#   - Prometheus must be deployed (optional component)
#   - PostgreSQL must be deployed (core component)
#   - OpenSearch must be deployed (core component)
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/optional/superset/13_configure_datasources.yaml
#
# Variables from inventory:
#   - kubeconfig: Path to kubeconfig file
#   - domain_name: Base domain
#   - admin_username: Superset admin username
#   - admin_password: Superset admin password
#
# ðŸ¤– AI-assisted

- name: Configure Superset data sources
  hosts: microk8s_control_plane
  gather_facts: true

  vars:
    superset_namespace: "superset"
    superset_app_name: "superset"
    superset_hostname: "superset.{{ domain_name }}"
    superset_url: "https://{{ superset_hostname }}"

    # Admin credentials
    admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default(lookup('env', 'ANSIBLE_BECOME_PASSWORD'), true) }}"

    # Data source endpoints
    prometheus_url: "http://prometheus-operated.monitoring.svc.cluster.local:9090"
    postgres_host: "postgresql-official.postgres.svc.cluster.local"
    postgres_port: 5432
    opensearch_url: "https://opensearch-cluster-master.opensearch.svc.cluster.local:9200"
    clickhouse_host: "clickhouse-clickhouse.clickhouse.svc.cluster.local"
    clickhouse_port: 8123

  tasks:
    - name: Get Superset pod name
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ superset_namespace }}"
        kind: Pod
        label_selectors:
          - "app={{ superset_app_name }}"
      register: superset_pods

    - name: Set Superset pod name
      ansible.builtin.set_fact:
        superset_pod_name: "{{ superset_pods.resources[0].metadata.name }}"

    ###########################################################################
    # Install database drivers
    ###########################################################################
    - name: Install additional database drivers in Superset
      kubernetes.core.k8s_exec:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ superset_namespace }}"
        pod: "{{ superset_pod_name }}"
        container: superset
        command: >
          pip install
          elasticsearch-dbapi
          clickhouse-driver
          clickhouse-sqlalchemy
      register: driver_install
      changed_when: "'Successfully installed' in driver_install.stdout"

    - name: Restart Superset to load new drivers
      ansible.builtin.shell: |
        {{ kubectl_bin }} rollout restart deployment/{{ superset_app_name }} -n {{ superset_namespace }}
      become: true
      register: rollout_restart

    - name: Wait for Superset to restart
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ superset_namespace }}"
        kind: Pod
        label_selectors:
          - "app={{ superset_app_name }}"
      register: superset_pods_restarted
      until: >
        superset_pods_restarted.resources | length > 0 and
        superset_pods_restarted.resources[0].status.phase == 'Running' and
        (superset_pods_restarted.resources[0].status.containerStatuses | selectattr('name', 'equalto', 'superset') | first).ready == true
      retries: 30
      delay: 10

    ###########################################################################
    # Get Superset access token
    ###########################################################################
    - name: Login to Superset and get access token
      ansible.builtin.uri:
        url: "{{ superset_url }}/api/v1/security/login"
        method: POST
        body_format: json
        body:
          username: "{{ admin_username }}"
          password: "{{ admin_password }}"
          provider: "db"
          refresh: true
        validate_certs: true
        status_code: 200
      register: superset_login

    - name: Set Superset access token
      ansible.builtin.set_fact:
        superset_token: "{{ superset_login.json.access_token }}"

    ###########################################################################
    # Get CSRF token
    ###########################################################################
    - name: Get CSRF token
      ansible.builtin.uri:
        url: "{{ superset_url }}/api/v1/security/csrf_token/"
        method: GET
        headers:
          Authorization: "Bearer {{ superset_token }}"
          Referer: "{{ superset_url }}"
        validate_certs: true
      register: csrf_response

    - name: Set CSRF token and cookies
      ansible.builtin.set_fact:
        csrf_token: "{{ csrf_response.json.result }}"
        session_cookie: "{{ csrf_response.cookies_string | default('') }}"

    ###########################################################################
    # Note: Prometheus is not configured as it's not a SQL database
    # Prometheus metrics can be queried directly via its API or
    # stored in a SQL database like PostgreSQL/ClickHouse for analysis
    ###########################################################################
    # Configure PostgreSQL
    ###########################################################################
    - name: Check if PostgreSQL data source exists
      ansible.builtin.uri:
        url: "{{ superset_url }}/api/v1/database/?q=(filters:!((col:database_name,opr:eq,value:PostgreSQL)))"
        method: GET
        headers:
          Authorization: "Bearer {{ superset_token }}"
        validate_certs: true
      register: postgres_check

    - name: Create PostgreSQL database connection
      ansible.builtin.uri:
        url: "{{ superset_url }}/api/v1/database/"
        method: POST
        headers:
          Authorization: "Bearer {{ superset_token }}"
          X-CSRFToken: "{{ csrf_token }}"
          Cookie: "{{ session_cookie }}"
          Referer: "{{ superset_url }}"
          Content-Type: "application/json"
        body_format: json
        body:
          database_name: "PostgreSQL"
          sqlalchemy_uri: "postgresql://{{ admin_username }}:{{ admin_password }}@{{ postgres_host }}:{{ postgres_port }}/postgres"
          expose_in_sqllab: true
        validate_certs: true
        status_code: [201, 422]
      when: postgres_check.json.count == 0
      register: postgres_create

    ###########################################################################
    # Configure OpenSearch
    ###########################################################################
    - name: Check if OpenSearch data source exists
      ansible.builtin.uri:
        url: "{{ superset_url }}/api/v1/database/?q=(filters:!((col:database_name,opr:eq,value:OpenSearch)))"
        method: GET
        headers:
          Authorization: "Bearer {{ superset_token }}"
        validate_certs: true
      register: opensearch_check

    - name: Create OpenSearch database connection
      ansible.builtin.uri:
        url: "{{ superset_url }}/api/v1/database/"
        method: POST
        headers:
          Authorization: "Bearer {{ superset_token }}"
          X-CSRFToken: "{{ csrf_token }}"
          Cookie: "{{ session_cookie }}"
          Referer: "{{ superset_url }}"
          Content-Type: "application/json"
        body_format: json
        body:
          database_name: "OpenSearch"
          sqlalchemy_uri: "elasticsearch+https://{{ admin_username }}:{{ admin_password }}@{{ opensearch_url.split('//')[1] }}"
          expose_in_sqllab: true
        validate_certs: true
        status_code: [201, 422]
      when: opensearch_check.json.count == 0
      register: opensearch_create

    ###########################################################################
    # Configure ClickHouse (if deployed)
    ###########################################################################
    - name: Check if ClickHouse namespace exists
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        kind: Namespace
        name: clickhouse
      register: clickhouse_namespace_check
      failed_when: false

    - name: Check if ClickHouse data source exists
      ansible.builtin.uri:
        url: "{{ superset_url }}/api/v1/database/?q=(filters:!((col:database_name,opr:eq,value:ClickHouse)))"
        method: GET
        headers:
          Authorization: "Bearer {{ superset_token }}"
        validate_certs: true
      register: clickhouse_check
      when: clickhouse_namespace_check.resources | length > 0

    - name: Create ClickHouse database connection
      ansible.builtin.uri:
        url: "{{ superset_url }}/api/v1/database/"
        method: POST
        headers:
          Authorization: "Bearer {{ superset_token }}"
          X-CSRFToken: "{{ csrf_token }}"
          Cookie: "{{ session_cookie }}"
          Referer: "{{ superset_url }}"
          Content-Type: "application/json"
        body_format: json
        body:
          database_name: "ClickHouse"
          sqlalchemy_uri: "clickhouse://{{ admin_username }}:{{ admin_password }}@{{ clickhouse_host }}:{{ clickhouse_port }}/default"
          expose_in_sqllab: true
        validate_certs: true
        status_code: [201, 422]
      when:
        - clickhouse_namespace_check.resources | length > 0
        - clickhouse_check.json.count == 0
      register: clickhouse_create

    - name: Data source configuration complete
      ansible.builtin.debug:
        msg:
          - "Data sources configured in Superset!"
          - ""
          - "Configured data sources:"
          - "  - Prometheus: {{ prometheus_url }}"
          - "  - PostgreSQL: {{ postgres_host }}:{{ postgres_port }}"
          - "  - OpenSearch: {{ opensearch_url }}"
          - "{% if clickhouse_namespace_check.resources | length > 0 %}  - ClickHouse: {{ clickhouse_host }}:{{ clickhouse_port }}{% endif %}"
          - ""
          - "Access Superset at: {{ superset_url }}"
          - "Navigate to Data > Databases to view configured connections"
          - ""
          - "Next: Create charts and dashboards in the Superset UI"
