"""
Custom Django RemoteUserMiddleware for CVAT OAuth2 Proxy Integration

This middleware enables seamless SSO by:
1. Reading X-Auth-Request-Email header from OAuth2 proxy
2. Auto-creating users if they don't exist
3. Auto-authenticating users based on email header
4. Providing zero-friction authentication experience

Generated by Thinkube deployment automation
"""

from django.contrib.auth.backends import RemoteUserBackend
from django.contrib.auth.middleware import RemoteUserMiddleware
from django.contrib.auth import get_user_model

User = get_user_model()


class OAuth2ProxyRemoteUserMiddleware(RemoteUserMiddleware):
    """
    Middleware that authenticates users based on OAuth2 proxy headers.
    Reads X-Auth-Request-Email from OAuth2 proxy and sets REMOTE_USER.
    """
    header = 'HTTP_X_AUTH_REQUEST_EMAIL'
    force_logout_if_no_header = False

    def process_request(self, request):
        # Get email from OAuth2 proxy header
        email = request.META.get(self.header)

        if email:
            # Use email as the remote user identifier
            request.META['REMOTE_USER'] = email

        # Call parent process_request to handle authentication
        return super().process_request(request)


class OAuth2ProxyRemoteUserBackend(RemoteUserBackend):
    """
    Authentication backend that creates users from OAuth2 proxy headers.
    Auto-creates users with email from X-Auth-Request-Email header.
    """

    def authenticate(self, request, remote_user):
        """
        Authenticate user based on email from OAuth2 proxy.
        Auto-create user if doesn't exist.
        """
        if not remote_user:
            return None

        email = remote_user

        # Extract username from email (part before @)
        username = email.split('@')[0] if '@' in email else email

        # Try to find user by email first
        user = None
        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            # Try to find by username
            try:
                user = User.objects.get(username=username)
            except User.DoesNotExist:
                # Create new user with email from OAuth2 proxy
                user = User.objects.create_user(
                    username=username,
                    email=email,
                    first_name=username.capitalize(),
                )
                # Set unusable password since authentication is via SSO
                user.set_unusable_password()
                user.save()

        return user

    def configure_user(self, request, user):
        """
        Configure a user after creation.
        Sets first name from username if not already set.
        """
        # Get additional info from OAuth2 proxy headers if available
        user_name = request.META.get('HTTP_X_AUTH_REQUEST_USER', user.username)

        if not user.first_name:
            user.first_name = user_name.capitalize()
            user.save()

        return user