---
# ansible/40_thinkube/optional/argilla/10_deploy.yaml
# Description:
#   Deploy Argilla data annotation platform on Kubernetes
#   Provides NLP/LLM data curation and annotation capabilities
#
# Requirements:
#   - MicroK8s must be installed and running
#   - Harbor registry must be available
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/optional/argilla/10_deploy.yaml
#
# Variables from inventory:
#   - domain_name: Base domain for the cluster
#   - kubeconfig: Path to kubeconfig file
#   - harbor_registry: Harbor registry URL
#   - admin_username: Admin username
#   - admin_password: Admin password
#
# ðŸ¤– [AI-generated]

- name: Deploy Argilla on Kubernetes
  hosts: microk8s_control_plane
  gather_facts: true

  vars:
    argilla_namespace: argilla
    argilla_image: "{{ harbor_registry }}/{{ library_project | default('library') }}/argilla:latest"
    elasticsearch_image: "{{ harbor_registry }}/{{ library_project | default('library') }}/elasticsearch:8.12.2"
    oauth2_proxy_image: "{{ harbor_registry }}/{{ library_project | default('library') }}/oauth2-proxy:latest"
    argilla_hostname: "argilla.{{ domain_name }}"

  tasks:
    - name: Verify required variables are defined
      ansible.builtin.assert:
        that:
          - domain_name is defined
          - kubeconfig is defined
          - harbor_registry is defined
          - admin_username is defined
          - admin_password is defined
        fail_msg: "Required variables are not defined. Please check your inventory."

    - name: Create Argilla namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        name: "{{ argilla_namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: Generate random API key for Argilla
      ansible.builtin.set_fact:
        argilla_api_key: "argilla.apikey.{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"

    - name: Create Argilla secrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: argilla-secrets
            namespace: "{{ argilla_namespace }}"
          type: Opaque
          stringData:
            ARGILLA_API_KEY: "{{ argilla_api_key }}"
            DEFAULT_USER_ENABLED: "true"
            DEFAULT_USER_USERNAME: "{{ admin_username }}"
            DEFAULT_USER_PASSWORD: "{{ admin_password }}"
            DEFAULT_USER_API_KEY: "{{ argilla_api_key }}"
            OAUTH2_PROXY_CLIENT_SECRET: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
            OAUTH2_PROXY_COOKIE_SECRET: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') | b64encode }}"

    - name: Create PersistentVolumeClaim for Elasticsearch
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: elasticsearch-data-pvc
            namespace: "{{ argilla_namespace }}"
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi

    - name: Deploy Elasticsearch
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: StatefulSet
          metadata:
            name: elasticsearch
            namespace: "{{ argilla_namespace }}"
          spec:
            serviceName: elasticsearch
            replicas: 1
            selector:
              matchLabels:
                app: elasticsearch
            template:
              metadata:
                labels:
                  app: elasticsearch
              spec:
                containers:
                  - name: elasticsearch
                    image: "{{ elasticsearch_image }}"
                    ports:
                      - containerPort: 9200
                        name: http
                      - containerPort: 9300
                        name: transport
                    env:
                      - name: discovery.type
                        value: single-node
                      - name: cluster.name
                        value: argilla-cluster
                      - name: node.name
                        value: argilla-node
                      - name: ES_JAVA_OPTS
                        value: "-Xms512m -Xmx512m"
                      - name: xpack.security.enabled
                        value: "false"
                      - name: xpack.security.enrollment.enabled
                        value: "false"
                    volumeMounts:
                      - name: data
                        mountPath: /usr/share/elasticsearch/data
                    resources:
                      requests:
                        memory: "1Gi"
                        cpu: "500m"
                      limits:
                        memory: "2Gi"
                        cpu: "1"
            volumeClaimTemplates:
              - metadata:
                  name: data
                spec:
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 10Gi

    - name: Create Elasticsearch Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: elasticsearch
            namespace: "{{ argilla_namespace }}"
          spec:
            selector:
              app: elasticsearch
            ports:
              - port: 9200
                targetPort: 9200
                name: http

    - name: Deploy Argilla
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: argilla
            namespace: "{{ argilla_namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: argilla
            template:
              metadata:
                labels:
                  app: argilla
              spec:
                containers:
                  - name: argilla
                    image: "{{ argilla_image }}"
                    ports:
                      - containerPort: 6900
                        name: http
                    env:
                      - name: ARGILLA_ELASTICSEARCH
                        value: "http://elasticsearch:9200"
                      - name: ARGILLA_HOME_PATH
                        value: "/var/lib/argilla"
                      - name: ARGILLA_API_KEY
                        valueFrom:
                          secretKeyRef:
                            name: argilla-secrets
                            key: ARGILLA_API_KEY
                      - name: DEFAULT_USER_ENABLED
                        valueFrom:
                          secretKeyRef:
                            name: argilla-secrets
                            key: DEFAULT_USER_ENABLED
                      - name: DEFAULT_USER_USERNAME
                        valueFrom:
                          secretKeyRef:
                            name: argilla-secrets
                            key: DEFAULT_USER_USERNAME
                      - name: DEFAULT_USER_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: argilla-secrets
                            key: DEFAULT_USER_PASSWORD
                      - name: DEFAULT_USER_API_KEY
                        valueFrom:
                          secretKeyRef:
                            name: argilla-secrets
                            key: DEFAULT_USER_API_KEY
                    livenessProbe:
                      httpGet:
                        path: /api/status
                        port: http
                      initialDelaySeconds: 60
                      periodSeconds: 10
                    readinessProbe:
                      httpGet:
                        path: /api/status
                        port: http
                      initialDelaySeconds: 30
                      periodSeconds: 5
                    resources:
                      requests:
                        memory: "512Mi"
                        cpu: "250m"
                      limits:
                        memory: "2Gi"
                        cpu: "1"
                initContainers:
                  - name: wait-for-elasticsearch
                    image: busybox:1.35
                    command: ['sh', '-c', 'until nc -z elasticsearch 9200; do echo waiting for elasticsearch; sleep 2; done;']

    - name: Create Argilla Service (internal only)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: argilla
            namespace: "{{ argilla_namespace }}"
          spec:
            selector:
              app: argilla
            ports:
              - port: 6900
                targetPort: 6900
                name: http

    - name: Deploy OAuth2 Proxy
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: argilla-oauth2-proxy
            namespace: "{{ argilla_namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: argilla-oauth2-proxy
            template:
              metadata:
                labels:
                  app: argilla-oauth2-proxy
              spec:
                containers:
                  - name: oauth2-proxy
                    image: "{{ oauth2_proxy_image }}"
                    args:
                      - --http-address=0.0.0.0:4180
                      - --upstream=http://argilla:6900
                      - --cookie-secure=true
                      - --cookie-name=_oauth2_proxy_argilla
                      - --provider=keycloak-oidc
                      - --client-id=argilla
                      - --oidc-issuer-url=https://auth.{{ domain_name }}/realms/master
                      - --email-domain=*
                      - --scope=openid email profile
                      - --pass-authorization-header=true
                      - --pass-access-token=true
                      - --pass-user-headers=true
                      - --set-authorization-header=true
                      - --set-xauthrequest=true
                      - --reverse-proxy=true
                      - --whitelist-domain=.{{ domain_name }}
                      - --cookie-domain=.{{ domain_name }}
                      - --redirect-url=https://{{ argilla_hostname }}/oauth2/callback
                    env:
                      - name: OAUTH2_PROXY_CLIENT_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: argilla-secrets
                            key: OAUTH2_PROXY_CLIENT_SECRET
                      - name: OAUTH2_PROXY_COOKIE_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: argilla-secrets
                            key: OAUTH2_PROXY_COOKIE_SECRET
                    ports:
                      - containerPort: 4180
                        name: http
                    livenessProbe:
                      httpGet:
                        path: /ping
                        port: http
                      initialDelaySeconds: 10
                      periodSeconds: 10
                    readinessProbe:
                      httpGet:
                        path: /ping
                        port: http
                      initialDelaySeconds: 5
                      periodSeconds: 5
                    resources:
                      requests:
                        memory: "128Mi"
                        cpu: "50m"
                      limits:
                        memory: "256Mi"
                        cpu: "200m"

    - name: Create OAuth2 Proxy Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: argilla-oauth2-proxy
            namespace: "{{ argilla_namespace }}"
          spec:
            selector:
              app: argilla-oauth2-proxy
            ports:
              - port: 80
                targetPort: 4180
                name: http

    - name: Get wildcard certificate from default namespace
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: default
        name: thinkube-com-tls
      register: wildcard_cert
      failed_when: wildcard_cert.resources | length == 0

    - name: Copy wildcard certificate to Argilla namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ argilla_namespace }}-tls-secret"
            namespace: "{{ argilla_namespace }}"
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ wildcard_cert.resources[0].data['tls.crt'] }}"
            tls.key: "{{ wildcard_cert.resources[0].data['tls.key'] }}"

    - name: Create Argilla Ingress (points to OAuth2 proxy)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: argilla
            namespace: "{{ argilla_namespace }}"
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/proxy-body-size: "100m"
          spec:
            ingressClassName: nginx
            tls:
              - hosts:
                  - "{{ argilla_hostname }}"
                secretName: "{{ argilla_namespace }}-tls-secret"
            rules:
              - host: "{{ argilla_hostname }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: argilla-oauth2-proxy
                          port:
                            number: 80

    - name: Wait for Elasticsearch to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: StatefulSet
        namespace: "{{ argilla_namespace }}"
        name: elasticsearch
      register: es_status
      until:
        - es_status.resources is defined
        - es_status.resources | length > 0
        - es_status.resources[0].status.readyReplicas is defined
        - es_status.resources[0].status.readyReplicas == 1
      retries: 30
      delay: 10

    - name: Wait for Argilla deployment to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ argilla_namespace }}"
        name: argilla
      register: deployment_status
      until:
        - deployment_status.resources is defined
        - deployment_status.resources | length > 0
        - deployment_status.resources[0].status.replicas is defined
        - deployment_status.resources[0].status.readyReplicas is defined
        - deployment_status.resources[0].status.replicas == deployment_status.resources[0].status.readyReplicas
      retries: 30
      delay: 10

    - name: Display access information
      ansible.builtin.debug:
        msg:
          - "Argilla has been deployed successfully!"
          - "Access URL: https://{{ argilla_hostname }}"
          - "Default admin user: {{ admin_username }}"
          - "Default admin password: {{ admin_password }}"
          - "API Key: {{ argilla_api_key }}"
          - "Note: SSO is configured via Keycloak OAuth2 proxy"