---
# ansible/40_thinkube/optional/cvat/10_deploy.yaml
# Description:
#   Deploy CVAT computer vision annotation tool on Kubernetes
#   Uses PostgreSQL backend and OAuth2 Proxy for authentication
#
# Requirements:
#   - MicroK8s must be installed and running
#   - Harbor registry must be available
#   - PostgreSQL must be deployed
#   - Keycloak must be deployed
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/optional/cvat/10_deploy.yaml
#
# Variables from inventory:
#   - domain_name: Base domain for the cluster
#   - kubeconfig: Path to kubeconfig file
#   - harbor_registry: Harbor registry URL
#   - admin_username: Admin username
#   - admin_password: Admin password
#
# ðŸ¤– [AI-generated]

- name: Deploy CVAT on Kubernetes
  hosts: microk8s_control_plane
  gather_facts: true

  vars:
    cvat_namespace: cvat
    cvat_server_image: "{{ harbor_registry }}/{{ library_project | default('library') }}/cvat-server:latest"
    cvat_ui_image: "{{ harbor_registry }}/{{ library_project | default('library') }}/cvat-ui:latest"
    cvat_hostname: "cvat.{{ domain_name }}"

    # Get admin password from environment
    admin_password: "{{ lookup('env','ADMIN_PASSWORD') }}"

    # Keycloak settings for OAuth2 Proxy integration
    keycloak_url: "https://auth.{{ domain_name }}"
    keycloak_admin_username: "{{ admin_username }}"
    keycloak_admin_password: "{{ admin_password }}"

    # OAuth2 Proxy settings
    oauth2_proxy_namespace: "{{ cvat_namespace }}"
    oauth2_proxy_name: "oauth2-proxy"
    oauth2_proxy_client_id: "cvat"
    oauth2_proxy_dashboard_host: "{{ cvat_hostname }}"
    oauth2_proxy_oidc_issuer_url: "{{ keycloak_url }}/realms/{{ keycloak_realm }}"
    oauth2_proxy_cookie_domain: ".{{ domain_name }}"
    oauth2_proxy_ingress_host: "{{ cvat_hostname }}"
    oauth2_proxy_ingress_tls_secret_name: "{{ cvat_namespace }}-tls-secret"
    oauth2_proxy_redirect_url: "https://{{ cvat_hostname }}/oauth2/callback"
    oauth2_proxy_kubeconfig: "{{ kubeconfig }}"
    oauth2_proxy_helm_bin: "{{ helm_bin | default('/snap/bin/microk8s.helm3') }}"
    oauth2_proxy_keycloak_debug: false
    oauth2_proxy_session_store_type: "redis"  # Valkey is Redis-compatible
    oauth2_proxy_redis_service: "ephemeral-valkey"  # Match the Valkey service name
    oauth2_proxy_ingress_enabled: true
    oauth2_proxy_cookie_samesite: "none"

    # Valkey settings for OAuth2 session storage
    valkey_namespace: "{{ cvat_namespace }}"
    valkey_kubeconfig: "{{ kubeconfig }}"

  tasks:
    - name: Verify required variables are defined
      ansible.builtin.assert:
        that:
          - domain_name is defined
          - kubeconfig is defined
          - harbor_registry is defined
          - admin_username is defined
          - admin_password is defined
        fail_msg: "Required variables are not defined. Please check your inventory."

    - name: Create CVAT namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        name: "{{ cvat_namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: Generate CVAT secret key
      ansible.builtin.set_fact:
        cvat_secret_key: "{{ lookup('password', '/dev/null length=50 chars=ascii_letters,digits') }}"

    - name: Create CVAT secrets
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cvat-secrets
            namespace: "{{ cvat_namespace }}"
          type: Opaque
          stringData:
            DJANGO_SUPERUSER_USERNAME: "{{ admin_username }}"
            DJANGO_SUPERUSER_PASSWORD: "{{ admin_password }}"
            DJANGO_SUPERUSER_EMAIL: "admin@{{ domain_name }}"
            SECRET_KEY: "{{ cvat_secret_key }}"
            POSTGRES_USER: "{{ admin_username }}"
            POSTGRES_PASSWORD: "{{ admin_password }}"
            POSTGRES_DB: "cvat"

    - name: Create PersistentVolumeClaims for CVAT
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ item.name }}"
            namespace: "{{ cvat_namespace }}"
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: "{{ item.size }}"
      loop:
        - { name: cvat-data-pvc, size: 20Gi }
        - { name: cvat-keys-pvc, size: 1Gi }
        - { name: cvat-logs-pvc, size: 5Gi }
        - { name: cvat-models-pvc, size: 10Gi }

    - name: Create CVAT database in PostgreSQL
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: cvat-db-init
            namespace: "{{ cvat_namespace }}"
          spec:
            restartPolicy: Never
            containers:
              - name: create-db
                image: "{{ harbor_registry }}/{{ library_project | default('library') }}/postgres:16-alpine"
                command:
                  - sh
                  - -c
                  - |
                    psql -h postgresql-official.postgres.svc.cluster.local -U {{ admin_username }} -d postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'cvat'" | grep -q 1 || psql -h postgresql-official.postgres.svc.cluster.local -U {{ admin_username }} -d postgres -c "CREATE DATABASE cvat"
                env:
                  - name: PGPASSWORD
                    value: "{{ admin_password }}"

    - name: Wait for database creation
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Pod
        name: cvat-db-init
        namespace: "{{ cvat_namespace }}"
      register: db_init_pod
      until:
        - db_init_pod.resources is defined
        - db_init_pod.resources | length > 0
        - db_init_pod.resources[0].status.phase == "Succeeded"
      retries: 30
      delay: 5

    - name: Get Valkey service info
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Service
        namespace: valkey
        name: valkey
      register: valkey_service
      failed_when: valkey_service.resources | length == 0

    - name: Deploy CVAT Backend
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cvat-backend
            namespace: "{{ cvat_namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: cvat-backend
            template:
              metadata:
                labels:
                  app: cvat-backend
              spec:
                containers:
                  - name: cvat-backend
                    image: "{{ cvat_server_image }}"
                    command: ["./backend_entrypoint.sh"]
                    args: ["init", "run", "server"]
                    ports:
                      - containerPort: 8080
                        name: http
                    env:
                      - name: DJANGO_MODWSGI_EXTRA_ARGS
                        value: ""
                      - name: SMOKESCREEN_OPTS
                        value: ""
                      - name: CVAT_ANALYTICS
                        value: "1"
                      - name: CLICKHOUSE_HOST
                        value: "clickhouse-clickhouse.clickhouse.svc.cluster.local"
                      - name: CLICKHOUSE_PORT
                        value: "8123"
                      - name: CLICKHOUSE_USER
                        value: "default"
                      - name: CLICKHOUSE_PASSWORD
                        value: "{{ admin_password }}"
                      - name: ALLOWED_HOSTS
                        value: "*"
                      - name: CVAT_REDIS_HOST
                        value: "valkey.valkey.svc.cluster.local"
                      - name: CVAT_REDIS_INMEM_HOST
                        value: "valkey.valkey.svc.cluster.local"
                      - name: CVAT_REDIS_INMEM_PORT
                        value: "6379"
                      - name: CVAT_REDIS_ONDISK_HOST
                        value: "valkey.valkey.svc.cluster.local"
                      - name: CVAT_REDIS_ONDISK_PORT
                        value: "6379"
                      - name: CVAT_POSTGRES_HOST
                        value: "postgresql-official.postgres.svc.cluster.local"
                      - name: CVAT_POSTGRES_PORT
                        value: "5432"
                      - name: CVAT_POSTGRES_USER
                        valueFrom:
                          secretKeyRef:
                            name: cvat-secrets
                            key: POSTGRES_USER
                      - name: CVAT_POSTGRES_DBNAME
                        valueFrom:
                          secretKeyRef:
                            name: cvat-secrets
                            key: POSTGRES_DB
                      - name: CVAT_POSTGRES_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: cvat-secrets
                            key: POSTGRES_PASSWORD
                      - name: DJANGO_SECRET_KEY
                        valueFrom:
                          secretKeyRef:
                            name: cvat-secrets
                            key: SECRET_KEY
                      - name: DJANGO_SUPERUSER_USERNAME
                        valueFrom:
                          secretKeyRef:
                            name: cvat-secrets
                            key: DJANGO_SUPERUSER_USERNAME
                      - name: DJANGO_SUPERUSER_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: cvat-secrets
                            key: DJANGO_SUPERUSER_PASSWORD
                      - name: DJANGO_SUPERUSER_EMAIL
                        valueFrom:
                          secretKeyRef:
                            name: cvat-secrets
                            key: DJANGO_SUPERUSER_EMAIL
                      - name: CVAT_SERVER_HOST
                        value: "{{ cvat_hostname }}"
                      - name: CVAT_SERVER_PORT
                        value: "443"
                      - name: CVAT_HTTPS
                        value: "1"
                      - name: USE_ALLAUTH_SOCIAL_ACCOUNTS
                        value: "False"
                    volumeMounts:
                      - name: cvat-data
                        mountPath: /home/django/data
                      - name: cvat-keys
                        mountPath: /home/django/keys
                      - name: cvat-logs
                        mountPath: /home/django/logs
                      - name: cvat-models
                        mountPath: /home/django/models
                    livenessProbe:
                      httpGet:
                        path: /api/server/about
                        port: http
                      initialDelaySeconds: 60
                      periodSeconds: 15
                      failureThreshold: 5
                    readinessProbe:
                      httpGet:
                        path: /api/server/about
                        port: http
                      initialDelaySeconds: 15
                      periodSeconds: 15
                    resources:
                      requests:
                        memory: "512Mi"
                        cpu: "250m"
                      limits:
                        memory: "2Gi"
                        cpu: "1"
                volumes:
                  - name: cvat-data
                    persistentVolumeClaim:
                      claimName: cvat-data-pvc
                  - name: cvat-keys
                    persistentVolumeClaim:
                      claimName: cvat-keys-pvc
                  - name: cvat-logs
                    persistentVolumeClaim:
                      claimName: cvat-logs-pvc
                  - name: cvat-models
                    persistentVolumeClaim:
                      claimName: cvat-models-pvc
                initContainers:
                  - name: wait-for-db
                    image: "{{ harbor_registry }}/{{ library_project | default('library') }}/busybox:latest"
                    command: ['sh', '-c', 'until nc -z postgresql-official.postgres.svc.cluster.local 5432; do echo waiting for postgres; sleep 2; done;']
                  - name: wait-for-valkey
                    image: "{{ harbor_registry }}/{{ library_project | default('library') }}/busybox:latest"
                    command: ['sh', '-c', 'until nc -z valkey.valkey.svc.cluster.local 6379; do echo waiting for valkey; sleep 2; done;']
                  - name: wait-for-clickhouse
                    image: "{{ harbor_registry }}/{{ library_project | default('library') }}/busybox:latest"
                    command: ['sh', '-c', 'until nc -z clickhouse-clickhouse.clickhouse.svc.cluster.local 8123; do echo waiting for clickhouse; sleep 2; done;']

    - name: Create CVAT Backend Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: cvat-backend
            namespace: "{{ cvat_namespace }}"
          spec:
            selector:
              app: cvat-backend
            ports:
              - port: 8080
                targetPort: 8080
                name: http

    - name: Deploy OPA (Open Policy Agent)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: opa
            namespace: "{{ cvat_namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: opa
            template:
              metadata:
                labels:
                  app: opa
              spec:
                containers:
                  - name: opa
                    image: "{{ harbor_registry }}/{{ library_project | default('library') }}/opa:0.63.0"
                    args:
                      - "run"
                      - "--server"
                      - "--log-level=error"
                      - "--set=services.cvat.url=http://cvat-backend:8080"
                      - "--set=bundles.cvat.service=cvat"
                      - "--set=bundles.cvat.resource=/api/auth/rules"
                      - "--set=bundles.cvat.polling.min_delay_seconds=5"
                      - "--set=bundles.cvat.polling.max_delay_seconds=15"
                      - "--set=bundles.cvat.persist=true"
                      - "--set=status.console=false"
                    ports:
                      - containerPort: 8181
                        name: http
                    resources:
                      limits:
                        cpu: "200m"
                        memory: "256Mi"
                      requests:
                        cpu: "100m"
                        memory: "128Mi"

    - name: Create OPA Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: opa
            namespace: "{{ cvat_namespace }}"
          spec:
            selector:
              app: opa
            ports:
              - port: 8181
                targetPort: 8181
                name: http

    - name: Deploy CVAT UI
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cvat-ui
            namespace: "{{ cvat_namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: cvat-ui
            template:
              metadata:
                labels:
                  app: cvat-ui
              spec:
                containers:
                  - name: cvat-ui
                    image: "{{ cvat_ui_image }}"
                    ports:
                      - containerPort: 8000
                        name: http
                    resources:
                      requests:
                        memory: "128Mi"
                        cpu: "100m"
                      limits:
                        memory: "512Mi"
                        cpu: "200m"

    - name: Create CVAT UI Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: cvat-ui
            namespace: "{{ cvat_namespace }}"
          spec:
            selector:
              app: cvat-ui
            ports:
              - port: 80
                targetPort: 8000
                name: http

    - name: Get wildcard certificate from default namespace
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: default
        name: thinkube-com-tls
      register: wildcard_cert
      failed_when: wildcard_cert.resources | length == 0

    - name: Copy wildcard certificate to CVAT namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ cvat_namespace }}-tls-secret"
            namespace: "{{ cvat_namespace }}"
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ wildcard_cert.resources[0].data['tls.crt'] }}"
            tls.key: "{{ wildcard_cert.resources[0].data['tls.key'] }}"

    - name: Deploy Ephemeral Valkey for OAuth2 session storage
      ansible.builtin.include_role:
        name: valkey/ephemeral_valkey
      vars:
        valkey_registry: "{{ harbor_registry }}/library"

    - name: Deploy OAuth2 Proxy with Keycloak authentication
      ansible.builtin.include_role:
        name: oauth2_proxy

    - name: Create CVAT Main Ingress (secured via OAuth2)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: cvat-ingress
            namespace: "{{ cvat_namespace }}"
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/proxy-body-size: "1024m"
              nginx.ingress.kubernetes.io/proxy-send-timeout: "1200"
              nginx.ingress.kubernetes.io/proxy-read-timeout: "1200"
              nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
              nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
              nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
              nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
              nginx.ingress.kubernetes.io/auth-response-headers: "X-Auth-Request-User,X-Auth-Request-Email,X-Auth-Request-Access-Token,X-Auth-Request-Groups"
          spec:
            ingressClassName: nginx
            tls:
              - hosts:
                  - "{{ cvat_hostname }}"
                secretName: "{{ cvat_namespace }}-tls-secret"
            rules:
              - host: "{{ cvat_hostname }}"
                http:
                  paths:
                    - path: /api
                      pathType: Prefix
                      backend:
                        service:
                          name: cvat-backend
                          port:
                            number: 8080
                    - path: /static
                      pathType: Prefix
                      backend:
                        service:
                          name: cvat-backend
                          port:
                            number: 8080
                    - path: /django-rq
                      pathType: Prefix
                      backend:
                        service:
                          name: cvat-backend
                          port:
                            number: 8080
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: cvat-ui
                          port:
                            number: 80

    # PostgreSQL readiness is checked by init containers in the deployment
    # No separate wait needed since we use shared core PostgreSQL

    - name: Wait for CVAT Backend deployment to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ cvat_namespace }}"
        name: cvat-backend
      register: backend_status
      until:
        - backend_status.resources is defined
        - backend_status.resources | length > 0
        - backend_status.resources[0].status.replicas is defined
        - backend_status.resources[0].status.readyReplicas is defined
        - backend_status.resources[0].status.replicas == backend_status.resources[0].status.readyReplicas
      retries: 30
      delay: 10

    - name: Display access information
      ansible.builtin.debug:
        msg:
          - "CVAT has been deployed successfully!"
          - "Access URL: https://{{ cvat_hostname }}"
          - "Default admin user: {{ admin_username }}"
          - "Default admin password: {{ admin_password }}"
          - "Note: SSO is configured via Keycloak OAuth2 proxy"
          - "Computer vision annotation features are available"