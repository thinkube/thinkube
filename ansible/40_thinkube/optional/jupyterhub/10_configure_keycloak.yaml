# Copyright 2025 Alejandro MartÃ­nez CorriÃ¡ and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/optional/jupyterhub/11_configure_keycloak.yaml
# Description:
#   Configure Keycloak client for JupyterHub OIDC authentication
#
# Requirements:
#   - Keycloak deployed and accessible
#   - KEYCLOAK_ADMIN_PASSWORD environment variable set
#   - admin_username and admin_password variables in inventory
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/optional/jupyterhub/11_configure_keycloak.yaml
#
# Variables from inventory:
#   - keycloak_hostname: Keycloak server hostname
#   - keycloak_realm: Keycloak realm name
#   - admin_username: Admin username for applications
#   - domain_name: Base domain name
#
# Dependencies:
#   - CORE-002 (Keycloak) must be complete
#
# ðŸ¤– [AI-assisted]

- name: Configure Keycloak for JupyterHub
  hosts: k8s_control_plane
  gather_facts: true

  vars:
    keycloak_url: "https://auth.{{ domain_name }}"
    keycloak_realm: "thinkube"
    keycloak_admin_user: "{{ admin_username }}"
    keycloak_admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') }}"
    keycloak_validate_certs: false
    jupyterhub_client_id: "jupyterhub"
    jupyterhub_hostname: "jupyter.{{ domain_name }}"
    jupyterhub_namespace: "jupyterhub"
    kubeconfig: /var/snap/microk8s/current/credentials/client.config

  pre_tasks:
    - name: Verify required variables
      ansible.builtin.assert:
        that:
          - admin_username is defined and admin_username != ""
          - keycloak_admin_password != ""
        fail_msg: "Required admin_username must be set in inventory and ADMIN_PASSWORD environment variable must be set"

  tasks:
    - name: Get Keycloak admin token
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/realms/master/protocol/openid-connect/token"
        method: POST
        body_format: form-urlencoded
        body:
          client_id: "admin-cli"
          username: "{{ keycloak_admin_user }}"
          password: "{{ keycloak_admin_password }}"
          grant_type: "password"
        validate_certs: "{{ keycloak_validate_certs }}"
        status_code: 200
      register: keycloak_token
      no_log: true

    - name: Check if JupyterHub client exists
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/admin/realms/{{ keycloak_realm }}/clients?clientId={{ jupyterhub_client_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ keycloak_token.json.access_token }}"
        validate_certs: "{{ keycloak_validate_certs }}"
        status_code: 200
      register: jupyterhub_client_info

    - name: Create JupyterHub client in Keycloak
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/admin/realms/{{ keycloak_realm }}/clients"
        method: POST
        headers:
          Authorization: "Bearer {{ keycloak_token.json.access_token }}"
          Content-Type: "application/json"
        body_format: json
        body:
          clientId: "{{ jupyterhub_client_id }}"
          name: "JupyterHub"
          description: "JupyterHub authentication client"
          enabled: true
          clientAuthenticatorType: "client-secret"
          redirectUris: 
            - "https://{{ jupyterhub_hostname }}/hub/oauth_callback"
          protocol: "openid-connect"
          publicClient: false
          serviceAccountsEnabled: false
          standardFlowEnabled: true
          implicitFlowEnabled: false
          directAccessGrantsEnabled: true
          authorizationServicesEnabled: false
          fullScopeAllowed: true
        validate_certs: "{{ keycloak_validate_certs }}"
        status_code: 201
      when: jupyterhub_client_info.json | length == 0
      register: client_creation

    - name: Get JupyterHub client info
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/admin/realms/{{ keycloak_realm }}/clients?clientId={{ jupyterhub_client_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ keycloak_token.json.access_token }}"
        validate_certs: "{{ keycloak_validate_certs }}"
        status_code: 200
      register: jupyterhub_client_info_final

    - name: Extract client UUID
      ansible.builtin.set_fact:
        jupyterhub_client_uuid: "{{ jupyterhub_client_info_final.json[0].id }}"
      when: jupyterhub_client_info_final.json | length > 0

    - name: Get client secret
      ansible.builtin.uri:
        url: "{{ keycloak_url }}/admin/realms/{{ keycloak_realm }}/clients/{{ jupyterhub_client_uuid }}/client-secret"
        method: GET
        headers:
          Authorization: "Bearer {{ keycloak_token.json.access_token }}"
        validate_certs: "{{ keycloak_validate_certs }}"
        status_code: 200
      register: client_secret_response
      when: jupyterhub_client_uuid is defined

    - name: Create JupyterHub namespace if it doesn't exist
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ jupyterhub_namespace }}"

    - name: Create/Update Kubernetes secret with client credentials
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: jupyterhub-oidc-secret
            namespace: "{{ jupyterhub_namespace }}"
          type: Opaque
          stringData:
            client_id: "{{ jupyterhub_client_id }}"
            client_secret: "{{ client_secret_response.json.value }}"
      when: client_secret_response is defined and client_secret_response.json is defined

    - name: Display Keycloak configuration status
      ansible.builtin.debug:
        msg:
          - "=============================================================="
          - "Keycloak configuration for JupyterHub complete!"
          - ""
          - "Client ID: {{ jupyterhub_client_id }}"
          - "Redirect URI: https://{{ jupyterhub_hostname }}/hub/oauth_callback"
          - "Client secret stored in: jupyterhub-oidc-secret"
          - "Namespace: {{ jupyterhub_namespace }}"
          - ""
          - "Status: {{ 'Created new client' if client_creation is changed else 'Client already exists' }}"
          - "=============================================================="