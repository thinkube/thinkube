# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

# JupyterHub Helm chart values with dynamic image discovery
# Images discovered at runtime from thinkube-control API
# No fallbacks - fails if dependencies unavailable

hub:
  config:
    JupyterHub:
      # MANDATORY: Keycloak authentication only - no fallbacks
      authenticator_class: generic-oauth
      admin_access: true
      admin_users:
        - {{ admin_username }}
      allow_named_servers: false
      shutdown_on_logout: true

    # Keycloak authentication is mandatory
    GenericOAuthenticator:
      client_id: jupyterhub
      client_secret: "{{ jupyterhub_client_secret }}"
      oauth_callback_url: "https://jupyter.{{ domain_name }}/hub/oauth_callback"
      authorize_url: "https://auth.{{ domain_name }}/realms/{{ keycloak_realm }}/protocol/openid-connect/auth"
      token_url: "https://auth.{{ domain_name }}/realms/{{ keycloak_realm }}/protocol/openid-connect/token"
      userdata_url: "https://auth.{{ domain_name }}/realms/{{ keycloak_realm }}/protocol/openid-connect/userinfo"
      login_service: "Keycloak"
      username_claim: "preferred_username"
      scope:
        - "openid"
        - "profile"
        - "email"
      allow_all: true

  extraConfig:
    00-default-url: |
      # Set default URL to JupyterLab
      c.Spawner.default_url = '/lab'

    01-dynamic-profile-generator: |
      # Dynamic profile generation with flexible resource selection
      import requests
      import sys
      import logging

      def parse_memory_to_gb(memory_str):
          """Convert memory string to GB for comparison"""
          if memory_str.endswith('Gi'):
              return int(memory_str[:-2])
          elif memory_str.endswith('G'):
              return int(memory_str[:-1])
          elif memory_str.endswith('Mi'):
              return int(memory_str[:-2]) / 1024
          elif memory_str.endswith('M'):
              return int(memory_str[:-1]) / 1024
          return 0

      def get_profile_list(spawner):
          """Generate profiles with flexible resource selection forms"""
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          try:
              # Query thinkube-control for available resources
              logger.info("Querying thinkube-control for cluster resources...")
              resources_response = requests.get(
                  'http://backend.thinkube-control.svc.cluster.local:8000/api/v1/cluster/resources',
                  headers={'Accept': 'application/json'},
                  timeout=10
              )

              if resources_response.status_code != 200:
                  logger.error(f"Failed to get cluster resources: {resources_response.status_code}")
                  sys.exit(1)

              resources = resources_response.json()

              # Query for available images
              logger.info("Querying thinkube-control for available images...")
              images_response = requests.get(
                  'http://backend.thinkube-control.svc.cluster.local:8000/api/v1/images/jupyter',
                  headers={'Accept': 'application/json'},
                  timeout=10
              )

              if images_response.status_code != 200:
                  logger.error(f"Failed to get images: {images_response.status_code}")
                  sys.exit(1)

              images = images_response.json()
              profiles = []

              # Find max available resources across all nodes
              max_cpu = max(node['available']['cpu'] for node in resources)
              max_memory_gb = max(parse_memory_to_gb(node['available']['memory']) for node in resources)
              has_gpu = any(node['available']['gpu'] > 0 for node in resources)

              # Build dynamic CPU choices based on availability
              cpu_choices = {}
              for cores in [1, 2, 4, 6, 8, 12, 16, 24, 32]:
                  if cores <= max_cpu:
                      cpu_choices[str(cores)] = f"{cores} core{'s' if cores > 1 else ''}"

              # Build dynamic memory choices based on availability
              memory_choices = {}
              for gb in [2, 4, 8, 16, 32, 48, 64, 96, 128]:
                  if gb <= max_memory_gb:
                      memory_choices[f"{gb}Gi"] = f"{gb} GB"

              for img in images:
                  # Build node choices with resource info
                  node_choices = {}
                  for node in resources:
                      node_label = (f"{node['name']} "
                                  f"({node['available']['cpu']:.1f}/{node['capacity']['cpu']} CPUs, "
                                  f"{node['available']['memory']}/{node['capacity']['memory']}")

                      # Add GPU info if available
                      if node['gpu_details']:
                          available_gpus = [g for g in node['gpu_details'] if g['available']]
                          if available_gpus:
                              gpu = available_gpus[0]
                              node_label += f", GPU: {gpu['model']} {gpu['memory_total']}"
                          else:
                              node_label += ", GPU: In use"
                      else:
                          node_label += ", No GPU"

                      node_label += ")"
                      node_choices[node['name']] = node_label

                  # Build GPU choices based on availability
                  gpu_choices = {'0': 'No GPU'}
                  if has_gpu:
                      gpu_choices['1'] = 'Use GPU (if available on selected node)'

                  # Create profile with options form
                  profile = {
                      'display_name': img.get('display_name', img['name']),
                      'description': f"{img.get('description', '')} - Select your resources below",
                      'default': img.get('default', False),
                      'profile_options': {
                          'node': {
                              'display_name': 'Select Node',
                              'choices': node_choices,
                              'default': list(node_choices.keys())[0] if node_choices else 'vilanova1'
                          },
                          'cpu': {
                              'display_name': 'CPU Cores',
                              'choices': cpu_choices,
                              'default': '4' if '4' in cpu_choices else list(cpu_choices.keys())[0]
                          },
                          'memory': {
                              'display_name': 'Memory',
                              'choices': memory_choices,
                              'default': '8Gi' if '8Gi' in memory_choices else list(memory_choices.keys())[0]
                          },
                          'enable_gpu': {
                              'display_name': 'Enable GPU',
                              'choices': gpu_choices,
                              'default': '0'
                          }
                      },
                      'kubespawner_override': {
                          'image': f"{{ harbor_registry }}/library/{img['name']}:latest",
                          'image_pull_policy': 'Always'
                      }
                  }
                  profiles.append(profile)

              if not profiles:
                  logger.error("No profiles could be generated")
                  sys.exit(1)

              logger.info(f"Successfully generated {len(profiles)} profiles with resource options")
              return profiles

          except Exception as e:
              logger.error(f"Failed to generate profiles: {e}")
              sys.exit(1)

      def apply_profile_options(spawner, user_options):
          """Apply the selected options to the spawner"""
          import logging
          logger = logging.getLogger(__name__)

          # Get selected options
          profile = user_options.get('profile', {})
          node = profile.get('node')
          cpu = profile.get('cpu', '4')
          memory = profile.get('memory', '8Gi')
          enable_gpu = profile.get('enable_gpu', '0')

          logger.info(f"Applying options: node={node}, cpu={cpu}, memory={memory}, gpu={enable_gpu}")

          # Apply to spawner
          if node:
              spawner.node_selector = {"kubernetes.io/hostname": node}

          spawner.cpu_limit = float(cpu)
          spawner.cpu_guarantee = float(cpu) * 0.5  # 50% guarantee
          spawner.mem_limit = memory
          spawner.mem_guarantee = memory

          if enable_gpu == '1':
              spawner.extra_resource_limits = {"nvidia.com/gpu": "1"}
              spawner.extra_resource_guarantees = {"nvidia.com/gpu": "1"}
              logger.info("GPU enabled for this session")

          return spawner

      # Set the configurations
      c.KubeSpawner.profile_list = get_profile_list
      c.JupyterHub.spawner_class = 'kubespawner.KubeSpawner'

      # Enable profile options
      from kubespawner import KubeSpawner

      class CustomKubeSpawner(KubeSpawner):
          def load_user_options(self):
              """Load user options and apply them"""
              super().load_user_options()
              if self.user_options:
                  apply_profile_options(self, self.user_options)

      c.JupyterHub.spawner_class = CustomKubeSpawner

proxy:
  secretToken: "{{ jupyterhub_proxy_token | default(lookup('password', '/dev/null chars=hex_digits length=64')) }}"
  service:
    type: ClusterIP
  https:
    enabled: false
  chp:
    image:
      name: quay.io/jupyterhub/configurable-http-proxy
      tag: "5.0.0"  # Use 5.0+ for websocket options support
    pdb:
      enabled: false

singleuser:
  defaultUrl: "/lab"

  # User ID configuration
  uid: 1000
  fsGid: 100  # Group ID for filesystem access

  # Init containers to fix permissions on SeaweedFS volumes
  initContainers:
    - name: fix-permissions
      image: busybox:latest
      imagePullPolicy: IfNotPresent
      command:
        - sh
        - -c
        - |
          # Fix permissions for SeaweedFS volumes
          # These are mounted as root by the CSI driver
          for dir in /home/jovyan/notebooks /home/jovyan/datasets /home/jovyan/models; do
            if [ -d "$dir" ]; then
              echo "Fixing permissions for $dir"
              chown -R 1000:100 "$dir" || echo "Warning: Could not change ownership of $dir"
              chmod -R 775 "$dir" || echo "Warning: Could not change permissions of $dir"
            fi
          done
      securityContext:
        runAsUser: 0  # Run as root to fix permissions
      volumeMounts:
        - name: notebooks
          mountPath: /home/jovyan/notebooks
        - name: datasets
          mountPath: /home/jovyan/datasets
        - name: models
          mountPath: /home/jovyan/models

  # MANDATORY: SeaweedFS storage - no fallbacks
  storage:
    type: none  # We define volumes manually
    # Hybrid storage approach: SeaweedFS (persistent) + local scratch (performance)
    extraVolumes:
    # SeaweedFS for persistent notebooks (MANDATORY)
    - name: notebooks
      persistentVolumeClaim:
        claimName: jupyterhub-notebooks-pvc

    # SeaweedFS for datasets (MANDATORY)
    - name: datasets
      persistentVolumeClaim:
        claimName: jupyterhub-datasets-pvc

    # SeaweedFS for models (MANDATORY)
    - name: models
      persistentVolumeClaim:
        claimName: jupyterhub-models-pvc

    # Local scratch for fast I/O (per-pod temporary)
    - name: scratch
      emptyDir:
        sizeLimit: 100Gi

    extraVolumeMounts:
    # Primary notebook storage (SeaweedFS - persistent across nodes)
    - name: notebooks
      mountPath: /home/jovyan/notebooks

    # Datasets directory (SeaweedFS - persistent across nodes)
    - name: datasets
      mountPath: /home/jovyan/datasets

    # Models directory (SeaweedFS - persistent across nodes)
    - name: models
      mountPath: /home/jovyan/models

    # Fast local scratch space (emptyDir - temporary)
    - name: scratch
      mountPath: /home/jovyan/scratch

  # Image configuration
  image:
    pullPolicy: Always

  # Remove all node restrictions to allow scheduling on any GPU node
  nodeSelector: {}
  extraNodeAffinity: {}

  # Enable GPU support
  extraEnv:
    NVIDIA_VISIBLE_DEVICES: "all"
    NVIDIA_DRIVER_CAPABILITIES: "compute,utility"
    JUPYTER_ENABLE_LAB: "yes"
    GRANT_SUDO: "yes"

  # Default resource limits (overridden by dynamic profiles)
  cpu:
    limit: 4
    guarantee: 1
  memory:
    limit: 8G
    guarantee: 2G

  # Allow privilege escalation for sudo
  allowPrivilegeEscalation: true

  # Network policy
  networkPolicy:
    enabled: false

  # Start timeout (5 minutes for image pull)
  startTimeout: 300

  # Lifecycle hooks for directory setup
  lifecycleHooks:
    postStart:
      exec:
        command:
          - "sh"
          - "-c"
          - |
            # Create notebook directories if they don't exist
            mkdir -p /home/jovyan/notebooks/projects /home/jovyan/notebooks/experiments /home/jovyan/notebooks/agents /home/jovyan/notebooks/fine-tuning
            mkdir -p /home/jovyan/datasets/raw /home/jovyan/datasets/processed /home/jovyan/datasets/embeddings
            mkdir -p /home/jovyan/models/checkpoints /home/jovyan/models/production /home/jovyan/models/fine-tuned
            mkdir -p /home/jovyan/scratch/tmp

# Ingress is handled separately in the deployment playbook
ingress:
  enabled: false

# Scheduling configuration (disabled for simplicity)
scheduling:
  userScheduler:
    enabled: false
  podPriority:
    enabled: false
  userPlaceholder:
    enabled: false

# Pre-puller configuration (disabled - images pulled on demand)
prePuller:
  hook:
    enabled: false
  continuous:
    enabled: false

# Culling configuration
cull:
  enabled: true
  timeout: 3600  # 1 hour idle timeout
  every: 600  # Check every 10 minutes
  maxAge: 0  # Don't cull based on age

# Debug mode (disable in production)
debug:
  enabled: false

# Global configuration
global:
  safeToShowValues: false