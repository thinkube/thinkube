# Copyright 2025 Alejandro MartÃ­nez CorriÃ¡ and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/optional/mlflow/11_deploy.yaml
# Description:
#   Deploy MLflow tracking server with PostgreSQL backend, MinIO storage, and Keycloak SSO
#
# This playbook:
#   1. Creates "mlflow" namespace if it doesn't exist
#   2. Creates a ConfigMap for MLflow configuration
#   3. Creates necessary Kubernetes secrets for database and MinIO connections
#   4. Creates the PostgreSQL database and user for MLflow in the existing PostgreSQL instance
#   5. Creates the MinIO bucket for MLflow artifacts
#   6. Deploys MLflow with built-in OIDC authentication
#   7. Creates Service and Ingress for MLflow access
#
# Requirements:
#   - MicroK8s must be installed and running
#   - PostgreSQL must be deployed
#   - MinIO must be deployed
#   - Keycloak must be deployed and configured (run 10_configure_keycloak.yaml first)
#   - MLflow custom image must be available in Harbor
#   - ADMIN_PASSWORD environment variable must be set
#   - MLFLOW_DB_PASSWORD environment variable (optional, defaults generated)
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/optional/mlflow/11_deploy.yaml
#
# Variables from inventory:
#   - mlflow_hostname: Hostname for MLflow UI access
#   - postgres_hostname: PostgreSQL server hostname
#   - minio_api_hostname: MinIO API hostname
#   - keycloak_url: URL to Keycloak instance
#   - keycloak_realm: Keycloak realm name
#   - harbor_registry: Harbor registry domain
#   - harbor_project: Harbor project name
#   - primary_ingress_class: Ingress controller class name
#   - kubeconfig: Path to kubeconfig file
#   - domain_name: Base domain for the cluster
#
# Dependencies:
#   - PostgreSQL (core component)
#   - MinIO (core component)
#   - Keycloak (core component)
#   - MLflow custom image in Harbor registry
#
# ðŸ¤– AI-assisted

- name: Deploy MLflow Tracking Server
  hosts: microk8s_control_plane
  gather_facts: true

  vars:
    mlflow_namespace: "mlflow"
    mlflow_capacity: "1Gi"
    storage_class_name: "microk8s-hostpath"

    postgres_namespace: "postgres"
    postgres_release_name: "postgresql-official"
    postgres_admin_user: "admin"
    postgres_admin_password: "{{ lookup('env', 'ADMIN_PASSWORD') }}"

    mlflow_db_name: "mlflow"
    mlflow_db_user: "mlflow"
    mlflow_db_password: "{{ lookup('env', 'MLFLOW_DB_PASSWORD') | default(lookup('password', '/dev/null chars=ascii_letters,digits length=32'), true) }}"

    minio_namespace: "minio"
    minio_access_key: "{{ lookup('env', 'MINIO_ROOT_USER') }}"
    minio_secret_key: "{{ lookup('env', 'MINIO_ROOT_PASSWORD') }}"
    mlflow_artifacts_bucket: "mlflow"

    mlflow_client_id: "mlflow"
    mlflow_tls_secret_name: "mlflow-tls-secret"

  tasks:
    - name: Include common environment role for loading variables
      ansible.builtin.include_role:
        name: common/environment
        tasks_from: main.yaml

    - name: Create namespace for MLflow
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        name: "{{ mlflow_namespace }}"
        kind: Namespace
        state: present

    - name: Create Kubernetes secret with Keycloak client credentials
      ansible.builtin.include_role:
        name: keycloak/keycloak_kubernetes_secret
      vars:
        keycloak_k8s_namespace: "{{ mlflow_namespace }}"
        keycloak_k8s_secret_name: "mlflow-oauth-secret"
        keycloak_k8s_kubeconfig: "{{ kubeconfig }}"
        keycloak_client_id: "mlflow"

    - name: Get wildcard certificate from default namespace
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: default
        name: thinkube-com-tls
      register: wildcard_cert
      failed_when: wildcard_cert.resources | length == 0

    - name: Copy wildcard certificate to MLflow namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ mlflow_tls_secret_name }}"
            namespace: "{{ mlflow_namespace }}"
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ wildcard_cert.resources[0].data['tls.crt'] }}"
            tls.key: "{{ wildcard_cert.resources[0].data['tls.key'] }}"

    - name: Create Docker registry auth config
      ansible.builtin.copy:
        dest: "/tmp/mlflow-registry-auth.json"
        content: |
          {
            "auths": {
              "{{ harbor_registry }}": {
                "username": "{{ harbor_robot_user }}",
                "password": "{{ harbor_robot_token }}",
                "auth": "{{ (harbor_robot_user + ':' + harbor_robot_token) | b64encode }}"
              }
            }
          }
        mode: '0600'
      changed_when: false
      no_log: true

    - name: Create Harbor registry pull secret in MLflow namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ mlflow_namespace }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: harbor-registry-secret
          type: kubernetes.io/dockerconfigjson
          data:
            .dockerconfigjson: "{{ lookup('file', '/tmp/mlflow-registry-auth.json') | b64encode }}"

    - name: Remove temporary auth config file
      ansible.builtin.file:
        path: "/tmp/mlflow-registry-auth.json"
        state: absent
      changed_when: false

    - name: Check if MLflow database exists
      ansible.builtin.shell: |
        PGPASSWORD="{{ postgres_admin_password }}" psql -h {{ postgres_hostname }} -p 5432 -U {{ postgres_admin_user }} -d postgres -c "
        SELECT datname FROM pg_database WHERE datname = '{{ mlflow_db_name }}';
        "
      register: db_check
      become: true
      changed_when: false

    - name: Create MLflow database if it doesn't exist
      ansible.builtin.shell: |
        PGPASSWORD="{{ postgres_admin_password }}" psql -h {{ postgres_hostname }} -p 5432 -U {{ postgres_admin_user }} -d postgres -c "
        CREATE DATABASE {{ mlflow_db_name }};
        "
      register: db_create
      become: true
      when: db_check.stdout.find(mlflow_db_name) == -1
      changed_when: db_create.rc == 0

    - name: Create MLflow user and grant privileges
      ansible.builtin.shell: |
        PGPASSWORD="{{ postgres_admin_password }}" psql -h {{ postgres_hostname }} -p 5432 -U {{ postgres_admin_user }} -d postgres -c "
        DO \$\$
        BEGIN
          IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '{{ mlflow_db_user }}') THEN
            CREATE USER {{ mlflow_db_user }} WITH PASSWORD '{{ mlflow_db_password }}';
          END IF;
        END
        \$\$;

        GRANT ALL PRIVILEGES ON DATABASE {{ mlflow_db_name }} TO {{ mlflow_db_user }};
        "
      register: user_create
      become: true
      changed_when: user_create.rc == 0

    - name: Set up schema permissions in MLflow database
      ansible.builtin.shell: |
        PGPASSWORD="{{ postgres_admin_password }}" psql -h {{ postgres_hostname }} -p 5432 -U {{ postgres_admin_user }} -d {{ mlflow_db_name }} -c "
        CREATE SCHEMA IF NOT EXISTS public;
        GRANT ALL ON SCHEMA public TO {{ mlflow_db_user }};
        GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO {{ mlflow_db_user }};
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO {{ mlflow_db_user }};
        "
      register: schema_result
      become: true
      changed_when: "'CREATE SCHEMA' in schema_result.stdout"

    - name: Create MLflow artifacts bucket in MinIO
      ansible.builtin.shell: |
        mc alias set mlflow https://{{ minio_api_hostname }} {{ minio_access_key }} {{ minio_secret_key }} --insecure && \
        if ! mc ls mlflow/{{ mlflow_artifacts_bucket }} --insecure > /dev/null 2>&1; then \
          mc mb mlflow/{{ mlflow_artifacts_bucket }} --insecure && \
          echo "Bucket {{ mlflow_artifacts_bucket }} created"; \
        else \
          echo "Bucket {{ mlflow_artifacts_bucket }} already exists"; \
        fi && \
        mc policy set download mlflow/{{ mlflow_artifacts_bucket }} --insecure
      register: minio_result
      become: true
      changed_when: "'Bucket created' in minio_result.stdout"
      environment:
        MINIO_ACCESS_KEY: "{{ minio_access_key }}"
        MINIO_SECRET_KEY: "{{ minio_secret_key }}"
        MC_INSECURE: "1"
      failed_when: false

    - name: Create PostgreSQL secret for MLflow
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ mlflow_namespace }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: mlflow-db-secret
          type: Opaque
          stringData:
            DB_HOST: "{{ postgres_release_name }}.{{ postgres_namespace }}.svc.cluster.local"
            DB_PORT: "5432"
            DB_NAME: "{{ mlflow_db_name }}"
            DB_USER: "{{ mlflow_db_user }}"
            DB_PASSWORD: "{{ mlflow_db_password }}"

    - name: Create MinIO/S3 Secret for MLflow
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ mlflow_namespace }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: mlflow-s3-secret
          type: Opaque
          stringData:
            AWS_ACCESS_KEY_ID: "{{ minio_access_key }}"
            AWS_SECRET_ACCESS_KEY: "{{ minio_secret_key }}"
            S3_ENDPOINT_URL: "https://{{ minio_api_hostname }}"

    - name: Create OIDC Client Secret
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ mlflow_namespace }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: oauth2-proxy-secret
          type: Opaque
          stringData:
            client-id: "{{ mlflow_client_id }}"
            client-secret: "{{ keycloak_client_secret }}"
      no_log: true

    - name: Create Persistent Volume Claim for MLflow local artifacts
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ mlflow_namespace }}"
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: mlflow-storage
          spec:
            accessModes:
              - ReadWriteOnce
            storageClassName: "{{ storage_class_name }}"
            resources:
              requests:
                storage: "{{ mlflow_capacity }}"

    - name: Create custom Keycloak group detection plugin
      ansible.builtin.copy:
        dest: "/tmp/mlflow_keycloak_groups.py"
        content: |
          #!/usr/bin/env python3
          """
          Custom Keycloak group detection plugin for MLflow OIDC auth
          This plugin extracts group/role information from Keycloak access tokens
          """

          def get_user_groups(access_token):
              """
              Extract groups from Keycloak access token

              Args:
                  access_token: The decoded access token from Keycloak

              Returns:
                  List of group/role names
              """
              try:
                  if isinstance(access_token, dict):
                      if 'realm_access' in access_token and 'roles' in access_token['realm_access']:
                          return access_token['realm_access']['roles']
                  else:
                      import jwt
                      try:
                          decoded = jwt.decode(access_token, options={"verify_signature": False})
                          if 'realm_access' in decoded and 'roles' in decoded['realm_access']:
                              return decoded['realm_access']['roles']
                      except Exception as jwt_error:
                          print(f"Error decoding token: {jwt_error}")

                  if isinstance(access_token, dict) and 'resource_access' in access_token:
                      client_roles = []
                      for client, data in access_token['resource_access'].items():
                          if 'roles' in data:
                              for role in data['roles']:
                                  client_roles.append(f"{client}:{role}")
                      if client_roles:
                          return client_roles

                  print("No roles found in token")
                  return []
              except Exception as e:
                  print(f"Error extracting groups from token: {e}")
                  return []
        mode: '0644'
      changed_when: false

    - name: Create ConfigMap for custom Keycloak group detection plugin
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ mlflow_namespace }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: mlflow-group-plugin
          data:
            mlflow_keycloak_groups.py: "{{ lookup('file', '/tmp/mlflow_keycloak_groups.py') }}"

    - name: Remove temporary plugin file
      ansible.builtin.file:
        path: "/tmp/mlflow_keycloak_groups.py"
        state: absent
      changed_when: false

    - name: Create MLflow Deployment
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ mlflow_namespace }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mlflow
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: mlflow
            template:
              metadata:
                labels:
                  app: mlflow
              spec:
                imagePullSecrets:
                  - name: harbor-registry-secret
                volumes:
                  - name: mlflow-storage
                    persistentVolumeClaim:
                      claimName: mlflow-storage
                  - name: plugins
                    configMap:
                      name: mlflow-group-plugin
                      defaultMode: 420
                containers:
                  - name: mlflow
                    image: "{{ harbor_registry }}/{{ harbor_project }}/mlflow-custom:latest"
                    command: ["mlflow"]
                    args: ["server", "--host=0.0.0.0", "--port=5000", "--backend-store-uri=postgresql://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)", "--default-artifact-root=s3://mlflow/", "--app-name", "oidc-auth"]
                    volumeMounts:
                      - name: mlflow-storage
                        mountPath: /mlflow/local-artifacts
                      - name: plugins
                        mountPath: /mlflow/plugins
                    env:
                      - name: PYTHONPATH
                        value: "/mlflow/plugins"
                      - name: DB_HOST
                        valueFrom:
                          secretKeyRef:
                            name: mlflow-db-secret
                            key: DB_HOST
                      - name: DB_PORT
                        valueFrom:
                          secretKeyRef:
                            name: mlflow-db-secret
                            key: DB_PORT
                      - name: DB_NAME
                        valueFrom:
                          secretKeyRef:
                            name: mlflow-db-secret
                            key: DB_NAME
                      - name: DB_USER
                        valueFrom:
                          secretKeyRef:
                            name: mlflow-db-secret
                            key: DB_USER
                      - name: DB_PASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: mlflow-db-secret
                            key: DB_PASSWORD
                      - name: AWS_ACCESS_KEY_ID
                        valueFrom:
                          secretKeyRef:
                            name: mlflow-s3-secret
                            key: AWS_ACCESS_KEY_ID
                      - name: AWS_SECRET_ACCESS_KEY
                        valueFrom:
                          secretKeyRef:
                            name: mlflow-s3-secret
                            key: AWS_SECRET_ACCESS_KEY
                      - name: MLFLOW_S3_ENDPOINT_URL
                        valueFrom:
                          secretKeyRef:
                            name: mlflow-s3-secret
                            key: S3_ENDPOINT_URL
                      - name: MLFLOW_S3_IGNORE_TLS
                        value: "true"
                      - name: OIDC_DISCOVERY_URL
                        value: "{{ keycloak_url }}/realms/{{ keycloak_realm }}/.well-known/openid-configuration"
                      - name: OIDC_CLIENT_ID
                        value: "{{ mlflow_client_id }}"
                      - name: OIDC_CLIENT_SECRET
                        valueFrom:
                          secretKeyRef:
                            name: oauth2-proxy-secret
                            key: client-secret
                      - name: OIDC_PROVIDER_DISPLAY_NAME
                        value: "Login with Keycloak"
                      - name: OIDC_SCOPE
                        value: "openid profile email"
                      - name: OIDC_REDIRECT_URI
                        value: "https://{{ mlflow_hostname }}/callback"
                      - name: OIDC_GROUP_NAME
                        value: "mlflow-user"
                      - name: OIDC_ADMIN_GROUP_NAME
                        value: "mlflow-admin"
                      - name: OIDC_GROUPS_ATTRIBUTE
                        value: "realm_access.roles"
                      - name: OIDC_GROUP_DETECTION_PLUGIN
                        value: "mlflow_keycloak_groups"
                      - name: AUTOMATIC_LOGIN_REDIRECT
                        value: "true"
                      - name: SECRET_KEY
                        value: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
                    ports:
                      - containerPort: 5000
                        name: http
                    livenessProbe:
                      httpGet:
                        path: /
                        port: 5000
                      initialDelaySeconds: 60
                      timeoutSeconds: 5
                    readinessProbe:
                      httpGet:
                        path: /
                        port: 5000
                      initialDelaySeconds: 30
                      timeoutSeconds: 5
                    resources:
                      requests:
                        memory: "256Mi"
                        cpu: "100m"
                      limits:
                        memory: "1Gi"
                        cpu: "500m"

    - name: Create MLflow Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ mlflow_namespace }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: mlflow
            labels:
              app: mlflow
          spec:
            ports:
              - port: 5000
                targetPort: 5000
                protocol: TCP
                name: http
            selector:
              app: mlflow

    - name: Create MLflow Ingress
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ mlflow_namespace }}"
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: mlflow
            annotations:
              nginx.ingress.kubernetes.io/proxy-body-size: "0"
          spec:
            ingressClassName: "{{ primary_ingress_class }}"
            tls:
              - hosts:
                  - "{{ mlflow_hostname }}"
                secretName: "{{ mlflow_tls_secret_name }}"
            rules:
              - host: "{{ mlflow_hostname }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: mlflow
                          port:
                            number: 5000

    - name: Final MLflow info
      ansible.builtin.debug:
        msg:
          - "MLflow tracking server deployed with built-in OIDC auth integration."
          - "Namespace: {{ mlflow_namespace }}"
          - "TLS secret: {{ mlflow_tls_secret_name }}"
          - "MLflow UI: https://{{ mlflow_hostname }}"
          - "Database: MLflow database '{{ mlflow_db_name }}' created with user '{{ mlflow_db_user }}'"
          - "Artifacts: MinIO bucket '{{ mlflow_artifacts_bucket }}' created"
          - "Image: {{ harbor_registry }}/{{ harbor_project }}/mlflow-custom:latest"
          - "Authentication is handled through MLflow OIDC auth plugin"
          - "Uses Keycloak realm {{ keycloak_realm }} with client ID: {{ mlflow_client_id }}"
          - "User group: mlflow-user, Admin group: mlflow-admin"