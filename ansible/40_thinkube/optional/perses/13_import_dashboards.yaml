# Copyright 2025 Alejandro Mart√≠nez Corri√° and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/optional/perses/13_import_dashboards.yaml
# Description:
#   Import dashboards to Perses from community repository and Grafana
#
# This playbook:
#   1. Downloads Perses community dashboards (Kubernetes, Node Exporter)
#   2. Downloads Grafana dashboards for NGINX and GPU
#   3. Creates Perses projects for organization
#   4. Deploys all dashboards as Kubernetes resources
#
# Requirements:
#   - Perses must be deployed (11_deploy.yaml)
#   - Prometheus must be deployed and collecting metrics
#   - Internet access to download dashboards
#
# Usage:
#   cd ~/thinkube
#   ./scripts/tk_ansible ansible/40_thinkube/optional/perses/13_import_dashboards.yaml
#
# Variables from inventory:
#   - domain_name: Base domain
#   - kubeconfig: Path to kubeconfig file
#
# ü§ñ AI-assisted

- name: Import Dashboards to Perses
  hosts: microk8s_control_plane
  gather_facts: true

  vars:
    perses_hostname: "perses.{{ domain_name }}"
    perses_namespace: "perses"
    community_dashboards_repo: "https://raw.githubusercontent.com/perses/community-dashboards/main/jsonnet/examples"

    # Native Perses dashboards from community repository
    perses_dashboards:
      - url: "{{ community_dashboards_repo }}/kubernetes-cluster-resources-overview.yaml"
        name: "kubernetes-cluster-resources"
        project: "kubernetes"
      - url: "{{ community_dashboards_repo }}/node-exporter-nodes.yaml"
        name: "node-exporter-nodes"
        project: "infrastructure"

    # Grafana dashboards - NOT SUPPORTED
    # Perses provisioning requires 'kind' field which Grafana JSON doesn't have
    # TODO: Use percli to convert Grafana dashboards to Perses format
    grafana_dashboards: []
    #  - id: 9614
    #    name: "Nginx Ingress Controller"
    #    project: "applications"
    #  - id: 12239
    #    name: "NVIDIA DCGM Exporter"
    #    project: "gpu"

  tasks:
    ###################################################################
    # 1) Create admin GlobalRole and GlobalRoleBinding
    ###################################################################
    - name: Create admin GlobalRole ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: perses-admin-globalrole
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "GlobalRole"
          data:
            admin-role.yaml: |
              kind: GlobalRole
              metadata:
                name: admin
              spec:
                permissions:
                  - actions: ["*"]
                    scopes: ["*"]

    - name: Create admin GlobalRoleBinding for SSO user ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: perses-admin-globalrolebinding-sso
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "GlobalRoleBinding"
          data:
            admin-binding-sso.yaml: |
              kind: GlobalRoleBinding
              metadata:
                name: admin-binding-sso
              spec:
                role: admin
                subjects:
                  - kind: User
                    name: {{ auth_realm_username }}

    - name: Create admin GlobalRoleBinding for native user ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: perses-admin-globalrolebinding-native
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "GlobalRoleBinding"
          data:
            admin-binding-native.yaml: |
              kind: GlobalRoleBinding
              metadata:
                name: admin-binding-native
              spec:
                role: admin
                subjects:
                  - kind: User
                    name: {{ admin_username }}

    ###################################################################
    # 2) Create Prometheus datasource for each project
    ###################################################################
    - name: Create Prometheus datasource for kubernetes project
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-datasource-kubernetes"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "Datasource"
          data:
            datasource-kubernetes.yaml: |
              kind: Datasource
              metadata:
                name: custom-datasource
                project: kubernetes
              spec:
                default: true
                plugin:
                  kind: PrometheusDatasource
                  spec:
                    proxy:
                      kind: HTTPProxy
                      spec:
                        url: http://prometheus.monitoring.svc.cluster.local:9090
                        allowedEndpoints:
                          - endpointPattern: /api/v1/labels
                            method: POST
                          - endpointPattern: /api/v1/series
                            method: POST
                          - endpointPattern: /api/v1/metadata
                            method: GET
                          - endpointPattern: /api/v1/query
                            method: POST
                          - endpointPattern: /api/v1/query_range
                            method: POST
                          - endpointPattern: /api/v1/label/([a-zA-Z0-9_-]+)/values
                            method: GET

    - name: Create Prometheus datasource for infrastructure project
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-datasource-infrastructure"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "Datasource"
          data:
            datasource-infrastructure.yaml: |
              kind: Datasource
              metadata:
                name: custom-datasource
                project: infrastructure
              spec:
                default: true
                plugin:
                  kind: PrometheusDatasource
                  spec:
                    proxy:
                      kind: HTTPProxy
                      spec:
                        url: http://prometheus.monitoring.svc.cluster.local:9090
                        allowedEndpoints:
                          - endpointPattern: /api/v1/labels
                            method: POST
                          - endpointPattern: /api/v1/series
                            method: POST
                          - endpointPattern: /api/v1/metadata
                            method: GET
                          - endpointPattern: /api/v1/query
                            method: POST
                          - endpointPattern: /api/v1/query_range
                            method: POST
                          - endpointPattern: /api/v1/label/([a-zA-Z0-9_-]+)/values
                            method: GET

    - name: Create Prometheus datasource for applications project
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-datasource-applications"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "Datasource"
          data:
            datasource-applications.yaml: |
              kind: Datasource
              metadata:
                name: custom-datasource
                project: applications
              spec:
                default: true
                plugin:
                  kind: PrometheusDatasource
                  spec:
                    proxy:
                      kind: HTTPProxy
                      spec:
                        url: http://prometheus.monitoring.svc.cluster.local:9090
                        allowedEndpoints:
                          - endpointPattern: /api/v1/labels
                            method: POST
                          - endpointPattern: /api/v1/series
                            method: POST
                          - endpointPattern: /api/v1/metadata
                            method: GET
                          - endpointPattern: /api/v1/query
                            method: POST
                          - endpointPattern: /api/v1/query_range
                            method: POST
                          - endpointPattern: /api/v1/label/([a-zA-Z0-9_-]+)/values
                            method: GET

    - name: Create Prometheus datasource for gpu project
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-datasource-gpu"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "Datasource"
          data:
            datasource-gpu.yaml: |
              kind: Datasource
              metadata:
                name: custom-datasource
                project: gpu
              spec:
                default: true
                plugin:
                  kind: PrometheusDatasource
                  spec:
                    proxy:
                      kind: HTTPProxy
                      spec:
                        url: http://prometheus.monitoring.svc.cluster.local:9090
                        allowedEndpoints:
                          - endpointPattern: /api/v1/labels
                            method: POST
                          - endpointPattern: /api/v1/series
                            method: POST
                          - endpointPattern: /api/v1/metadata
                            method: GET
                          - endpointPattern: /api/v1/query
                            method: POST
                          - endpointPattern: /api/v1/query_range
                            method: POST
                          - endpointPattern: /api/v1/label/([a-zA-Z0-9_-]+)/values
                            method: GET

    ###################################################################
    # 3) Create Perses projects (equivalent to Grafana folders)
    ###################################################################
    - name: Create Perses project ConfigMap for kubernetes
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-project-kubernetes"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "Project"
          data:
            project-kubernetes.yaml: |
              kind: Project
              metadata:
                name: "kubernetes"
              spec:
                display:
                  name: "Kubernetes"

    - name: Create Perses project ConfigMap for infrastructure
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-project-infrastructure"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "Project"
          data:
            project-infrastructure.yaml: |
              kind: Project
              metadata:
                name: "infrastructure"
              spec:
                display:
                  name: "Infrastructure"

    - name: Create Perses project ConfigMap for applications
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-project-applications"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "Project"
          data:
            project-applications.yaml: |
              kind: Project
              metadata:
                name: "applications"
              spec:
                display:
                  name: "Applications"

    - name: Create Perses project ConfigMap for gpu
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-project-gpu"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "Project"
          data:
            project-gpu.yaml: |
              kind: Project
              metadata:
                name: "gpu"
              spec:
                display:
                  name: "GPU"

    ###################################################################
    # 2) Deploy native Perses dashboards from community repository
    ###################################################################
    - name: Download Perses community dashboards
      ansible.builtin.uri:
        url: "{{ item.url }}"
        method: GET
        validate_certs: false
        return_content: true
      loop: "{{ perses_dashboards }}"
      loop_control:
        label: "{{ item.name }}"
      register: perses_dashboard_content

    - name: Transform kubernetes dashboard to provisioning format
      ansible.builtin.set_fact:
        kubernetes_dashboard_content: >-
          {{ perses_dashboard_content.results[0].content | regex_replace('kind: PersesDashboard', 'kind: Dashboard') |
             regex_replace('apiVersion: perses.dev/v1alpha1\n', '') |
             regex_replace('namespace: perses-dev', 'project: kubernetes') |
             regex_replace('job="cadvisor"', 'job="kubernetes-cadvisor"') |
             regex_replace('job="node-exporter"', 'job="node-exporter"') }}

    - name: Transform node-exporter dashboard to provisioning format
      ansible.builtin.set_fact:
        nodeexporter_dashboard_content: >-
          {{ perses_dashboard_content.results[1].content | regex_replace('kind: PersesDashboard', 'kind: Dashboard') |
             regex_replace('apiVersion: perses.dev/v1alpha1\n', '') |
             regex_replace('namespace: perses-dev', 'project: infrastructure') |
             regex_replace('job="node"', 'job="node-exporter"') |
             regex_replace('instance="\$instance"', 'instance=~".*"') }}

    - name: Create ConfigMap for kubernetes dashboard
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-dashboard-kubernetes-cluster"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "Dashboard"
          data:
            dashboard-kubernetes.yaml: "{{ kubernetes_dashboard_content }}"

    - name: Create ConfigMap for node-exporter dashboard
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-dashboard-node-exporter"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
              perses.dev/resource-kind: "Dashboard"
          data:
            dashboard-nodeexporter.yaml: "{{ nodeexporter_dashboard_content }}"

    ###################################################################
    # 3) Import Grafana dashboards as ConfigMaps
    ###################################################################
    - name: Download Grafana dashboards from grafana.com
      ansible.builtin.uri:
        url: "https://grafana.com/api/dashboards/{{ item.id }}/revisions/latest/download"
        method: GET
        validate_certs: false
        return_content: true
      loop: "{{ grafana_dashboards }}"
      loop_control:
        label: "{{ item.name }}"
      register: downloaded_grafana_dashboards
      when: grafana_dashboards | length > 0

    - name: Create ConfigMaps with Grafana dashboards
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "perses-grafana-dashboard-{{ item.0.id }}"
            namespace: "{{ perses_namespace }}"
            labels:
              perses.dev/resource: "true"
          data:
            dashboard.json: "{{ item.1.content }}"
      loop: "{{ grafana_dashboards | zip(downloaded_grafana_dashboards.results) | list }}"
      loop_control:
        label: "{{ item.0.name }}"
      when: grafana_dashboards | length > 0

    ###################################################################
    # 4) Summary
    ###################################################################
    - name: Dashboard import summary
      ansible.builtin.debug:
        msg: |
          ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
          ‚úÖ Dashboards Imported to Perses
          ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

          üìä NATIVE PERSES DASHBOARDS (from community repository):
          ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
          ‚Ä¢ Kubernetes / Compute Resources / Cluster
            - Native Perses format
            - Full PromQL support
            - CPU, Memory, Network, Storage metrics

          ‚Ä¢ Node Exporter / Nodes
            - Native Perses format
            - Infrastructure monitoring
            - System-level metrics

          Access dashboards at: https://{{ perses_hostname }}

          Notes:
          - Dashboards are stored as Kubernetes ConfigMaps
          - Sidecar automatically provisions dashboards from ConfigMaps
          - To add more dashboards, create ConfigMaps with label perses.dev/resource=true

          TODO: NGINX and GPU dashboards
          - Grafana JSON format not supported by Perses provisioning
          - Need to use percli tool to convert Grafana dashboards
          - Or find/create native Perses dashboards for these metrics
          ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
