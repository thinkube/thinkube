# Copyright 2025 Alejandro MartÃ­nez CorriÃ¡ and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/optional/knative/19_rollback.yaml
# Description:
#   Cleanup script for Knative installations
#   Completely removes Knative from the cluster
#
# Requirements:
#   - MicroK8s with kubectl installed
#   - Knative components installed
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/optional/knative/19_rollback.yaml
#
# Variables from inventory:
#   - kubectl_bin: Path to kubectl binary
#   - kubeconfig: Path to kubeconfig file
#
# Dependencies:
#   - None (this is a cleanup playbook)
#
# ðŸ¤– [AI-assisted]

- name: Cleanup Knative installation
  hosts: microk8s_control_plane
  gather_facts: true
  vars:
    knative_namespaces:
      - knative-serving
      - knative-eventing
      - kourier-system
      - kn
    timeout: 240  # Long timeout for deletion operations

  tasks:
    - name: Display cleanup warning
      ansible.builtin.debug:
        msg: |
          WARNING: This will completely remove Knative from your cluster.
          All Knative services, configs, and resources will be deleted.
          
          Starting cleanup process...

    - name: Delete all Knative services
      ansible.builtin.shell: |
        set +e  # Continue on errors
        # Try to find and delete all Knative services across namespaces
        for NS in $({{ kubectl_bin }} get namespaces -o jsonpath='{.items[*].metadata.name}'); do
          echo "Checking namespace $NS for Knative services..."
          {{ kubectl_bin }} get ksvc -n $NS 2>/dev/null
          if [ $? -eq 0 ]; then
            echo "Found Knative services in $NS, deleting..."
            {{ kubectl_bin }} delete ksvc --all -n $NS
          fi
        done
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      changed_when: true
      failed_when: false
      register: delete_services

    - name: Display services deletion result
      ansible.builtin.debug:
        msg: "{{ delete_services.stdout_lines }}"

    - name: Remove Knative webhooks
      ansible.builtin.shell: |
        set -x
        # Delete all webhooks that might block operations
        {{ kubectl_bin }} delete mutatingwebhookconfiguration --all
        {{ kubectl_bin }} delete validatingwebhookconfiguration --all
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      changed_when: true
      failed_when: false
      register: webhooks_deletion

    - name: Remove Knative Custom Resource Definitions
      ansible.builtin.shell: |
        set -x
        # Delete all Knative CRDs to clean up completely
        {{ kubectl_bin }} delete crd -l knative.dev/crd-install=true
        {{ kubectl_bin }} delete crd -l serving.knative.dev/release=
        {{ kubectl_bin }} delete crd -l duck.knative.dev/addressable=true
        {{ kubectl_bin }} delete crd -l eventing.knative.dev/release=
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      changed_when: true
      failed_when: false
      register: crds_deletion

    - name: Clean up ingress rules
      ansible.builtin.shell: |
        set -x
        # Delete any Knative-related ingresses
        {{ kubectl_bin }} delete ingress -l knative.dev/route=true --all-namespaces
        {{ kubectl_bin }} delete ingress knative-wildcard-ingress -n kourier-system 2>/dev/null || true
        {{ kubectl_bin }} delete ingress knative-direct-ingress -n kourier-system 2>/dev/null || true
        {{ kubectl_bin }} delete ingress -l serving.knative.dev/route=true --all-namespaces
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      changed_when: true
      failed_when: false
      register: ingress_cleanup

    - name: Delete thinkube-service-config ConfigMaps
      ansible.builtin.shell: |
        set -x
        # Explicitly delete tracking ConfigMaps before namespace deletion
        {{ kubectl_bin }} delete configmap thinkube-service-config -n knative-serving 2>/dev/null || true
        {{ kubectl_bin }} delete configmap thinkube-service-config -n knative-eventing 2>/dev/null || true
        {{ kubectl_bin }} delete configmap thinkube-service-config -n kourier-system 2>/dev/null || true
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      changed_when: true
      failed_when: false
      register: configmap_cleanup

    - name: Delete Knative namespaces (force)
      ansible.builtin.shell: |
        # Delete the namespace non-blocking
        {{ kubectl_bin }} delete namespace {{ item }} --wait=false &
        
        # Give it a few seconds
        sleep 3
        
        echo "Removing finalizers from namespace {{ item }}..."
        # Remove finalizers from namespace to force deletion
        {{ kubectl_bin }} get namespace {{ item }} -o json | tr -d "\n" | sed "s/\"finalizers\": \[[^]]\+\]/\"finalizers\": []/" | {{ kubectl_bin }} replace --raw "/api/v1/namespaces/{{ item }}/finalize" -f -
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      loop: "{{ knative_namespaces }}"
      failed_when: false
      register: namespace_deletion
      changed_when: true

    - name: Wait for namespaces to be deleted (or give up if stuck)
      ansible.builtin.shell: >
        for i in {1..10}; do
          echo "Attempt $i to verify deletion of namespace {{ item }}...";
          if ! {{ kubectl_bin }} get namespace {{ item }} &>/dev/null; then
            echo "Namespace {{ item }} has been successfully deleted!";
            exit 0;
          fi;
          echo "Namespace {{ item }} still exists. Waiting...";
          sleep 5;
        done;
        echo "WARNING: Namespace {{ item }} could not be deleted properly. It may be stuck.";
        echo "Consider manually addressing this issue before reinstalling Knative.";
        exit 0
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      loop: "{{ knative_namespaces }}"
      changed_when: false
      register: namespace_check

    - name: Verify removal of all Knative components
      ansible.builtin.shell: |
        echo "=== VERIFICATION RESULTS ==="
        
        echo "Checking for any remaining Knative CRDs..."
        REMAINING_CRDS=$({{ kubectl_bin }} get crd -o name | grep -i knative)
        if [ -n "$REMAINING_CRDS" ]; then
          echo "Warning: Some Knative CRDs still exist:"
          echo "$REMAINING_CRDS"
        else
          echo "âœ… All Knative CRDs have been removed"
        fi
        
        echo "Checking for any remaining Knative namespaces..."
        for NS in {{ knative_namespaces | join(' ') }}; do
          if {{ kubectl_bin }} get namespace $NS &>/dev/null; then
            echo "Warning: Namespace $NS still exists"
          else
            echo "âœ… Namespace $NS has been removed"
          fi
        done
        
        echo "Checking for any remaining Kourier components..."
        KOURIER_SVC=$({{ kubectl_bin }} get svc -A | grep -i kourier)
        if [ -n "$KOURIER_SVC" ]; then
          echo "Warning: Some Kourier services still exist:"
          echo "$KOURIER_SVC"
        else
          echo "âœ… All Kourier services have been removed"
        fi
      environment:
        KUBECONFIG: "{{ kubeconfig }}"
      register: verification
      changed_when: false

    - name: Display cleanup results
      ansible.builtin.debug:
        msg: |
          ==========================================
          KNATIVE CLEANUP RESULTS
          ==========================================
          
          {{ verification.stdout_lines | join('\n') }}
          
          The Knative cleanup is complete. You can now reinstall Knative using:
          ./scripts/run_ansible.sh ansible/40_thinkube/optional/knative/10_deploy.yaml