# Copyright 2025 Alejandro Mart√≠nez Corri√° and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

---
# ansible/40_thinkube/optional/monitoring/10_deploy.yaml
# Description:
#   Deploy Prometheus as a StatefulSet with persistent storage and Ingress
#   Migrated from thinkube-core/playbooks/services/90_setup_prometheus.yaml
#
# Requirements:
#   - MicroK8s cluster with control plane and workers
#   - TLS wildcard certificate in default namespace
#   - Storage class available for persistent volumes
#   - Ingress controller deployed
#
# Usage:
#   cd ~/thinkube
#   ./scripts/run_ansible.sh ansible/40_thinkube/optional/monitoring/10_deploy_prometheus.yaml
#
# Variables from inventory:
#   - monitoring_namespace: Namespace for monitoring components (monitoring)
#   - prometheus_hostname: Hostname for Prometheus UI
#   - prometheus_storage_size: Storage size for Prometheus data (20Gi)
#   - prometheus_storage_class: Storage class to use (microk8s-hostpath)
#   - harbor_registry: Harbor registry URL
#   - kubeconfig: Path to kubectl configuration
#   - primary_ingress_ip: Primary ingress IP address
#
# Dependencies:
#   - CORE-002: TLS Certificates (wildcard cert in default namespace)
#   - CORE-003: Ingress Controllers
#   - CORE-005: Harbor Container Registry (for image)
#
# ü§ñ [AI-assisted]

- name: Deploy Prometheus + Ingress
  hosts: microk8s_control_plane
  gather_facts: false

  vars:
    # Component specific variables
    prometheus_image: "{{ harbor_registry }}/library/prometheus:latest"
    tls_secret_name: "prometheus-tls-secret"
    
  tasks:
    ###################################################################
    # 1) Create the monitoring namespace
    ###################################################################
    - name: Create monitoring namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ monitoring_namespace }}"

    ###################################################################
    # 2) Get and copy wildcard certificate
    ###################################################################
    - name: Get wildcard certificate from default namespace
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Secret
        namespace: default
        name: "{{ domain_name.replace('.', '-') }}-tls"
      register: wildcard_cert
      failed_when: wildcard_cert.resources | length == 0

    - name: Copy wildcard certificate to Prometheus namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ tls_secret_name }}"
            namespace: "{{ monitoring_namespace }}"
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ wildcard_cert.resources[0].data['tls.crt'] }}"
            tls.key: "{{ wildcard_cert.resources[0].data['tls.key'] }}"

    ###################################################################
    # 3) Create RBAC for Prometheus
    ###################################################################
    - name: Create Prometheus ServiceAccount
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ monitoring_namespace }}"
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: prometheus
    
    - name: Create Prometheus ClusterRole
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: prometheus
          rules:
          - apiGroups: [""]
            resources:
              - nodes
              - nodes/metrics
              - services
              - endpoints
              - pods
            verbs: ["get", "list", "watch"]
          - apiGroups: [""]
            resources:
              - configmaps
            verbs: ["get"]
          - nonResourceURLs: ["/metrics"]
            verbs: ["get"]
    
    - name: Create Prometheus ClusterRoleBinding
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: prometheus
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: prometheus
          subjects:
          - kind: ServiceAccount
            name: prometheus
            namespace: "{{ monitoring_namespace }}"

    ###################################################################
    # 4) Create the Prometheus ConfigMap
    ###################################################################
    - name: Create Prometheus ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ monitoring_namespace }}"
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: prometheus-config
          data:
            prometheus.yml: |
              global:
                scrape_interval: 15s
                evaluation_interval: 15s
                
              alerting:
                alertmanagers:
                - static_configs:
                  - targets:
                    # - alertmanager:9093
              
              rule_files:
                # - "first_rules.yml"
                # - "second_rules.yml"
              
              scrape_configs:
                - job_name: 'prometheus'
                  static_configs:
                  - targets: ['localhost:9090']
                
                - job_name: 'kubernetes-apiservers'
                  kubernetes_sd_configs:
                  - role: endpoints
                  scheme: https
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                    insecure_skip_verify: true
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                  relabel_configs:
                  - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                    action: keep
                    regex: default;kubernetes;https
                
                - job_name: 'kubernetes-nodes'
                  scheme: https
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                    insecure_skip_verify: true
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                  kubernetes_sd_configs:
                  - role: node
                  relabel_configs:
                  - action: labelmap
                    regex: __meta_kubernetes_node_label_(.+)
                  - target_label: __address__
                    replacement: kubernetes.default.svc:443
                  - source_labels: [__meta_kubernetes_node_name]
                    regex: (.+)
                    target_label: __metrics_path__
                    replacement: /api/v1/nodes/${1}/proxy/metrics
                
                - job_name: 'kubernetes-pods'
                  kubernetes_sd_configs:
                  - role: pod
                  relabel_configs:
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                    action: keep
                    regex: true
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                    action: replace
                    regex: ([^:]+)(?::\d+)?;(\d+)
                    replacement: $1:$2
                    target_label: __address__
                  - action: labelmap
                    regex: __meta_kubernetes_pod_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    target_label: kubernetes_namespace
                  - source_labels: [__meta_kubernetes_pod_name]
                    action: replace
                    target_label: kubernetes_pod_name
                
                - job_name: 'kubernetes-service-endpoints'
                  kubernetes_sd_configs:
                  - role: endpoints
                  relabel_configs:
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                    action: keep
                    regex: true
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                    action: replace
                    target_label: __scheme__
                    regex: (https?)
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                    action: replace
                    target_label: __address__
                    regex: ([^:]+)(?::\d+)?;(\d+)
                    replacement: $1:$2
                  - action: labelmap
                    regex: __meta_kubernetes_service_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    target_label: kubernetes_namespace
                  - source_labels: [__meta_kubernetes_service_name]
                    action: replace
                    target_label: kubernetes_name

    ###################################################################
    # 5) Create Prometheus StatefulSet
    ###################################################################
    - name: Create Prometheus StatefulSet
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ monitoring_namespace }}"
        state: present
        definition:
          apiVersion: apps/v1
          kind: StatefulSet
          metadata:
            name: prometheus
          spec:
            serviceName: prometheus
            replicas: 1
            selector:
              matchLabels:
                app: prometheus
            template:
              metadata:
                labels:
                  app: prometheus
              spec:
                serviceAccountName: prometheus
                containers:
                  - name: prometheus
                    image: "{{ prometheus_image }}"
                    args:
                      - "--config.file=/etc/prometheus/prometheus.yml"
                      - "--storage.tsdb.path=/prometheus"
                      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
                      - "--web.console.templates=/usr/share/prometheus/consoles"
                      - "--web.enable-lifecycle"
                    ports:
                      - containerPort: 9090
                        name: http
                    volumeMounts:
                      - name: prometheus-config
                        mountPath: /etc/prometheus/
                      - name: data
                        mountPath: /prometheus
                    livenessProbe:
                      httpGet:
                        path: /-/healthy
                        port: 9090
                      initialDelaySeconds: 30
                      timeoutSeconds: 30
                    readinessProbe:
                      httpGet:
                        path: /-/ready
                        port: 9090
                      initialDelaySeconds: 30
                      timeoutSeconds: 30
                volumes:
                  - name: prometheus-config
                    configMap:
                      name: prometheus-config
            volumeClaimTemplates:
              - metadata:
                  name: data
                spec:
                  accessModes:
                    - ReadWriteOnce
                  storageClassName: "{{ prometheus_storage_class }}"
                  resources:
                    requests:
                      storage: "{{ prometheus_storage_size }}"

    ###################################################################
    # 6) Create Prometheus Service
    ###################################################################
    - name: Create Prometheus Service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ monitoring_namespace }}"
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: prometheus
            labels:
              app: prometheus
          spec:
            ports:
              - port: 9090
                targetPort: 9090
                protocol: TCP
                name: http
            selector:
              app: prometheus

    ###################################################################
    # 7) Create Prometheus Ingress
    ###################################################################
    - name: Create Prometheus Ingress
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        namespace: "{{ monitoring_namespace }}"
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: prometheus
            annotations:
              nginx.ingress.kubernetes.io/proxy-body-size: "0"
          spec:
            ingressClassName: nginx
            tls:
              - hosts:
                  - "{{ prometheus_hostname }}"
                secretName: "{{ tls_secret_name }}"
            rules:
              - host: "{{ prometheus_hostname }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: prometheus
                          port:
                            number: 9090

    ###################################################################
    # 8) Final info
    ###################################################################
    - name: Wait for Prometheus to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: StatefulSet
        namespace: "{{ monitoring_namespace }}"
        name: prometheus
      register: prometheus_deployment
      until: 
        - prometheus_deployment.resources[0].status.readyReplicas is defined
        - prometheus_deployment.resources[0].status.readyReplicas == 1
      retries: 60
      delay: 5

    - name: Final Prometheus info
      ansible.builtin.debug:
        msg:
          - "Prometheus deployed successfully!"
          - "Namespace: {{ monitoring_namespace }}"
          - "URL: https://{{ prometheus_hostname }}"
          - "Service: prometheus port 9090"
          - ""
          - "Note: No authentication configured (following reference implementation)"
          - "Consider adding OAuth2 Proxy for production use"