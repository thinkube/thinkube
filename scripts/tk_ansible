#!/bin/bash

# Copyright 2025 Alejandro Martínez Corriá and the Thinkube contributors
# SPDX-License-Identifier: Apache-2.0

# Simplified Ansible runner for code-server environment
# Always runs in cluster network - no network detection needed
# Usage: tk_ansible ansible/path/to/playbook.yaml [ansible-args]

set -e  # Exit on error

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
THINKUBE_DIR="$(dirname "$SCRIPT_DIR")"

# Inventory location (shared between code-server and thinkube-control)
INVENTORY_DIR="/home/thinkube/.ansible/inventory"

# Check if playbook argument is provided
if [ -z "$1" ]; then
  echo "ERROR: No playbook specified"
  echo "Usage: $0 ansible/path/to/playbook.yaml [additional options]"
  exit 1
fi

PLAYBOOK="$1"
shift  # Remove first argument

# Source environment variables and export them for Ansible
if [ -f "$HOME/.env" ]; then
  echo "Loading environment variables from $HOME/.env"
  set -a  # automatically export all variables
  source "$HOME/.env"
  set +a  # stop auto-exporting
else
  echo "ERROR: $HOME/.env file not found!"
  exit 1
fi

# Activate virtual environment if it exists
if [ -d "$HOME/.venv" ]; then
  echo "Activating Python virtual environment from $HOME/.venv"
  source "$HOME/.venv/bin/activate"
else
  echo "WARNING: No Python virtual environment found at $HOME/.venv"
  echo "Using system Python"
fi

# Set ANSIBLE_BECOME_PASSWORD from environment
if [ -z "$ANSIBLE_BECOME_PASSWORD" ]; then
  echo "ERROR: ANSIBLE_BECOME_PASSWORD not set in .env file"
  exit 1
fi

# Set SSH password for Ansible
if [ -n "$ANSIBLE_SSH_PASS" ]; then
  export ANSIBLE_SSH_PASS
else
  echo "ANSIBLE_SSH_PASS not set, using ANSIBLE_BECOME_PASSWORD for SSH authentication"
  export ANSIBLE_SSH_PASS="$ANSIBLE_BECOME_PASSWORD"
fi

# Make sure we have sshpass installed
if ! command -v sshpass &> /dev/null; then
  echo "Installing sshpass..."
  sudo apt-get update -qq && sudo apt-get install -qq -y sshpass
fi

# Get the system username from inventory
SYSTEM_USERNAME=$(python3 -c "import yaml; inv=yaml.safe_load(open('${INVENTORY_DIR}/inventory.yaml')); print(inv['all']['vars']['system_username'])" 2>/dev/null || echo "thinkube")
if [ -z "$SYSTEM_USERNAME" ]; then
  echo "WARNING: Could not determine system_username from inventory, using default 'thinkube'"
  SYSTEM_USERNAME="thinkube"
fi

# Common Ansible settings
export ANSIBLE_HOST_KEY_CHECKING=False

# Create a temporary vars file for authentication
TEMP_VARS="/tmp/ansible-vars-$$.yml"
cat > "$TEMP_VARS" << 'EOF'
---
ansible_become_pass: "${ANSIBLE_BECOME_PASSWORD}"
ansible_ssh_pass: "${ANSIBLE_SSH_PASS}"
ansible_user: "${SYSTEM_USERNAME}"
ansible_python_interpreter: "/home/${SYSTEM_USERNAME}/.venv/bin/python3"
EOF

# Replace placeholders with actual values
sed -i "s|\${ANSIBLE_BECOME_PASSWORD}|$ANSIBLE_BECOME_PASSWORD|g" "$TEMP_VARS"
sed -i "s|\${ANSIBLE_SSH_PASS}|$ANSIBLE_SSH_PASS|g" "$TEMP_VARS"
sed -i "s|\${SYSTEM_USERNAME}|$SYSTEM_USERNAME|g" "$TEMP_VARS"

# Execute playbook with extra vars
# Set code-server specific Kubernetes variables
echo "Running playbook: $PLAYBOOK"
ansible-playbook -i "${INVENTORY_DIR}/inventory.yaml" "$PLAYBOOK" \
  -e "@$TEMP_VARS" \
  -e "kubectl_bin=microk8s.kubectl" \
  -e "kubeconfig=/var/snap/microk8s/current/credentials/client.config" \
  "$@"
RESULT=$?

# Clean up temporary files
rm -f "$TEMP_VARS"

exit $RESULT
